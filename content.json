{"meta":{"title":"whks-blog","subtitle":"","description":"你好呀，谢谢观看","author":"whk","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2021-01-05T13:39:14.000Z","updated":"2021-01-05T13:41:42.554Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-01-05T11:57:26.408Z","updated":"2021-01-05T11:38:49.011Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"tages","date":"2021-01-05T13:39:27.000Z","updated":"2021-01-05T13:41:43.139Z","comments":true,"path":"tages/index.html","permalink":"http://example.com/tages/index.html","excerpt":"","text":""}],"posts":[{"title":"计算机网络","slug":"计算机网络","date":"2021-04-17T08:38:33.000Z","updated":"2021-04-17T09:54:34.812Z","comments":true,"path":"2021/04/17/计算机网络/","link":"","permalink":"http://example.com/2021/04/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","excerpt":"","text":"这里是计算机网络知识点 第一章互联网概述网络的网络​ 计算机网络（简称网络）由若干结点和连接这些结点的链路组成。网络中的结点可以是计算机、集线器、交换机或路由器等\\n ​ 多个网络通过路由器互联起来成为互连网；互连网是网络的网络\\n ​ 网络把许多计算机连接在一起，而互联网则把许多网络通过路由器连接在一起。与互联网相连的计算机常称为主机**\\n 互联网的基础结构发展三个阶段第一阶段：ARPANET向互连网发展的过程\\n​ internet(互连网)是一个通用名词，它泛指由多个计算机网络互连而成的计算机网络。网络之间的通信协议可以任意选择\\n ​ Internet(互联网，或因特网)则是一个专用名词，它只电器那全球最大的、开放的、由众多网络相互连接而成的特定互联网，它采用TCP/IP协议族作为通信的规则，其前身是美国的ARPANET\\n 第二阶段： 特点是建成了三级结构的互联网​ 分为 主干网、地区网和 校园网（或 企业网） ​ www万维网 第三阶段： 特点是逐渐形成了多层次IPS结构的互联网互联网的标准化工作互联网的组成​ 边缘部分 由所以连接在互联网上的主机组成。这部分是 用户直接使用的,用来进行通信（传输数据、音频或视频）和资源共享 ​ 核心部分 由大量网络和连接这些网络的路由器组成。这部分是 为边缘部分提供服务的 （提供连通性和交换） 互联网的边缘部分​ 处在互联网边缘的部分就是连接在互联网上的所有主机。这些主机由称为 端系统\\n ​ 主机A的某个进程和主机B上的某一个进程进行通信 简称为 “计算机之间的通信”\\n ​ 通信的方式可分为两大类：\\n 1.客户-服务器方式​ 客户和服务器都是只通信中所涉及的两个应用进程 ​ 客户是服务请求方，服务器是服务提供方 2.对等连接方式第二章第三章","categories":[],"tags":[{"name":"期末复习","slug":"期末复习","permalink":"http://example.com/tags/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"}]},{"title":"MySQL","slug":"MySQL","date":"2021-03-06T07:19:18.000Z","updated":"2021-03-06T07:19:18.466Z","comments":true,"path":"2021/03/06/MySQL/","link":"","permalink":"http://example.com/2021/03/06/MySQL/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"os","slug":"os","date":"2021-03-05T11:44:31.000Z","updated":"2021-03-05T13:05:20.629Z","comments":true,"path":"2021/03/05/os/","link":"","permalink":"http://example.com/2021/03/05/os/","excerpt":"","text":"第一章定义操作系统是计算机系统中的一个系统软件，它统一管理计算机的软硬件资源，控制程序的执行，提供人机交互的接口和界面。 主要目标(1) 方便用户使用 (2) 扩展机器功能 (3) 管理系统资源 (4) 提高系统效率 (5) 构筑开放环境 批处理os 多批道处理os 分时os 实时os 通用os 网络os 分布式os 嵌入式os 未来 配有专门的计算机操作员批处理 多道程序设计完备的功能集合：作业调度管理、处理器管理、储存器管理、外部设备管理、文件管理系统等 一台计算机与许多终端连接每个用户可以通过向终端系统发出各种控制命令，请求完成某项工作、系统分析发来的命令，完成用户所提要求，输出必要信息 足够快速的进行处理允许使劲按范围内的做出快速响应（响应时间内要求在秒级、毫秒级甚至更小）、是有较少认为干预的监督和控制系统（仅当系统识别到了违反系统规定的限制或本身发生故障时才需要人为干预） l同时兼有多道批处理、分时、实时处理的功能，或其中两种以上的功能在核心层以外可以支持庞大的软件系统*得到应用和推广并不断完善 计算机网络物理上分散的、具有自治功能的多个计算机系统互连起来，实现信息交换、资源共享、可互操作和协作处理的系统 是若干计算机的集合*有自己的局部存储器和外部设备*既可以独立工作（自治性），亦可合作工作*既可以独立工作（自治性），亦可合作工作 指运行在嵌入式环境中，对整个系统及操作的各种部件、装置等资源进行统一协调、处理、指挥和控制的系统软件 l引入虚拟增强和虚拟现实的技术打造更加友好的操作用户界面是一个重要的发展方向微型化发展：穿戴、植入 20世纪60年代：通道的引入、中断技术的出现改善了CPU和外设使用情况、提高计算机系统处理能力 单道批处理系统主要特征：自动性多道程序设计：提高CPU和I/O设备利用率，增加系统吞吐量。多道程序运行特点：多道、宏观并行微观串行（单处理器前提） 单道分时os:主存只驻留一道程序（作业）、多个作业轮流运行过程[每个作业可能多次地调入/调出，系统性能较差]具有前后台分时os：”前台区“放置按时间片“调入”“调出”的作业流、“后台区”存放批处理作业多道分时os: l网络操作系统的网络功能模块：网络通信、资源管理网络服务网络管理、交互操作能力 *具有并行处理和分布控制的功能 系统特点：微型化、可定制、实时性、可靠性、易移植性、开发环境 l缺点：磁带需要人工拆卸系统保护问题（非法停机指令、程序进入死循环） 有效十分复杂需要解决一些问题（同步与互斥机制、主存不够用、主存保护） 分时系统特征：同时性、独立性、及时性、交互性 设计系统时要求响应及时快速处理。要求系统有高可靠性，不强求系统资源的利用率 n分布式系统是一个一体化的系统，在整个系统中有一个全局的操作系统称为分布式操作系统l分布式操作系统负责全系统的资源分配和调度、任务划分、信息传输、控制协调等工作，并为用户提供一个统一的界面、标准的接口区别于计算机网络具有多机合作和健壮性","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"期末复习","slug":"期末复习","permalink":"http://example.com/tags/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"}]},{"title":"leetcode-train-day-16","slug":"leetcode-train-day-16","date":"2021-01-16T10:17:46.000Z","updated":"2021-01-16T10:17:46.260Z","comments":true,"path":"2021/01/16/leetcode-train-day-16/","link":"","permalink":"http://example.com/2021/01/16/leetcode-train-day-16/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"leetcode-train-day-15","slug":"leetcode-train-day-15","date":"2021-01-15T09:39:46.000Z","updated":"2021-01-15T10:02:03.393Z","comments":true,"path":"2021/01/15/leetcode-train-day-15/","link":"","permalink":"http://example.com/2021/01/15/leetcode-train-day-15/","excerpt":"","text":"今天的又是一道并查集的题目好像总是并查集 n 块石头放置在二维平面中的一些整数坐标点上。每个坐标点上最多只能有一块石头。 如果一块石头的 同行或者同列 上有其他石头存在，那么就可以移除这块石头。 给你一个长度为 n 的数组 stones ，其中 stones[i] = [xi, yi] 表示第 i 块石头的位置，返回 可以移除的石子 的最大数量。 示例 1： 输入：stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]输出：5解释：一种移除 5 块石头的方法如下所示： 移除石头 [2,2] ，因为它和 [2,1] 同行。 移除石头 [2,1] ，因为它和 [0,1] 同列。 移除石头 [1,2] ，因为它和 [1,0] 同行。 移除石头 [1,0] ，因为它和 [0,0] 同列。 移除石头 [0,1] ，因为它和 [0,0] 同行。石头 [0,0] 不能移除，因为它没有与另一块石头同行/列。示例 2： 输入：stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]输出：3解释：一种移除 3 块石头的方法如下所示： 移除石头 [2,2] ，因为它和 [2,0] 同行。 移除石头 [2,0] ，因为它和 [0,0] 同列。 移除石头 [0,2] ，因为它和 [0,0] 同行。石头 [0,0] 和 [1,1] 不能移除，因为它们没有与另一块石头同行/列。示例 3： 输入：stones = [[0,0]]输出：0解释：[0,0] 是平面上唯一一块石头，所以不可以移除它。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/most-stones-removed-with-same-row-or-column著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 python解法 class UnionFind: def __init__(self): self.parent = &#123;&#125; def add(self,x): if x not in self.parent: self.parent[x] = None def find(self,x): root = x while self.parent[root]: root = self.parent[root] while x!=root: self.parent[x],x= root,self.parent[x] return root def union(self,x,y): root_x, root_y = self.find(x),self.find(y) if root_x!=root_y: self.parent[root_x]=root_y def get_union(self): return sum([1 for k,v in self.parent.items() if v is None]) class Solution: def removeStones(self, stones: List[List[int]]) -&gt; int: uf = UnionFind() for x,y in stones: uf.add(x) uf.add(y+10000) uf.union(x,y+10000) return len(stones)-uf.get_union() 就这样，以后可能不每天写了吧，不过leetcode 每天还是打卡的，哈哈哈","categories":[{"name":"每日一题","slug":"每日一题","permalink":"http://example.com/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}],"tags":[{"name":"leetcode每日一题","slug":"leetcode每日一题","permalink":"http://example.com/tags/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]},{"title":"leetcode-train-day-14","slug":"leetcode-train-day-14","date":"2021-01-14T12:23:43.000Z","updated":"2021-01-14T12:41:49.501Z","comments":true,"path":"2021/01/14/leetcode-train-day-14/","link":"","permalink":"http://example.com/2021/01/14/leetcode-train-day-14/","excerpt":"","text":"今天考了数据结构，然后回来后一直在玩，差点忘记了这件事，还好记起来了 给定由若干 0 和 1 组成的数组 A。我们定义 N_i：从 A[0] 到 A[i] 的第 i 个子数组被解释为一个二进制数（从最高有效位到最低有效位）。 返回布尔值列表 answer，只有当 N_i 可以被 5 整除时，答案 answer[i] 为 true，否则为 false。 示例 1： 输入：[0,1,1]输出：[true,false,false]解释：输入数字为 0, 01, 011；也就是十进制中的 0, 1, 3 。只有第一个数可以被 5 整除，因此 answer[0] 为真。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/binary-prefix-divisible-by-5著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 今天的题比较简单，哈哈哈哈 ps：终于不是并查集了！！！ python 解法 class Solution: def prefixesDivBy5(self, A: List[int]) -&gt; List[bool]: sum_=0 for i,num in enumerate(A): sum_=(sum_*2+num)%5 A[i]=(sum_%5==0) return A","categories":[{"name":"每日一题","slug":"每日一题","permalink":"http://example.com/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}],"tags":[{"name":"leetcode每日一题","slug":"leetcode每日一题","permalink":"http://example.com/tags/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]},{"title":"leetcode-train-day-13","slug":"leetcode-train-day-13","date":"2021-01-13T11:39:45.000Z","updated":"2021-01-13T12:24:33.399Z","comments":true,"path":"2021/01/13/leetcode-train-day-13/","link":"","permalink":"http://example.com/2021/01/13/leetcode-train-day-13/","excerpt":"","text":"一连好几天都是并查集，诶呀 冗余连接在本问题中, 树指的是一个连通且无环的无向图。 输入一个图，该图由一个有着N个节点 (节点值不重复1, 2, …, N) 的树及一条附加的边构成。附加的边的两个顶点包含在1到N中间，这条附加的边不属于树中已存在的边。 结果图是一个以边组成的二维数组。每一个边的元素是一对[u, v] ，满足 u &lt; v，表示连接顶点u 和v的无向图的边。 返回一条可以删去的边，使得结果图是一个有着N个节点的树。如果有多个答案，则返回二维数组中最后出现的边。答案边 [u, v] 应满足相同的格式 u &lt; v。 示例 1： 输入: [[1,2], [1,3], [2,3]]输出: [2,3]解释: 给定的无向图为: 1 / 2 - 3示例 2： 输入: [[1,2], [2,3], [3,4], [1,4], [1,5]]输出: [1,4]解释: 给定的无向图为:5 - 1 - 2 | | 4 - 3注意: 输入的二维数组大小在 3 到 1000。二维数组中的整数在1到N之间，其中N是输入数组的大小。 class Solution: def findRedundantConnection(self, edges: List[List[int]]) -&gt; List[int]: def find(x): if x != uf[x]: uf[x] = find(uf[x]) return uf[x] uf = [i for i in range(len(edges)+1)] res = [0, 0] for x, y in edges: # 如果这两个点还不连通，就将它两连通 if find(x) != find(y): uf[find(x)] = find(y) # 如果这两个点已经连通了，说明新加入这条边是冗余的。 else: res = [x, y] return res 今天认真恶补了并查集，这下好多了 没时间了，不写c的写法了。唉。数据结构明天就考了，复习复习","categories":[{"name":"每日一题","slug":"每日一题","permalink":"http://example.com/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}],"tags":[{"name":"leetcode每日一题","slug":"leetcode每日一题","permalink":"http://example.com/tags/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]},{"title":"leetcode-train-day-12","slug":"leetcode-train-day-12","date":"2021-01-12T07:25:42.000Z","updated":"2021-01-12T08:35:22.775Z","comments":true,"path":"2021/01/12/leetcode-train-day-12/","link":"","permalink":"http://example.com/2021/01/12/leetcode-train-day-12/","excerpt":"","text":"开始 公司共有 n 个项目和 m 个小组，每个项目要不无人接手，要不就由 m 个小组之一负责。 group[i] 表示第 i 个项目所属的小组，如果这个项目目前无人接手，那么 group[i] 就等于 -1。（项目和小组都是从零开始编号的）小组可能存在没有接手任何项目的情况。 请你帮忙按要求安排这些项目的进度，并返回排序后的项目列表： 同一小组的项目，排序后在列表中彼此相邻。项目之间存在一定的依赖关系，我们用一个列表 beforeItems 来表示，其中 beforeItems[i] 表示在进行第 i 个项目前（位于第 i 个项目左侧）应该完成的所有项目。如果存在多个解决方案，只需要返回其中任意一个即可。如果没有合适的解决方案，就请返回一个 空列表 。 示例 1： 输入：n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]输出：[6,3,4,1,5,2,0,7]示例 2： 输入：n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]输出：[]解释：与示例 1 大致相同，但是在排序后的列表中，4 必须放在 6 的前面。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/sort-items-by-groups-respecting-dependencies著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 这道题的难度是困难，我不会写。。。。 这个学期正好学了数据结构，然后看到这个我就想到了关键路径，拓扑排序；但是我还是不怎么会写(っ °Д °;)っ 求助评论区 class Solution: def TopSort(self,items,indegree,neighbors): #建立队列和访问顺序，并初始化队列 queue = collections.deque() res = [] for i in items: if not indegree[i]: queue.append(i) if not queue: return [] #广度遍历 while queue: cur = queue.popleft() res.append(cur) for neighbor in neighbors[cur]: indegree[neighbor] -= 1 if not indegree[neighbor]: queue.append(neighbor) return res def sortItems(self, n: int, m: int, group: List[int], beforeItems: List[List[int]]) -&gt; List[int]: max_id = m for task in range(n): if group[task] == -1: group[task] = max_id max_id += 1 task_indegree = [0] * n group_indegree = [0]*max_id task_neighbors = [[] for _ in range(n)] group_neighbors = [[] for _ in range(max_id)] group_to_tasks =[[] for _ in range(max_id)] for task in range(n): group_to_tasks[group[task]].append(task) for prerequisite in beforeItems[task]: #判断相关联的两个项目是否属于同一组 if group[prerequisite] != group[task]: #不同组，建立图 group_indegree[group[task]] += 1 group_neighbors[group[prerequisite]].append(group[task]) else: #同组，组内建立图 task_indegree[task] += 1 task_neighbors[prerequisite].append(task) res = [] group_queue = self.TopSort([i for i in range(max_id)],group_indegree,group_neighbors) if len(group_queue) != max_id: return [] for group_id in group_queue: # 得到每组项目的访问顺序 task_queue = self.TopSort(group_to_tasks[group_id],task_indegree,task_neighbors) if len(task_queue) != len(group_to_tasks[group_id]): return [] res += task_queue return res python的写法，里面这里涉及到一个python队列的问题 附上解释的链接https://www.cnblogs.com/lincappu/p/12890765.html c语言的写法就更不会了，唉。按着书上的改，还不会改，妥妥的菜鸡。。。。","categories":[{"name":"每日一题","slug":"每日一题","permalink":"http://example.com/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}],"tags":[{"name":"leetcode每日一题","slug":"leetcode每日一题","permalink":"http://example.com/tags/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]},{"title":"leetcode-train-day-11","slug":"leetcode-train-day-11","date":"2021-01-11T12:18:36.000Z","updated":"2021-01-11T13:16:02.922Z","comments":true,"path":"2021/01/11/leetcode-train-day-11/","link":"","permalink":"http://example.com/2021/01/11/leetcode-train-day-11/","excerpt":"","text":"今天差点忘了 给你一个字符串 s，以及该字符串中的一些「索引对」数组 pairs，其中 pairs[i] = [a, b] 表示字符串中的两个索引（编号从 0 开始）。 你可以 任意多次交换 在 pairs 中任意一对索引处的字符。 返回在经过若干次交换后，s 可以变成的按字典序最小的字符串。 示例 1: 输入：s = “dcab”, pairs = [[0,3],[1,2]]输出：”bacd”解释：交换 s[0] 和 s[3], s = “bcad”交换 s[1] 和 s[2], s = “bacd”示例 2： 输入：s = “dcab”, pairs = [[0,3],[1,2],[0,2]]输出：”abcd”解释：交换 s[0] 和 s[3], s = “bcad”交换 s[0] 和 s[2], s = “acbd”交换 s[1] 和 s[2], s = “abcd”示例 3： 输入：s = “cba”, pairs = [[0,1],[1,2]]输出：”abc”解释：交换 s[0] 和 s[1], s = “bca”交换 s[1] 和 s[2], s = “bac”交换 s[0] 和 s[1], s = “abc” 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/smallest-string-with-swaps著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 今天的难度中等，又是一道运用并查集的题目，是这个月第三道吧，但是我感觉我还是不怎么会写并查集的题目 python 写法 1234567891011121314151617181920212223242526272829class Solution: def smallestStringWithSwaps(self, s: str, pairs: List[List[int]]) -&gt; str: length=len(s) parent=&#123;i:i for i in range(length)&#125; # 并查集 def find(x): if x!=parent[x]: parent[x]=find(parent[x]) return parent[x] # 查找根节点 for a,b in pairs: c,d = find(a),find(b) if c!=d: parent[d] = c # 获取根节点对应的连通块集合 dic=collections.defaultdict(list) for i in range(length): root=find(i) dic[root].append(i) # 对每个连通块中元素排序 res=list(s) for k,v in dic.items(): arr=[s[i] for i in v] arr.sort() for i in range(len(v)): res[v[i]]=arr[i] return &#x27;&#x27;.join(res)","categories":[{"name":"每日一题","slug":"每日一题","permalink":"http://example.com/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}],"tags":[{"name":"leetcode每日一题","slug":"leetcode每日一题","permalink":"http://example.com/tags/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]},{"title":"leetcode-train-day-10","slug":"leetcode-train-day-10","date":"2021-01-10T03:40:08.000Z","updated":"2021-01-10T04:29:04.943Z","comments":true,"path":"2021/01/10/leetcode-train-day-10/","link":"","permalink":"http://example.com/2021/01/10/leetcode-train-day-10/","excerpt":"","text":"直接开始 题目： 给定一个无重复元素的有序整数数组 nums 。 返回 恰好覆盖数组中所有数字 的 最小有序 区间范围列表。也就是说，nums 的每个元素都恰好被某个区间范围所覆盖，并且不存在属于某个范围但不属于 nums 的数字 x 。 列表中的每个区间范围 [a,b] 应该按如下格式输出： “a-&gt;b” ，如果 a != b“a” ，如果 a == b 示例 1： 输入：nums = [0,1,2,4,5,7]输出：[“0-&gt;2”,”4-&gt;5”,”7”]解释：区间范围是：[0,2] –&gt; “0-&gt;2”[4,5] –&gt; “4-&gt;5”[7,7] –&gt; “7”示例 2： 输入：nums = [0,2,3,4,6,8,9]输出：[“0”,”2-&gt;4”,”6”,”8-&gt;9”]解释：区间范围是：[0,0] –&gt; “0”[2,4] –&gt; “2-&gt;4”[6,6] –&gt; “6”[8,9] –&gt; “8-&gt;9”示例 3： 输入：nums = []输出：[]示例 4： 输入：nums = [-1]输出：[“-1”]示例 5： 输入：nums = [0]输出：[“0”] 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/summary-ranges著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 今天的题比较简单 我的思路是：先按防御式编程，在最后加一个，数字（一开始是这么想的，后面我发现，出现了一个错误，就是加的数字在nums[i]的范围内，虽然（-1）这么能过，于是干脆就直接加一个None,这下可以了，不知道有没有错） 然后循环，如果nums[i+1] != nums[i]+1 就直接加入答案列表，如果相同的，记录此时位置，继续往后走，直到不相等。然后将这段区间加入答案列表 过程要注意的问题就是，注意越界，每次循环，判断的时候都要判断是否越界了。 python 123456789101112131415161718class Solution: def summaryRanges(self, nums: List[int]) -&gt; List[str]: nums = nums + [None] ans = [] i= 0 while(i&lt;len(nums)-1): if(i&lt;len(nums)-1 and nums[i+1] != nums[i]+1): ans.append(str(nums[i])) else: j = i while(i&lt;len(nums)-1 and nums[i+1] == nums[i]+1): i += 1 else: temp = str(nums[j]) + &quot;-&gt;&quot; + str(nums[i]) ans.append(temp) i += 1 return ans 不过我的解法，效率低下，时间复杂度和空间复杂度高，一开始用-1的还快些，用None的就慢了不少 c语言解法 12345678910111213141516171819202122232425262728/** Note: The returned array must be malloced, assume caller calls free().**/char ** summaryRanges(int* nums, int numsSize, int* returnSize)&#123; char **res = (char **)malloc(sizeof(char *)*numsSize); for(int i=0;i&lt;numsSize;i++)&#123; res[i] = (char *)malloc(sizeof(char)*30); memset(res[i],0,sizeof(char)*30); //C 库函数 void *memset(void *str, int c, size_t n) 复制字符 c（一个无符号字符）到参数 str 所指向的字符串的前 n 个字符。 &#125; int left = 0; int index = 0; for(int i=0;i&lt;numsSize;i++)&#123; left = i; while(i &lt; numsSize-1 &amp;&amp; (nums[i]+1) == nums[i+1])&#123; i++; &#125; //可能会出现多位数 if(left == i)&#123; sprintf(res[index++], &quot;%d&quot;,nums[i]); &#125; else&#123; sprintf(res[index++],&quot;%d-&gt;%d&quot;,nums[left],nums[i]); &#125; &#125; *returnSize = index; return res;&#125; 好了","categories":[{"name":"每日一题","slug":"每日一题","permalink":"http://example.com/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}],"tags":[{"name":"leetcode每日一题","slug":"leetcode每日一题","permalink":"http://example.com/tags/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]},{"title":"leetcode-train-day-9","slug":"leetcode-train-day-9","date":"2021-01-09T05:14:11.000Z","updated":"2021-01-09T05:34:54.600Z","comments":true,"path":"2021/01/09/leetcode-train-day-9/","link":"","permalink":"http://example.com/2021/01/09/leetcode-train-day-9/","excerpt":"","text":"直接开始 以下是题目 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。 示例 1: 输入：prices = [3,3,5,0,0,3,1,4]输出：6解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。 随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。示例 2： 输入：prices = [1,2,3,4,5]输出：4解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。示例 3： 输入：prices = [7,6,4,3,1]输出：0解释：在这个情况下, 没有交易完成, 所以最大利润为 0。示例 4： 输入：prices = [1]输出：0 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 这道题，官方给的难度是困难，但是我觉得比昨天的简单，可能是我对动态规划的题目更会吧 解题思路就是动态规划 每一天结束后总共有五种状态 没有买卖，利润为0买入了卖出了（即，完成了一次交易）完成了一次交易后又买入了完成了两次交易 python解法 12345678910111213class Solution:def maxProfit(self, prices: List[int]) -&gt; int: length = len(prices) if(length&lt;2): return 0 buy_1 = buy_2 = -prices[0] sell_1 = sell_2 = 0 for i in range(1,length): buy_1 = max(buy_1,-prices[i]) sell_1 = max(sell_1,buy_1+prices[i]) buy_2 = max(buy_2,sell_1-prices[i]) sell_2 = max(sell_2,buy_2+prices[i]) return sell_2 c 语言解法 1234567891011121314151617int max(int a,int b)&#123; return a&gt;b? a:b;&#125;int maxProfit(int* prices, int pricesSize)&#123; int buy_1,buy_2,sell_1,sell_2,i; buy_1 = buy_2 = -prices[0]; sell_1 = sell_2 = 0; if(pricesSize&lt;2) return 0; for(i=1;i&lt;pricesSize;i++)&#123; buy_1 = max(buy_1,-prices[i]); sell_1 = max(sell_1,buy_1+prices[i]); buy_2 = max(buy_2,sell_1-prices[i]); sell_2 = max(sell_2,buy_2+prices[i]); &#125; return sell_2;&#125; 就这样(●ˇ∀ˇ●)","categories":[{"name":"每日一题","slug":"每日一题","permalink":"http://example.com/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}],"tags":[{"name":"leetcode每日一题","slug":"leetcode每日一题","permalink":"http://example.com/tags/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]},{"title":"马克思主义原理概论知识点总结","slug":"马克思主义原理概论知识点总结","date":"2021-01-08T13:07:31.000Z","updated":"2021-01-12T08:43:19.166Z","comments":true,"path":"2021/01/08/马克思主义原理概论知识点总结/","link":"","permalink":"http://example.com/2021/01/08/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%8E%9F%E7%90%86%E6%A6%82%E8%AE%BA%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/","excerpt":"","text":"◆ 绪论一：马克思主义来源与创新 来源：德国古典哲学，英国古典政治经济学，英法空想社会主义 创新：马克思恩格斯批判地继承了前人的成果，创立了唯物史观和剩余价值学说，实现了人类思想史上的伟大革命。他们在这一时期创立的马克思主义，对人类先进思想已经提出的种种问题作了分析批判，对资本主义时代发展提出的理论课题作了科学的论述。马克思主义哲学为认识历史和时代问题提供了一种崭新的世界观和方法论原则。马克思主义政治经济学通过对资本主义生产方式的内在矛盾、运行机制和发展规律的深刻分析，揭示了资本主义剥削的秘密和它被社会主义必然代替的历史命运。科学社会主义在唯物史观和剩余价值论两大发现的基础上，阐明了由资本主义社会转变为社会主义、共产主义社会的客观规律，阐明了无产阶级获得彻底解放的历史条件和无产阶级的历史使命，使社会主义由空想成为科学。 二：马克思主义最根本的世界观和方法论是什么（马克思主义最根本的理论特征） 辩证唯物主义与历史唯物主义是马克思主义最根本的世界观和方法论 三：马克思主义最鲜明的政治立场是什么 马克思政党的一切理论和奋斗都应致力于实现以劳动人民为主体的最广大人民的根本利益，这是马克思主义最鲜明的政治立场 四：马克思主义最重要的理论品质 坚持一切从实际出发，理论联系实际，实事求是，在实践中检验真理和发展真理，是马克思主义最重要的理论品质 五：马克思主义最崇高的社会理想 实现物质财富极大丰富、人民精神境界极大提高、每个人自由而全面发展的共产主义社会，是马克思主义最崇高的社会理想 六：对待马克思主义的态度 必须坚持马克思主义不动摇，这是就马克思主义的基本原理、基本观点和基本方法而言的。随着时代的发展和历史条件的变化，要求我们在坚持马克思主义基本原理的基础上，不断地在实践中丰富和发展马克思主义。我们一定要适应实践的发展，以实践来检验一切，用发展着的马克思主义指导新的实践。我们必须坚持解放思想、实事求是、与时俱进，从理论和实践的结合上不断研究新情况、解决新问题，做到自觉地把思想认识从那些不合时宜的观念、做法和体制的束缚中解放出来，从对马克思主义的错误的和教条式的理解中解放出来，从主观主义和形而上学的桎梏中解放出来，不断有所发现、有所创造、有所前进。 ◆ 第一章一：近代哲学的基本问题 全部哲学，特别是近代哲学的重大的基本问题，是思维和存在的关系问题 二：马克思主义物质的定义 物质是标志客观实在的哲学范畴，这种客观实在是人通过感觉感知的，它不依赖于我们的感觉而存在，为我们的感觉所复写、摄影、反映——列宁 三：马克思主义物质观理论意义 第一：坚持了物质的客观实在性原则，坚持了唯物主义一元论，同唯心主义一元论和二元论划清了界限。第二：坚持了能动的反映论和可知论，有力的批判了不可知论。第三：体现了唯物论和辩证法的统一。第四：体现了唯物主义自然观与唯物主义历史论的统一，为彻底的唯物主义奠定了理论基础。 四：联系特征 首先，联系具有客观性。其次，联系具有普遍性。最后，联系具有多样性。 五：发展的知识点 实质：是新事物的产生和旧事物的灭亡。 新旧事物：新事物是指合乎历史前进方向、具有远大前途的东西； 旧事物是指丧失历史必然性，日趋灭亡的东西 为什么新事物是不可战胜的？ ①新事物符合事物发展的必然趋势，具有强大的生命力和远大的发展前途，而旧事物丧失了存在的必然性，失去了生命力和发展前途，因而必然被新事物所代替。② 新事物优越于旧事物。新事物否定了旧事物中腐朽过时的东西，吸收并发展了旧事物中积极的因素，添加了旧事物中不能容纳的新的内容。③ 在社会领域中，新事物符合广大人民群众的根本利益和要求，因而得到广大人民群众的拥护和支持，它必然战胜旧事物。 六：矛盾的同一性，斗争性 矛盾的同一性：是指矛盾者双方相互依存、相互贯通的性质和趋势。 矛盾的斗争性：是矛盾者的对立面之间相互排斥、相互分离的性质和趋势。 七：矛盾的普遍性，特殊性 矛盾的普遍性：矛盾存在于一切事物中，存在于一切事物发展过程的始终，旧的矛盾解决了，新的矛盾又产生，事物始终在矛盾中运动。 矛盾的特殊性：一是不同事物的矛盾各有其特点；二是同一事物的矛盾在不同发展过程和发展阶段各有不同特点；三是构成事物的诸多矛盾以及每一矛盾的不同方向各有不同的性质。 八：量变，质变 量变：事物数量的增减和次序的变动，是保持事物的质的相对稳定性的不显著变化，体现了事物渐进过程的连续性。 质变：事物性质的根本变化，是事物由一种质态向另一种质态的飞跃，体现了事物渐进过程和连续性的中断。 量变和质变的辩证关系：1）量变是质变的必要准备 2）质变是量变的必然结果 3）量变和质变是相互渗透的 九：肯定，否定 肯定：维持现成事物存在的因素 否定：促成现成事物灭亡的因素 十：意识的作用 第一，意识是能动的，具有目的性和计划性。第二，意识活动具有创造性。第三，意识具有指导实践改造客观世界的作用。第四，意识还具有指导、控制人的行为和生理活动的作用。 十一：主观能动性与客观规律的辩证统一 首先，必须尊重客观规律。其次，在尊重客观规律的基础上，要充分发挥主观能动性。 ◆ 第二章一：实践在认识中的决定作用 第一，实践产生了认识的需要。第二，实践为认识提供了可能。第三，实践使认识得以产生和发展。第四，实践是检验认识的真理性的唯一标准。 二：马克思主义认识的本质是什么 认识是主体在实践基础上对客体的能动反映，这是辩证唯物主义认识论对认识本质的科学回答。 三：运动的基本规律 运动是一个辩证发展过程：从实践到认识；从认识到实践；实践、认识、再实践、再认识，认识运动不断反复和无限发展。 四：感性认识理性认识辩证关系 首先，理性认识依赖于感性认识，理性认识必须以感性认识为基础。坚持理性认识对感性认识的依赖关系，就是坚持了认识论的唯物论。其次，感性认识有待于发展和深化为理论认识。只有使感性认识上升到到理性认识，才能把握事物的本质，满足实践的需要。坚持了这一点，就是坚持了认识论的辩证法。最后，感性认识和理性认识相互渗透，相互包含，二者的区分是相对的，人们不应当也不可能把它们截然分开。 五：认识发展的总过程 从实践到认识，再从认识到实践如此实践、认识、再实践、再认识，循环往复以至无穷，一步步地深化和提高，这就是认识发展的总过程。 六：真理的客观性、绝对性和相对性 客观性：真理具有客观性，凡真理都是客观真理。首先，真理的内容是客观的。其次，检验真理的标准也是客观的 绝对性：即具有绝对性的真理，是指真理的无条件性，无限性。 相对性：即具有相对性的真理，是指真理的有条件性，有限性。 七：实践作为检验认识真理性的标准的确定性和不确定性 实践作为检验认识真理性的标准的确定性即绝对性，是指实践作为检验认识真理性的标准的唯一性，即离开了实践，再也没有另外的标准。 实践作为检验认识真理性的标准的不确定性即相对性，是指实践对认识真理性的检验的条件性。即任何实践都受到一定具体条件的制约，因而都具有一定的局限。 ◆ 第三章一：社会存在与社会意识及其辨证关系 社会存在:也称社会物质生活条件，是社会生活的物质方面，主要是指物质生活资料的生产及生产方式，也包括地理环境和人口因素。 社会意识：社会生活的精神方面，是社会存在的反映。 辨证关系：社会存在和社会意识是辨证统一的。①社会存在决定社会意识，社会存在的性质决定社会意识的性质，社会存在的变化决定社会意识的变化。②社会意识是社会存在的反映，并反作用于社会存在，错误的社会意识会阻碍社会存在的发展，正确的社会意识会促进社会存在的发展。 二：生产力与生产关系矛盾运动的规律（生产关系一定要适应生产力状况规律） ①生产力决定生产关系，生产力的状况决定生产关系的性质，生产力的发展决定生产关系的变革。②第二，生产关系对生产力具有能动的反作用。即当生产关系适合生产力发展时，它对生产力发展起推动作用；当生产关系不适合生产力发展时，它会阻碍生产力的发展。 三：经济基础与上层建筑的矛盾运动规律 经济基础与上层建筑是辨证统一的：①经济基础决定上层建筑。②上层建筑对经济基础具有反作用。当上层建筑适合经济基础状况时，它会促进经济基础的巩固和完善;当上层建筑不适合经济基础状况时，它会阻碍经济基础的发展和变革。 四：人民群众在创造历史过程中的决定性作用 ⑴人民群众从质上说是指一切对社会历史发展起推动作用的人们，从量上说是指社会人口的绝大多数。人民群众的最稳定的主体部分始终是从事物质资料生产的劳动群众及其知识分子。 ⑵在社会历史发展过程中，人民群众起着决定性的作用。 ①人民群众是历史的主体，是历史的创造者。②人民群众的社会物质财富的创造者。③人民群众是社会精神财富的创造者。④人民群众是社会变革的决定力量 ◆ 第四章一：资本的原始积累 ⑴所谓资本原始积累，就是生产者与生产资料相分离，货币资本迅速集中于少数人手中的历史过程。 ⑵资本原始积累主要是通过两个途径进行的：一是用暴力手段剥夺农民的土地；二是用暴力手段掠夺货币财富。 二：商品的二因素和生产商品的劳动二重性 ⑴商品是用来交换的能满足人们某种需要的劳动产品，具有使用价值和价值两个因素，是使用价值和价值的矛盾统一体。 ⑵ 商品是劳动产品，生产商品的劳动可区分为具体劳动和抽象劳动。 三：价值量与价值规律 ⑴ 价值量是由生产商品所耗费的劳动量决定的，而劳动量则按照劳动时间来计量。决定商品价值量的，不是生产商品的个别劳动时间，而只能是社会必要劳动时间。“社会必要劳动时间是在现有的社会正常的生产条件下，在社会平均的劳动熟练程度和劳动强度下制造某种使用价值所需要的劳动时间。” ⑵ 商品的价值量由生产商品的社会必要劳动时间决定，商品交换以价值量为基础，按照等价交换的原则进行，形成价值规律。 ⑶ 价值规律的表现形式是，商品的价格围绕商品的价值自发波动。 ⑷ 价值规律的作用表现在：第一，自发地调节生产资料和劳动力在社会各生产部门之间的分配比例。第二，自发地刺激社会生产力的发展。第三，自发地调节社会收入的分配。 四：私有制基础上商品经济的基本矛盾 ⑴ 在私有制为基础的商品经济中，商品生产者的劳动具有两重性：既是具有社会性质的社会劳动，又是具有私人性质的私人劳动。 ⑵ 私人劳动和社会劳动的矛盾构成私有制商品经济的基本矛盾。 五：劳动力成为商品的基本条件 劳动力成为商品，要具备两个基本条件：第一，劳动者是自由人，能够把自己的劳动力当作自己的商品来支配；第二，劳动者没有别的商品可以出卖，自由得一无所有，没有任何实现自己的劳动力所必需的物质条件。 六：劳动力商品的特点 劳动力商品在使用价值上有一个很大的特点，就是它的使用价值是价值的源泉，它在消费过程中能够创造新的价值，而且这个新的价值比劳动力本身的价值更大。 七：剩余价值的生产过程和资本的不同部分在剩余价值生产中的作用 ⑴ 雇佣工人的劳动分为两部分：一部分是必要劳动，用于再生产劳动力的价值；另一部分是剩余劳动，用于无偿地为资本家生产剩余价值。因此，剩余价值是雇佣工人所创造的并被资本家无偿占有的超过劳动力价值的那部分价值，它是雇佣工人剩余劳动的凝结，体现了资本家与雇佣工人之间剥削与被剥削的关系。 ⑵ 不变资本是以生产资料形态存在的资本。可变资本是用来购买劳动力的那部分资本。 八：生产剩余价值的两种基本方法 资本家提高对工人的剥削程度的方法是多种多样的，最基本的方法有两种，即绝对剩余价值的生产和相对剩余价值的生产。绝对剩余价值是指在必要劳动时间不变的条件下，由于延长劳动日的长度而生产的剩余价值。相对剩余价值是指在工作日长度不变的条件下，通过缩短必要劳动时间而相对延长剩余劳动时间生产的剩余价值。 九：资本积累 ⑴ 把剩余价值转化为资本，或者说，剩余价值的资本化，就是资本积累。 ⑵ 由资本的技术构成决定并反映技术构成变化的资本价值构成，叫做资本的有机构成。通常用c∶v来表示。 ⑶ 所谓相对过剩人口，就是劳动力供给超过了资本对它的需要。 十：资本的循环周转与再生产 ⑴ 资本循环是资本从一种形式出发，经过一系列形式的变化，又回到原来出发点的运动。 ⑵ 产业资本在循环过程中要经历三个不同的阶段：第一个阶段是购买阶段，即生产资料与劳动力的购买阶段。在这一阶段，产业资本执行的是货币资本的职能。第二个阶段是生产阶段，即生产资料与劳动力按比例结合在一起从事资本主义生产的阶段。执行的是生产资本的职能。第三个阶段是售卖阶段，即商品资本向货币资本的转化阶段。在此阶段产业资本所执行的是商品资本的职能。 ⑶ 社会再生产的核心问题是社会总产品的实现问题，即社会总产品的价值补偿和实物补偿问题。 ⑷ 在现实的资本主义经济生活中，资本家并不是把剩余价值看作可变资本的产物，而是把它看作全部垫付资本的产物或增加额，剩余价值便取得了利润的形态。 十一：资本主义基本矛盾 生产资料资本主义私人占有和生产社会化之间的矛盾，是资本主义的基本矛盾。 十二：经济危机 实质：经济危机的实质或本质是旧的生产力产能过剩与供给过剩，有效需求饱和与不足 根源：资本主义经济危机爆发的根本原因是资本主义的基本矛盾 周期性：资本主义经济危机具有周期性，这是由资本主义基本矛盾运动的阶段性决定的。当资本主义基本矛盾达到尖锐化程度时，社会生产结构严重失调，引发了经济危机。 十三：资本主义政治制度及其本质 本质：作为资产阶级政治统治工具的阶级本质 ◆ 第五章一：垄断 ⑴ 所谓垄断，是指少数资本主义大企业，为了获得高额利润，通过相互协议或联合，对一个或几个部门商品的生产、销售和价格，进行操纵和控制。 ⑵ 垄断的产生有以下原因：第一，当生产集中发展到相当高的程度，极少数企业就会联合起来，操纵和控制本部门的生产和销售，实行垄断，以获得高额利润。第二，企业规模巨大，形成对竞争的限制，也会产生垄断。第三，激烈的竞争给竞争各方带来的损失越来越严重，为了避免两败俱伤，企业之间会达成妥协，联合起来，实行垄断。 ⑶垄断条件下竞争的特点 第一，垄断没有消除产生竞争的经济条件。第二，垄断必须通过竞争来维持。第三，社会生产是复杂多样的，任何垄断组织都不可能把包罗万象的社会生产都包下来。 二：金融资本与金融寡头 金融资本是由工业垄断资本和银行垄断资本融合在一起而形成的一种垄断资本。 金融寡头是指操纵国民经济命脉，并在实际上控制国家政权的少数垄断资本家或垄断资本家集团。 三：国家垄断资本主义的形成及作用 ⑴ 国家垄断资本主义是垄断资本主义的新发展，它对资本主义经济的发展产生了积极的作用。首先，国家垄断资本主义的出现在一定程度上有利于社会生产力的发展。再次，通过国家的收入再分配手段，使劳动人民生活水平有所改善和提高。最后，在国家垄断资本主义的参与和干预下，各主要资本主义国家的农业、工业、商业、通讯及交通运输业的现代化水平迅速提高，社会生产和社会生活的面貌改观，加快了这些国家国民经济的现代化进程。 ⑵ 国家垄断资本主义在本质上是资产阶级国家力量同垄断组织力量结合在一起的垄断资本主义。 四：垄断资本主义的实质 帝国主义的实质，即垄断资本凭借垄断地位，获取高额垄断利润。 五：经济全球化 ⑴ 表现：一是生产的全球化。二是贸易的全球化。三是金融的全球化。四是企业经营的全球化。 ⑵ 后果：经济全球化是一个充满矛盾的进程，它在产生积极效应的同时，也会产生消极的后果。主要表现是：其一，发达国家与发展中国家之间的差距扩大。其二，在经济增长中忽视社会进步，环境恶化与经济全球化有可能同时发生。其三，各国特别是相对落后国家原有的体制、政府领导能力、社会设施、政策体系、价值观念和文化都面临着全球化的冲击，国家内部和国际社会都出现不同程度的治理危机。其四，经济全球化使各国的产业结构调整变成一种全球行为，它既为一国经济竞争力的提高提供了条件，同时也存在着对别国形成依赖的危险。 六：当代资本主义新变化的实质 首先，当代资本主义发生的变化从根本上说是人类社会发展一般规律和资本主义经济规律作用的结果。其次，当代资本主义发生的变化是在资本主义制度基本框架内的变化，并不意味着资本主义生产关系的根本性质发生了变化。 七：资本主义的历史地位———过渡的资本主义 八：资本主义为社会主义所代替的历史必然性 （一）资本主义的内在矛盾决定了资本主义必然被社会主义所代替 （二）从资本主义向社会主义过渡是一个长期的历史过程 ◆ 第六章一：无产阶级革命 ⑴ 性质：无产阶级革命是迄今人类历史上最广泛、最彻底、最深刻的革命，是不同于以往一切革命的最新类型的革命。这是因为：第一，无产阶级革命是彻底消灭一切私有制、代之以生产资料公有制的革命。第二，无产阶级革命是要彻底消灭一切阶级和阶级统治的革命。第三，无产阶级革命是为绝大多数人谋利益的运动。 ⑵ 从理论上说，无产阶级革命有暴力的与和平的两种形式。 二：东欧剧变、苏联解体教训 最深刻的教训是：放弃了社会主义道路，放弃了无产阶级专政，放弃了*的领导地位，放弃了马克思列宁主义，结果使得已经相当严重的经济、政治、社会、**进一步激化，最终酿成了制度剧变、国家解体的历史悲剧。 三：社会主义的本质 社会主义的本质，是解放生产力，发展生产力，消灭剥削，消除两极分化，最终达到共同富裕。 四：必须充分认识经济文化相对落后的国家社会主义建设的艰巨性和长期性 第一，生产力发展状况的制约。第二，经济基础和上层建筑发展状况的制约。第三，国际环境的严峻挑战。第四，马克思主义执政党对社会主义发展道路的探索和对社会主义建设规律的认识，需要一个长期的艰苦的过程。 五：社会主义在曲折中前进的客观性 第一，社会主义作为新生事物，其成长不会一帆风顺。社会主义的产生和成长，意味着对资本主义旧社会的否定，这就必然要遭到资本主义势力的拼死反抗。社会主义新社会在开始的时候总是比较弱小的，而且在一个相当长的时期里，社会主义和资本主义的矛盾和斗争是不会停止的，时起时伏，有时甚至相当激烈，资本主义还可能会复辟，这就注定社会主义战胜资本主义的过程是一个曲折的发展过程。第二，社会主义社会的基本矛盾推动社会发展，是作为一个过程而展开的，人们对它的认识也有一个逐渐发展的过程。社会主义的基本矛盾推动社会发展，体现了生产关系一定要适合生产力状况的规律、上层建筑一定要适合经济基础状况的规律。由于受主观和客观条件的限制，对社会主义社会基本矛盾运动的规律和社会主义建设规律的认识有一个过程。只有尊重社会主义发展的客观规律，在实践中自觉地运用规律，及时研究新情况、有效地解决前进中出现的矛盾和问题时，社会主义事业才能够顺利地向前发展。 ◆ 第七章一：共产主义社会的基本特征 （一）物质财富极大丰富，消费资料按需分配 （二）社会关系高度和谐，人们精神境界极大提高 （三）每个人自由而全面的发展，人类从必然王国向自由王国的飞跃 二：确理解“两个必然”和“两个决不会”的关系 马克思恩格斯在《***宣言》中提出：“资产阶级的灭亡和无产阶级的胜利是同样不可避免的。”这就是我们常说的资本主义必然灭亡和社会主义必然胜利的“两个必然”（或“两个不可避免”）。后来，马克思在《〈政治经济学批判〉序言》中又提出了“两个决不会”，即：“无论哪一个社会形态，在它所能容纳的全部生产力发挥出来以前，是决不会灭亡的；而新的更高的生产关系，在它的物质存在条件在旧社会的胎胞里成熟以前，是决不会出现的。” “两个必然”和“两个决不会”有着内在的联系，应该结合起来加以理解。 “两个必然”和“两个决不会”是对资本主义灭亡和共产主义胜利必然性以及这种必然性实现的时间和条件的全面论述。前者讲的是资本主义灭亡和共产主义胜利的客观必然性，是根本的方面；而后者讲的是这种必然性实现的时间和条件，它告诫我们，“两个必然”的实现需要相应的客观条件，而在这个条件具备之前决不会成为现实。 全面准确地学习和把握“两个必然”和“两个决不会”，既有利于人们坚定资本主义必然灭亡、共产主义必然胜利的信心，同时也有利于人们坚持科学态度，充分尊重客观规律，在当前艰苦的实践中坚定地为共产主义的实现而奋斗。","categories":[{"name":"马克思主义原理","slug":"马克思主义原理","permalink":"http://example.com/categories/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"期末复习","slug":"期末复习","permalink":"http://example.com/tags/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"}]},{"title":"马克思主义原理期末考试重点","slug":"马克思主义原理期末考试重点","date":"2021-01-08T12:48:18.000Z","updated":"2021-01-08T12:57:34.642Z","comments":true,"path":"2021/01/08/马克思主义原理期末考试重点/","link":"","permalink":"http://example.com/2021/01/08/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%8E%9F%E7%90%86%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E9%87%8D%E7%82%B9/","excerpt":"","text":"《马克思主义基本原理概论》考试重点 1、三次起义运动(P6) 1831年、1834年法国里昂工人起义;1836年英国宪章运动;1844年德国西里西亚纺织工人起义。 2、马克思主义批判地继承、吸收(扬弃)德国古典哲学(主要代表人物:黑格尔、费尔巴哈)、英国古典政治经济学(主要代表人物:威廉·配第、亚当·斯密、大卫·李嘉图)和法国、英国空想社会主义(主要代表人物:昂利·圣西门、沙尔·傅立叶、罗伯特·欧文)。(P8~P9) 3、两大理论成果(P13) 毛泽东思想和中国特色社会主义理论体系(包括邓小平理论、“三个代表”重要思想、科学发展观) 4、哲学的基本问题(P29) ①意识和物质、思维和存在，究竟谁是世界的本原，即物质和精神何者第一性、何者第二性的问题;②思维能否认识或正确认识存在的问题。 5、哲学的分类(P29) ①根据哲学基本问题第一方面的回答划分为唯物主义和唯心主义。唯物主义把世界的本原归结为物质，主张物质第一性，意识第二性，意识是物质的产物;唯心主义把世界的本原归结为精神，主张意识第一性，物质第二性，物质是意识的产物。②根据哲学基本问题第二方面的回答划分为可知论和不可知论。可知论认为世界是可以被认识的;不可知论认为世界是不能被人所认识或不能被完全认识的，否定思维和存在的统一。 6、旧唯物主义哲学(P30) 包括古代朴素唯物主义和形而上学唯物主义。 7、意识的发展阶段(P31) 一切物质所具有的反应特性→低等生物的刺激感应性→高等动物的感觉和心理→人类的意识。 8、马克思指出“观念的东西不外是移入人的头脑并在人的头脑中改造过的物质的东西而已。”这表明，物质决定意识，意识依赖于物质并反作用于物质。(P31) 9、时间和空间(P33) 时间和空间是物质运动的存在形式，物质运动与时间和空间的不可分割证明了时间和空间的客观性。时间是指物质运动的持续性、顺序性，特点是一维性，即一去不复返;空间是指物质运动的广延性、伸张性，特点是三维性。 10、马克思主义以前的旧唯物主义都是“半截子”唯物主义。因为它们在自然观上是唯物主义，一到社会历史领域，就陷入了唯心主义。(P33) 11、实践的基本特征及构成实践活动的要素(P35) 基本特征:物质性、自觉能动性、社会历史性。要素:实践主体(人)、实践对象(客体)、实践手段(工具等)。 12、实践的基本形式(P36) 物质生产实践(人类最基本的实践活动)、社会政治实践、科学文化实践。 13、为什么说实践是人的存在方式？(P37) 人类的产生、生存和活动，是以实践为基本方式和标志的。①实践是人所独有的活动。②实践集中表现了人的本质的社会性。③实践对物质世界的改造是对象性的活动。 14、社会生活的实践性主要体现在哪几方面？(P39) ①实践是社会关系形成的基础。②实践形成了社会生活的基本领域。③实践构成了社会发展的动力。 15、意识的能动作用及主要表现的方面(P41) 意识能动作用是人的意识所特有的积极反映世界与改造世界的能力和活动。主要表现在:①意识活动具有目的性和计划性。②意识活动具有创造性。③意识具有指导实践改造客观世界的作用。④意识具有指导、控制人的行为和生理活动的作用。 16、主观能动性与客观规律性的辩证统一(P42) ①尊重客观规律是发挥主观能动性的前提。②在尊重客观规律的基础上充分发挥主观能动性。人们通过自觉活动能够认识规律和利用规律。自觉能动性是人与动物的重要区别。③尊重事物发展的规律与发挥人的主观能动性是辩证统一的。④实践是客观规律性与主观能动性统一的基础。 17、如何正确发挥主观能动作用？(P43) ①从实际出发，努力认识和把握事物的发展规律。②实践是发挥人的主观能动作用的基本途径。③主观能动作用的发挥，还依赖于一定的物质条件和物质手段。 18、联系的特点(P44) ①客观性。事物的联系是事物本身所固有的，不是主观臆想的。世界上没有孤立存在的事物，每一种事物都是和其他事物联系而存在的，这是一切事物的客观本性。②普遍性。a.任何事物内部的不同部分和要素都是相互联系的，也就是说，任何事物都具有内在的结构。b.任何事物都不能孤立存在，都同其他事物处于一定的相互联系之中。c.整个世界是相互联系的统一整体。③多样性。直接联系与间接联系，内部联系与外部联系，本质联系与非本质联系，必然联系与偶然联系等。 19、新生事物不可战胜的原因(P46) ①就新生事物与环境的关系而言，新事物之所以新，是因为有新的结构和功能，它适应已经变化了的环境和条件;旧事物之所以旧，是因为它的各种要素和功能已不适应环境和客观条件的变化，走向灭亡就成为不可避免的。②就新事物与旧事物的关系而言，新事物是在旧事物的“母体”中孕育成熟的，它既否定了旧事物中消极腐朽的东西，又保留了旧事物中合理的、仍然适合新的条件的因素，并添加了旧事物所不能容纳的新内容。 20、对立统一规律是唯物辩证法体系的实质和核心的原因(P47) ①对立统一规律揭示了事物普遍联系的根本内容和永恒发展的内在动力，从根本上回答了事物为什么会发展的问题；②对立统一规律是贯穿质量互变规律、否定之否定规律以及唯物辩证法基本范畴的中心线索，也是理解这些规律和范畴“钥匙”；③对立统一规律提供了人们认识世界和改造世界的根本方法——矛盾分析法。 21、矛盾的同一性与斗争性的辩证统一关系(P48) 矛盾同一性与斗争性之间是对立统一的辩证关系。①矛盾的同一性和斗争性之间是相互联结、相辅相成、相互制约的。一方面，同一性依赖于斗争性，同一是包含着差别、对立的同一，没有斗争性就没有同一性；另一方面，斗争性寓于同一性之中，斗争是是同一中的斗争，没有同一性，斗争性也不能成立。②同一性与斗争性之间是相对与绝对的关系。斗争性是绝对的、无条件的，同一性是相对的、有条件的，斗争性最终导致同一性的分解，有条件的同一性和无条件的斗争性相结合，推动着事物发展。 22、矛盾的普遍性和特殊性及其相互关系(P49~P50) 矛盾的普遍性: 矛盾无处不在，无时不有。矛盾存在于一切事物中，存在于一切事物发展过程的始终，旧的矛盾解决了，新的矛盾又产生，事物始终在矛盾中运动。矛盾的特殊性：一是不同事物的矛盾各有其特点；二是同一事物的矛盾在不同发展过程和发展阶段各有特点；三是构成事物的诸多矛盾以及每一矛盾的不同方面各有不同的性质、地位和作用。 矛盾的普遍性和特殊性是辩证统一的关系。矛盾的普遍性即矛盾的共性，矛盾的特殊性即矛盾的个性。矛盾的共性是无条件的、绝对的，矛盾的个性是有条件的、相对的。任何现实存在的事物都是共性和个性的有机统一，共性寓于个性之中，没有离开个性的共性，也没有离开共性的个性。矛盾的共性和个性、绝对和相对的道理，是关于事物矛盾问题的精髓，是正确理解矛盾学说的关键，不懂得它，就不能真正掌握唯物辩证法。矛盾的共性和个性相统一的关系，既是客观事物固有的辩证法，也是科学的认识方法。人的认识的一般规律就是由认识个别上升到认识一般，再由一般到个别的辩证发展过程。 23、量变和质变的辩证关系(P51) ①量变是质变的必要准备。任何事物的变化都有一个量变的积累过程，没有量变的积累，质变就不会发生。②质变是量变的必然结果。单纯的量变不会永远持续下去的，量变达到一定程度必然引起质变。③量变和质变是相互渗透的。一方面，在总的两边过程中有阶段性和局部性的部分质变。另一方面，在质变的过程中也有旧质在量上的收缩和新质在量上的扩张。 量变和质变是相互依存、相互贯通的，量变引起质变，在新质的基础上，事物又开始新的量变，如此交替循环，形成事物质量互变的规律性。质量互变规律体现了事物发展的渐进性和飞跃性的统一。 24、辩证否定观的主要内容(P52) ①否定是事物的自我否定，是事物内部矛盾运动的结果。②否定是事物发展的环节。它是旧事物向新事物的转变，是从旧质到新质的飞跃。只有经过否定，旧事物才能向新事物转变。③否定是新旧事物联系的环节，新事物孕育产生于旧事物，新旧事物通过否定环节联系起来的。④辩证否定的实质是“扬弃”，即新事物对旧事物既批判又继承，既克服其消极因素又保留其积极因素。 25、必然性与偶然性的关系(P54) ①必然性和偶然性是对立的。必然性是事物发展过程中确定不移的趋势，是由事物的根本矛盾决定的，体现事物发展的本质联系和发展前途;偶然性是事物发展过程中不确定的趋势，是由事物的非根本矛盾和外部条件引起的，对事物的发展起加速或延缓作用。②必然性和偶然性又是统一的。a.必然性总是通过大量的偶然现象表现出来，由此为自己开辟道路，没有脱离偶然性的纯粹必然性。b.偶然性是必然性的表现形式和必要补充，偶然性背后隐藏着必然性并受到其制约，没有脱离必然性的纯粹偶然性。c.必然性和偶然性在一定条件下可以相互转化。 26、主体和客体相互作用的过程(P64) ①确立实践目的和实践方案。②实践主体按照实践目的和实践方案实际地作用于实践客体，通过一定的实践手段把实践方案变成实践的实践活动。③通过反馈和调节，使实践目的、手段和结果按一定方向运行。 27、实践在认识中的决定作用(P65) 实践是认识的基础，对实践具有决定作用。①实践产生了认识的需要。②实践为认识提供了可能。③实践使认识得以产生和发展。④实践是检验认识的真理性的唯一标准。 28、两条根本对立的认识路线(P67) ①坚持从物到感觉和思想的唯物主义路线。②坚持从思想和感觉到物的唯心主义路线。 29、主观唯心主义和客观唯心主义(P67) 主观唯心主义认为人的认识是主观自生的，是“内心反省”的结果，是心灵的自由创造物。客观唯心主义认为人的认识是上帝的启示或绝对精神的产物。 30、辩证唯物主义认识论和旧唯物主义认识论(P67、P68) ①旧唯物主义的认识论即形而上学唯物主义认识论，把人的认识看成是消极地、被动地反映和接受外界对象。有两个严重缺陷:a.离开实践考察认识问题，因而不了解实践对认识的决定作用。b.不了解认识的辩证性质，离开辩证法来考察认识问题，不能把认识看作是一个不断发展的过程，而认为认识是一次性完成的。②辩证唯物主义认识论认为，认识是主体对客体的能动反映。这种能动反映具有摹写性和创造性。 31、感性认识和理性认识及其辩证关系(P69、P70) 感性认识：人们在实践基础上，由感觉器官直接感受到的关于事物的现象、事物的外部联系、事物各方面的认识，包括感觉、知觉和表象三种形式。理性认识：指人们借助抽象思维，在概括整理大量感性材料的基础上，达到关于事物的本质、全体、内部联系和事物自身规律性的认识。理性认识包括概念、判断、推理三种形式。辩证关系:①理性认识依赖于感性认识。理性认识必须以感性认识为基础，坚持理性认识对感性认识的依赖关系就是坚持了认识论的唯物论。②感性认识有待于发展和深化为理性认识。只有使感性认识上升到理性认识才能把握住事物的本质，满足实践的需要，坚持这一点就是坚持了认识论的辩证法。③感性认识和理性认识相互渗透、相互包含。感性认识和理性认识是辩证统一的，统一的基础是实践。 32、从感性认识过渡到理性认识所具备的条件(P70) ①勇于实践，深入调查，获取十分丰富和合乎实际的感性材料，这是正确实现由感性认识上升到理性认识的基础。②必须经过理性思考的作用，将丰富的感性材料加以去粗取精、去伪存真、由此及彼、由表及里的制作加工，才能将感性认识上升到理性认识。也就是说，必须运用辩证思维的科学方法，才能获得真正的认识。 33、造成认识过程反复性和无限性的原因(P72) ①人们对事物的认识，由于主客观条件的限制，往往不是一次完成的。从主观方面说，人们总是受到自己认识能力和实践活动范围的限制。从客观方面说，会受到科学技术条件的限制，以及客观过程的发展和表现程度的限制。②从人们具体的认识过程看，当某一思想、理论、计划、方案等，经过多次反复，在实践中达到预想结果，就算完成了。 34、实用主义所鼓吹的“有用就是真理”这句话是错误的。这是主观真理论的一个典型，实用主义者把“有用”和“真理”完全等同，从根本上否认了客观真理的存在。(P74) 35、真理的绝对性和相对性及其关系(P75) 真理的绝对性即具有绝对性的真理，是指真理的无条件性、无限性。真理的相对性即具有相对性的真理，是指真理的有条件性、有限性。任何真理都只能是主管对客观事物近似正确即相对正确的反映。关系:真理的绝对性和相对性是辩证统一的。①具有绝对性的真理和具有相对性的真理是相互渗透和相互包含的。②具有相对性的真理向具有绝对性的真理转化。 36、价值的特性(P81) ①客观性。价值关系的各个环节都是客观的。a.人的需要具有客观性。b.用来满足人的需要的对象也具有客观性。c.满足人的需要的过程和结果也具有客观性。②主体性。③社会历史性。④多维性。 37、价值评价及其特点(P82、P83) 价值评价是一种关于价值现象的认识活动。特点:①评价是以主客体的价值关系为认识对象的。②评价结果与评价主体有直接关系，是依主体的特点而转移的。③评价结果的正确与否依赖于相关的知识性认识。 38、党的十八大“三个倡导”(P85) 倡导富强、民主、文明、和谐，倡导自由、平等、公正、法治，倡导爱国、敬业、诚信、友善，积极培育和践行社会主义核心价值观。 39、两种根本对立的历史观(P95、P98) ①唯物史观。认为:社会历史发展具有自身固有的客观规律；社会存在决定社会意识，社会意识又反作用于社会存在；生产力和生产关系之间的矛盾，经济基础和上层建筑之间的矛盾是推动社会发展的基本矛盾。②唯心史观。认为:社会意识决定社会存在，人们的思想动机是社会发展的根本原因，否认社会发展的客观规律。 40、社会存在与社会意识及其辩证关系(P96) 社会存在:也称社会物质生活条件，是社会生活的物质方面，它包括地理环境和人口因素和物质资料的生产方式，其中物质资料的生产方式是社会存在的主要方面。社会意识:社会意识是社会生活的精神方面，是社会存在的反映。辩证关系:社会存在决定社会意识，社会意识是对社会存在的反映。社会存在和社会意识是辩证统一的。社会存在决定社会意识，社会意识是社会存在的反映，并反作用于社会存在。①社会存在是社会意识内容的客观来源，社会意识是社会物质生活过程及其条件的主观反映。②社会意识是人们社会物质交往的产物。③随着社会存在的发展，社会意识也相应地或迟或早地发生变化和发展。 41、社会意识的分类(P96) 社会意识具有复杂的结构。按照社会意识主体的不同，可以区分为个人意识和群体意识；按照社会意识反映层次的高低，可以区分为社会心理和社会意识形式；按照同经济基础关系的不同，可以区分为作为上层建筑的意识形式（社会意识形态）和非上层建筑的意识形式。上层建筑的意识形式（或者说社会意识形态）包括政治法律思想、道德、艺术、宗教、哲学和大部分的社会科学（例如：经济学、政治学、法学、社会学等等）；它们从各自不同方面发挥独特的作用。而非上层建筑的意识形式主要是指自然科学，也包括一部分社会科学和思维科学（例如：语言学、修辞学、逻辑学等等）。在阶级社会中，占统治地位的思想文化，本质上是经济上占统治地位的阶级的意识形态，因而具有鲜明的阶级属性。 42、社会意识相对独立性的主要表现(P99) ①社会意识与社会存在发展的不完全同步性和不平衡性。②社会意识的发展具有历史继承性。③社会意识各种内部形式之间的相互影响、相互作用。④社会意识对社会存在的能动的反作用，这是社会意识相对独立性的突出表现。 43、生产力的基本要素(P101) ①劳动资料(也称劳动手段)。②劳动对象。③劳动者。 44、生产力与生产关系的相互关系(P104) 生产力决定生产关系，生产关系对生产力有反作用。①生产力决定生产关系:a.生产力状况决定生产关系的性质，有什么样的生产力，就会产生什么样的生产关系；b.生产力的发展决定生产关系的发展和变革。②生产关系对生产力具有能动的反作用:a.当生产关系与生产力的发展要求相适合时，它会有力地推动生产力的发展；b.当生产关系与生产力的发展要求不相适合时，它会阻碍甚至破坏生产力的发展。 45、经济基础和上层建筑的矛盾运动(P108) 经济基础与上层建筑是辩证统一的。①经济基础决定上层建筑。经济基础是上层建筑赖以产生、存在和发展的物质基础，上层建筑是经济基础得以确立统治地位并巩固和发展不可缺少的政治、思想条件。任何上层建筑的产生、存在和发展，都能直接或间接地从社会的经济结构中得到说明。经济基础的性质决定上层建筑的性质，有什么样的经济基础就有什么样的上层建筑。经济基础的变更必然引起上层建筑的变革，并决定着其变革的方向。②上层建筑对经济基础具有反作用。集中表现在:为自己的经济基础的形成和巩固服务，确立或维护其在社会中的统治地位。上层建筑这种反作用的后果可能有两种:当它为适合生产力发展要求的经济基础服务时，就成为推动社会发展的进步力量;反之，就会成为阻碍社会发展的消极力量。 46、社会形态的分类(P110) ①经济形态(基础)。②政治形态。③意识形态。 47、社会历史发展的动力(P113) ①根本动力:社会基本矛盾(生产力和生产关系、经济基础和上层建筑的矛盾)。②直接动力:阶级斗争。③重要动力:革命、改革、科学技术。 48、群众观点与群众路线(P133) 群众观点:人民群众至上。坚信人民群众自己解放自己;全心全意为人民服务;一切向人民群众负责;虚心向群众学习。 群众路线:一切为了群众，一切依靠群众，从群众中来，到群众中去。 49、试用物质和意识的辩证关系原理，说明我国的现代化建设必须走自己的路，建设中国特色的社会主义。 答:①物质和意识的辩证关系是：物质第一性，意识第二性，先有物质，后有意识。物质决定意识，意识是物质的反应，意识对物质具有能动的反作用，正确的意识对事物的发展起足进作用，错误的意识对事物的发展起阻碍作用。这一原理要求我们在实际工作要坚持一切从实际出发，实事求是。②我国的社会主义现代化建设，必须从中国的客观实际出发，从中国的国情，国力和基本特点出发。我国当前乃至今后相当长一段时期处于社会主义初级阶段是我国的基本国情，是我国当前的最大实际，是我们党制定路线，方针和政策的客观依据。我国的现代化建设必须从这一基本国情出发，把马克思主义的基本原理同中国的实际紧密结合起来。建设中国特色的这会注义。③在现代化建设过程中，必须会遇到需多新情况、新问题。这就要求我们从实际出发，尊重客观规律，不断开创现代化建设的新局面。必须反对从主观愿望和书本教条出发，反对照搬照抄他人的检验和模式。 50、试用矛盾的普遍性和特殊性的辩证关系原理，说明坚持中国特色社会主义道路的重要性。 答:①矛盾的普遍性是指矛盾存在于一切事物的发展过程中，存在于一切事物发展过程的始终。矛盾的特殊性是指具体事物的矛盾及每一矛盾的各个方面都有其特点。②矛盾的普遍性和特殊性是辩证的统一。第一，矛盾的普遍性和特殊性是相互联结的。普遍性存在于特殊性之中，特殊性中包含着普遍性。第二，矛盾的普遍性和特殊性在一定条件下可能相互转化。③矛盾的普遍性和特殊性辩证统一的原理，是把马克思主义普遍真理与中国的具体实际相结合，走建设有中国特色社会主义道路的重要理论依据。④我们既要坚持社会主义的根本制度和基本原则，又必须注意中国的特点，从中国正处于并将长期处于社会主义初级阶段这一实际出发，走自己的路。只有这样，才能把建设有中国特色社会主义事业推向前进。 51、用认识和实践的关系原理，说明科学发展观对中国特色社会主义建设的重要意义。 答:①认识是实践的基础，实践对认识起决定作用。实践是认识的来源、动力、检验标准和目的。理论一经形成对实践有能动作用，主要表现在:正确的认识和理论可以指导实践指向适当的对象，采取正确的方法，从而取得成功。错误的认识和理论，会引导实践指向不适当的对象，采取错误的方法，从而导致失败。②科学发展观是马克思主义关于发展世界观和方法论的集中体现，是我国经济社会发展的重要指导方针。它进一步正确地回答了实现什么样的发展、怎样发展的问题，体现了我们党对执政规律、社会主义建设规律和人类社会发展规律认识的进一步深化。③科学发展观能够指导我国经济社会实现又快又好的发展，解决发展中的不平衡、不协调问题，为我国经济社会发展指明了正确的方向。④认真学习全面领会科学发展观，才能真正坚持贯彻科学发展观。 52、用真理的绝对性和相对性的辩证关系原理，说明对待马克思主义的正确态度。 答:①真理的绝对性和相对性的关系:首先，两者相互对立、相互区别;绝对真理是指真理的内容是客观的，人类的认识按其本性是能够正确反映无限发展着的物质世界。相对真理是指真理只是对客观事物一定范围的正确反映，是对事物一定程度、一定层次的近似正确的反映。其次，两者相互依存、相互渗透。相对真理中包含着绝对真理的成分，绝对真理是由无数相对真理构成的。再次，人类的认识永远处在从相对真理向绝对真理的转化过程中。②马克思主义作为科学真理，是绝对性和相对性的统一。马克思主义是关于自然、社会和思维发展的普遍规律的科学，它的基本原理经过实践的反复检验、证明，对各国的革命和建设具有普遍的指导意义，这是无条件的、绝对的。马克思主义没有穷尽一切真理，必将随着科技的进步和实践的发展而前进，这又是其相对性。对待马克思主义的科学态度关键在于正确处理好坚持和发展马克思主义的关系，即既要坚持，又要发展，在坚持中发展，在发展中坚持。③割裂真理的绝对性和相对性的关系会导致真理问题上的绝对主义或相对主义。在实际工作中要反对片面夸大马克思主义的绝对性、否认其相对性的教条主义、本本主义的错误，又要反对片面夸大其相对性、否认其绝对性的所谓马克思主义“过时论”、“无用论”的错误。 53、试述社会意识相对独立的原理并用以说明加强社会主义精神文明建设的重要性。 答:(1)社会存在决定社会意识，社会意识是社会存在的反映，因此，它没有绝对独立性，只具有相对独立性。社会意识相对独立性的表现：①社会意识对社会存在有巨大的能动的反作用：先进的社会意识对社会存在的发展起着促进和推动的作用，落后反动的社会意识阻碍社会存在的发展。②社会意识和社会存在变化和发展的不完全同步性：社会意识的变化有时落后于社会存在的变化；先进的社会意识在不同程度上预见社会存在变化发展的趋势和未来。③社会意识同社会经济发展水平的不平衡性：经济上先进的国家，意识形态的发展却可能落后；经济上落后的国家，意识形态发展可能先进。④社会意识各种形式之间能互相作用，其中政治思想居于主导地位，对其他意识形式有巨大影响。⑤社会意识具有历史继承性，后人总要继承前人的思想材料，并加以改造和发展。(2)重要性：①社会主义精神文明建设，是实现社会主义现代化的战略任务，它能推动社会主义社会存在的发展。它为社会主义生产方式、经济制度的发展提供了精神动力和智力支持及思想保证，也是改革开放和实现社会主义现代化的根本保证。②社会主义精神文明建设又是抵制封建主义、资产阶级腐朽思想的重要武器，是反对资产阶级自由化的重要武器。③社会主义精神文明建设不仅关系到我国社会主义方向和道路，而且是关系到我国整个社会生活的精神面貌的大问题。因此，搞好它是极为重要的。","categories":[{"name":"马克思主义原理","slug":"马克思主义原理","permalink":"http://example.com/categories/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"期末复习","slug":"期末复习","permalink":"http://example.com/tags/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"}]},{"title":"leetcode-train-day-8","slug":"leetcode-train-day-8","date":"2021-01-08T06:23:57.000Z","updated":"2021-01-08T09:08:19.845Z","comments":true,"path":"2021/01/08/leetcode-train-day-8/","link":"","permalink":"http://example.com/2021/01/08/leetcode-train-day-8/","excerpt":"","text":"直接开始 今日题目 给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。 示例 1: 输入: [1,2,3,4,5,6,7] 和 k = 3输出: [5,6,7,1,2,3,4]解释:向右旋转 1 步: [7,1,2,3,4,5,6]向右旋转 2 步: [6,7,1,2,3,4,5]向右旋转 3 步: [5,6,7,1,2,3,4]示例 2: 输入: [-1,-100,3,99] 和 k = 2输出: [3,99,-1,-100]解释:向右旋转 1 步: [99,-1,-100,3]向右旋转 2 步: [3,99,-1,-100]说明: 尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。要求使用空间复杂度为 O(1) 的 原地 算法。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/rotate-array著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 对于python的解法，我第一时间想到的就是python的切片解法，并且运用的就是python的解法以下是我的解法 12345678class Solution:def rotate(self, nums: List[int], k: int) -&gt; None: &quot;&quot;&quot; Do not return anything, modify nums in-place instead. &quot;&quot;&quot; length = len(nums) nums[:] = nums[length-k:] + nums[:length-k] 最后虽然过了，但是我看了解法区别人的说法，说是切片操作其实，是不符合要求的感觉，切片似乎还是要另外的储存空间，因此时间复杂的O(1)的要求是不符合的。 然后评论里面找了一个解答是三次反转，发现真是妙啊 思路是先0-length-k位置的数组反转；再是k-最后的反转；再最后整体反转 123456789101112131415class Solution:def rotate(self, nums: List[int], k: int) -&gt; None: &quot;&quot;&quot; Do not return anything, modify nums in-place instead. &quot;&quot;&quot; n=len(nums) k=k%n def swap(l,r): while(l&lt;r): nums[l],nums[r]=nums[r],nums[l] l=l+1 r=r-1 swap(0,n-k-1) swap(n-k,n-1) swap(0,n-1) 真是好奇妙啊 此外还有插入法等其他方法；python的法就这样吧 然后就是c语言的方法 采用的就是三次反转的思路 1234567891011121314151617void reverse(int *nums,int begin,int end)&#123; int temp,i; for(i=0;i&lt;(end-begin+1)/2;i++)&#123; temp = nums[begin+i]; nums[begin+i] = nums[end-i]; nums[end-i] = temp; &#125;&#125;void rotate(int* nums, int numsSize, int k)&#123; if(!nums || numsSize == 0) return; k %= numsSize; reverse(nums,0,numsSize-k-1); reverse(nums,nums-k,numsSize-1); reverse(nums,0,numsSize-1);&#125; 中途有个错误，就是，定义函数的入口参数，一开始写的是nums与系统给的一样，也不知道怎么回事，就是会显示内存溢出了，所以后面改成num;以后要注意这个问题，入口参数的定义尽量不要同名 嗯，就这样","categories":[{"name":"每日一题","slug":"每日一题","permalink":"http://example.com/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}],"tags":[{"name":"leetcode每日一题","slug":"leetcode每日一题","permalink":"http://example.com/tags/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]},{"title":"leetcode-train-day-7","slug":"leetcode-train-day-7","date":"2021-01-07T06:15:14.000Z","updated":"2021-01-08T09:08:38.539Z","comments":true,"path":"2021/01/07/leetcode-train-day-7/","link":"","permalink":"http://example.com/2021/01/07/leetcode-train-day-7/","excerpt":"","text":"今天的也是一个中等难度的的题目 有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。 省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。 给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j] = 0 表示二者不直接相连。 返回矩阵中 省份 的数量。 示例 1： 输入：isConnected = [[1,1,0],[1,1,0],[0,0,1]]输出：2示例 2： 输入：isConnected = [[1,0,0],[0,1,0],[0,0,1]]输出：3 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/number-of-provinces著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 第一个感觉就是图有关的题目，然后。转换过来就是求根节点的个数，通过遍历图来求 以下是解法： 12345678910111213141516171819202122class Solution:def findCircleNum(self, isConnected: List[List[int]]) -&gt; int: def dfs(isConnected,i,length): visit[i] = True j = 0 row = isConnected[i] while(j&lt;length): if(row[j]==1 and visit[j] == False): dfs(isConnected,j,length) j += 1 length = len(isConnected[0]) #节点个数 visit = [False]*length #初始化节点，全部标为未访问 i = 0 count = 0 #省份数量 while(i&lt;length): if(visit[i]==False): count += 1 dfs(isConnected,i,length) i += 1 return count 主要思路就是深度遍历图，统计根节点的个数","categories":[{"name":"每日一题","slug":"每日一题","permalink":"http://example.com/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}],"tags":[{"name":"leetcode每日一题","slug":"leetcode每日一题","permalink":"http://example.com/tags/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]},{"title":"leetcode-train-day-6","slug":"leetcode-train-day-6","date":"2021-01-06T15:03:32.000Z","updated":"2021-01-08T09:09:10.617Z","comments":true,"path":"2021/01/06/leetcode-train-day-6/","link":"","permalink":"http://example.com/2021/01/06/leetcode-train-day-6/","excerpt":"","text":"今天差点忘记了写这个。。。 今天的题目，压根不会，看了答案后，知道是数据结构图的应用.方法是并查集。还涉及到路径压缩问题 是一道除法求值题 给你一个变量对数组 equations 和一个实数值数组 values 作为已知条件，其中 equations[i] = [Ai, Bi] 和 values[i] 共同表示等式 Ai / Bi = values[i] 。每个 Ai 或 Bi 是一个表示单个变量的字符串。 另有一些以数组 queries 表示的问题，其中 queries[j] = [Cj, Dj] 表示第 j 个问题，请你根据已知条件找出 Cj / Dj = ? 的结果作为答案。 返回 所有问题的答案 。如果存在某个无法确定的答案，则用 -1.0 替代这个答案。 注意：输入总是有效的。你可以假设除法运算中不会出现除数为 0 的情况，且不存在任何矛盾的结果。 示例 1： 输入：equations = [[“a”,”b”],[“b”,”c”]], values = [2.0,3.0], queries = [[“a”,”c”],[“b”,”a”],[“a”,”e”],[“a”,”a”],[“x”,”x”]]输出：[6.00000,0.50000,-1.00000,1.00000,-1.00000]解释：条件：a / b = 2.0, b / c = 3.0问题：a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?结果：[6.0, 0.5, -1.0, 1.0, -1.0 ]示例 2： 输入：equations = [[“a”,”b”],[“b”,”c”],[“bc”,”cd”]], values = [1.5,2.5,5.0], queries = [[“a”,”c”],[“c”,”b”],[“bc”,”cd”],[“cd”,”bc”]]输出：[3.75000,0.40000,5.00000,0.20000]示例 3： 输入：equations = [[“a”,”b”]], values = [0.5], queries = [[“a”,”b”],[“b”,”a”],[“a”,”c”],[“x”,”y”]]输出：[0.50000,2.00000,-1.00000,-1.00000] 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/evaluate-division著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 这道题着实是不会，所以我直接看的题解；然后通过看官方的视频明白了并查集的操作。 但由于官方给的解题视频讲解的是java的代码，还是有一定的区别，所以，我有看了下面的大佬的解题思路 这个答主先给出了个并查集模板： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546class UnionFind:def __init__(self): &quot;&quot;&quot; 记录每个节点的父节点 &quot;&quot;&quot; self.father = &#123;&#125;def find(self,x): &quot;&quot;&quot; 查找根节点 路径压缩 &quot;&quot;&quot; root = x while self.father[root] != None: root = self.father[root] # 路径压缩 while x != root: original_father = self.father[x] self.father[x] = root x = original_father return rootdef merge(self,x,y,val): &quot;&quot;&quot; 合并两个节点 &quot;&quot;&quot; root_x,root_y = self.find(x),self.find(y) if root_x != root_y: self.father[root_x] = root_ydef is_connected(self,x,y): &quot;&quot;&quot; 判断两节点是否相连 &quot;&quot;&quot; return self.find(x) == self.find(y)def add(self,x): &quot;&quot;&quot; 添加新节点 &quot;&quot;&quot; if x not in self.father: self.father[x] = None 作者：MiloMusiala链接：https://leetcode-cn.com/problems/evaluate-division/solution/pythonbing-cha-ji-fu-mo-ban-by-milomusia-kfsu/来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 以下是python的解法： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667class UnionFind: def __init__(self): #记录每个节点的父节点,记录每个节点到根节点的权重 self.father = &#123;&#125; self.value = &#123;&#125; def find(self,x): #查找根节点，路径压缩，以及压缩路径后权重的更新（每次查找时，通识带了路径压缩） root = x # 节点更新权重的时候要放大的倍数 base = 1 while self.father[root] != None: root = self.father[root] base *= self.value[root] while x != root: original_father = self.father[x] ##### 离根节点越远，放大的倍数越高 self.value[x] *= base base /= self.value[original_father] ##### self.father[x] = root x = original_father return root def merge(self,x,y,val): #合并两个节点 root_x,root_y = self.find(x),self.find(y) if root_x != root_y: self.father[root_x] = root_y2021/1/6 23:48:51 ##### 四边形法则更新根节点的权重 self.value[root_x] = self.value[y] * val / self.value[x] def is_connected(self,x,y): #两节点是否相连 return x in self.value and y in self.value and self.find(x) == self.find(y) def add(self,x): #添加新节点，初始化权重为1.0 if x not in self.father: self.father[x] = None self.value[x] = 1.0 class Solution: def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -&gt; List[float]: uf = UnionFind() for (a,b),val in zip(equations,values): uf.add(a) uf.add(b) uf.merge(a,b,val) res = [-1.0] * len(queries) for i,(a,b) in enumerate(queries): if uf.is_connected(a,b): res[i] = uf.value[a] / uf.value[b] return res 2021/1/6 23:48:56 不写了，好晚了，室友也要睡觉了不好打扰他们。明天再回来看看这道题吧。","categories":[{"name":"每日一题","slug":"每日一题","permalink":"http://example.com/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}],"tags":[{"name":"leetcode每日一题","slug":"leetcode每日一题","permalink":"http://example.com/tags/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]},{"title":"leetcode-train-day-5","slug":"leetcode-train-day-5","date":"2021-01-05T06:09:32.000Z","updated":"2021-01-08T09:10:30.368Z","comments":true,"path":"2021/01/05/leetcode-train-day-5/","link":"","permalink":"http://example.com/2021/01/05/leetcode-train-day-5/","excerpt":"","text":"每日一题 在一个由小写字母构成的字符串 s 中，包含由一些连续的相同字符所构成的分组。 例如，在字符串 s = “abbxxxxzyy” 中，就含有 “a”, “bb”, “xxxx”, “z” 和 “yy” 这样的一些分组。 分组可以用区间 [start, end] 表示，其中 start 和 end 分别表示该分组的起始和终止位置的下标。上例中的 “xxxx” 分组用区间表示为 [3,6] 。 我们称所有包含大于或等于三个连续字符的分组为 较大分组 。 找到每一个 较大分组 的区间，按起始位置下标递增顺序排序后，返回结果。 示例 1： 输入：s = “abbxxxxzzy”输出：[[3,6]]解释：”xxxx” 是一个起始于 3 且终止于 6 的较大分组。示例 2： 输入：s = “abc”输出：[]解释：”a”,”b” 和 “c” 均不是符合要求的较大分组。示例 3： 输入：s = “abcdddeeeeaabbbcd”输出：[[3,5],[6,9],[12,14]]解释：较大分组为 “ddd”, “eeee” 和 “bbb”示例 4： 输入：s = “aba”输出：[] 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/positions-of-large-groups著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 python解法 首先是我自己的思路直接遍历，从头开始，统计相邻的字符最多有多少个相同，如果其长度大》=3就将其开始位置和结束位置加入到列表中，继续从结束位置的下一个位置开始遍历 123456789101112131415161718class Solution:def largeGroupPositions(self, s: str) -&gt; List[List[int]]: ans = [] n =len(s) i=0 while (i&lt;n): temp = s[i] length = 0 while((i &lt; n) and (s[i]==temp)): length += 1 i += 1 if(length&gt;=3): start = i -length end = i-1 ans.append([start,end]) return ans 第二种是 看别人的解法，有好多的是双指针，不是很懂什么双指针；对于c的针更熟悉；但是感觉和我的想法是差不多的，不过是循环的变量用了两个， 使用i,j指针，i指针记录起始下标；j指针判断是s[j]与s[i]是否相同：相同继续向后移，不相同则中止while循环，此时一定要注意的是这个时候的j指向的字母不同于s[i] 1234567891011121314class Solution:def largeGroupPositions(self, s: str) -&gt; List[List[int]]: res=[] i=0 length=len(s) while i&lt;length: j=i+1 while j&lt;length and s[j]==s[i]: j+=1 #此时的j指向了一个不同的字母 if j-1-i&gt;=2: res.append([i,j-1]) i=j return res 作者：stone-115链接：https://leetcode-cn.com/problems/positions-of-large-groups/solution/pythonshuang-zhi-zhen-jie-fa-tong-su-yi-7t4ey/来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 第三种是正则表达式的的解法，这个着实不是很懂，正则表达式学的不够好 12345678910class Solution:def largeGroupPositions(self, S: str) -&gt; List[List[int]]: import re data=[i+j for i,j in re.findall(r&#x27;([a-z])(\\1*)&#x27;,S)] res,idx=[],0 for k in data: if len(k)&gt;=3: res.append([idx,idx+len(k)-1]) idx+=len(k) return res 作者：2558260433链接：https://leetcode-cn.com/problems/positions-of-large-groups/solution/zheng-ze-biao-da-shi-by-2558260433/来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 这个的方法，没有写思路，感觉上来讲，好像式直接条用re库里的函数，然后，通过这个函数可以得到一个切片后的字符串组，每个字符串只包含一个一种字符，再通过对该字符数组的遍历，找出符合条件的，将其开始和结束位置，加入输出答案中。 然后是c语言的写法，开始我想用，python的写法，不过没有成功。主要是不会建立一个空的列表（尴尬）;看了别人的解题方式后，老老实实的去用指针了 一下是代码 12345678910111213141516171819202122232425262728/** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ int** largeGroupPositions(char * s, int* returnSize, int** returnColumnSizes)&#123; int l=strlen(s); int** ret = malloc(sizeof(int*) * (l / 3)); *returnColumnSizes = malloc(sizeof(int) * (l / 3) ); *returnSize=0; int start=0,end=1; while(end&lt;l)&#123; int cnt=0; while(s[start]==s[end])&#123; end++; cnt++; &#125; if(cnt&gt;=2)&#123; int* tmp = malloc(sizeof(int) * 2); tmp[0] = start, tmp[1] = end-1; (*returnColumnSizes)[*returnSize] = 2; ret[(*returnSize)++]=tmp; &#125; start=end; end++; &#125; return ret;&#125; 不过还是不是很懂这道题语言解法的思路","categories":[{"name":"每日一题","slug":"每日一题","permalink":"http://example.com/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}],"tags":[{"name":"leetcode每日一题","slug":"leetcode每日一题","permalink":"http://example.com/tags/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]},{"title":"数据科学概论考试知识点","slug":"数据科学概论考试知识点","date":"2021-01-04T07:55:11.000Z","updated":"2021-01-08T08:34:25.077Z","comments":true,"path":"2021/01/04/数据科学概论考试知识点/","link":"","permalink":"http://example.com/2021/01/04/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%A6%82%E8%AE%BA%E8%80%83%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/","excerpt":"","text":"第一章数据科学定义 定义：数据科学是关于对与数据进行分析、抽取信息和知识的过程提供指导合作支持的基本原则方法科学 ​ 数据科学的核心任务是从数据中从获取信息、发现知识。数据科学包含一组概念、原则、过程、技能/方法以及工具，为其核心任务为服务 ​ 简而言之，数据科学是以各类数据作为研究对象的，建立在在应对分析挑战的众多关键技术基础上的通识意义上的科学 大数据的三个主要特点： 数据量大、数据类型多、数据生成快、价值密度低 数据科学的基本原则： ​ 1、数据分析可以划分成一系列的明确阶段 ​ 2、描述性与预测分析 ​ 3、实体的相似度 ​ 4、模型泛化能力 ​ 5、分析结果的评估与特定的应用场景有关 ​ 6、相关性不同于因果关系 ​ 7、通过并行处理提高数据处理（分析）速度 数据处理的流程： 1、数据采集2、数据表示和储存3、数据清洗4、数据集成5、数据分析6、数据可视化7、基于数据的决策 ​ 第二章 OLTP与数据服务数据服务是指面向操作型业务，提供数据的增加、删除、修改以及简单的查询功能（增删改查） 联机事务处理（OLTP）指的是用户的业务请求转化成数据库的操作，传送到后台数据库管理系统，数据库管理系统在很短的时间内，把用户的相关数据操作当作一个事务来处理，对用户的请求进行响应 联机事务处理的两个特点：一个是用户请求作为一个事务进行处理，另一个是响应时间短 ACID事务特性：A：原子性，指的是事务的所有操作，要么全部执行，要么都没有执行 ​ C：一致性，值的是事务把数据库状态，从一个有效状态转化为另一个新的有效状态 ​ I：隔离性，是指在一个并发的事务处理系统中和其他事务是相互隔离的，事务的各个操作步骤可以交替执行，但必须和保 证某个未提交的事务和其他事务时相互隔离的，目的是保证未提交的数据，别的事物不能看到 ​ D：指的时提交的数据的必须保存起来，当系统失败和重启，数据能够恢复到最近的正确后状态 数据安全性保证的主要技术手段： 用户认证和授权、审计和数据加密等 关系模型的完整性包括实体完整性、参照完整性、用户自定义完整性 NoSQL数据​ Not only SQL ,是某一类数据库的统称 ​ 主要特点：采用和关系模型不同的数据模型，采取了一些新的设计原则，目的是利用大型计算机集群实现大数据的有效处 理 ​ 新原则：1、采用横向扩展方式应对大数据挑战；2、放弃严格的ACID一致性约束，允许数据暂时出现不一致，接受最终一致性； ​ 3、对数据的储存进行容错处理，一般对数据块进行适当的备份 CAP理论：在大型分布式数据库中，一致性、系统可用性、网络分区容忍性这三个目标中，只可以获得其中两个，追求其中两个将损害另外一个的目标 ​ NoSQL的四种数据库类型| 四种类型 | 代表 || ——————- | ——————- || Key-Value数据库 | Dynamo数据库、Redis || Column Family数据库 | Big Table、HBase、 || Document数据库 | MongoDB || Graph数据库 | Neo4J | NewSQL没怎讲，不搞了 分布式数据库 定义：所谓分布式数据库，它运行在多台计算机上，这些计算机通过网络互联。每台计算机可以放在一个地方，每台计算机安装独立的RDBMS系统，拥有数据的完整拷贝，或者部分拷贝。这些计算机系统共同组成一个完整的、逻辑上集中、但是物理上分布的大型数据库。 第三章 OLAP 与结构化数据联机分析处理（OLAP）：是在以星型模型（或雪花模型）建立的数据仓库上进行多维分析 结构化数据分析： 是一个更为广泛的概念，它运行在结构化数据上，分析可以表达成一个SQL聚集查询 数据仓库与星型模型，BILL Inmon认为数据仓库是面向主题的、集成的、非易失的和时变的数据集合，用以支持管理决策 数据仓库一般不对应到某个厂商的具体产品，而是指一种面向对象的数据分析储存方案 联机分析处理的主要操作：下钻、上卷、切片、切块、旋转等 ​ 下钻和上卷是改变维的层次；切片和切块是选定一部风维度值，然后查看度量数据剩余维度上的分布情况；旋转操作时改变维的方向 三种类型的OLAP系统：多维OLAP（MOLAP)、关系OLAP(ROLAP)、混合OLAP(HOLAP)； ​ MOLAP优点性能高，缺点是占用大量的空间保存汇总数据 ​ ROLAP优点利用关系数据库保存原始明细数据，占用空间有限，但性能有限 ​ HOLAP是两者的集合，HOLAP的查询效率比ROLAP高，比MOLAP低 高性能OALP系统的三种实现技术 ​ 列储存技术​ ​ 位图索引技术 ​ 内存数据库技术 第四章 数据清洗与数据集成ETL (Extract、Tansform and Load) : 数据抽取，转换和装载 数据集成是从多个数据源建立统一的数据视图的一种技术 数据清洗是一种消除数据里面错误、去掉重复数据的技术 数据清洗​ 数据清洗的意义：剔除数据中的错误，以便获得高质量的数据，基于高质量的数据分析才能获得可信的分析结果，进而做出正确的决策 ​ 数据异常的不同类型： ​ 1、语法类异常：词法错误、值域格式错误、不规则的取值 ​ 2、语意类异常：违反完整性约束规则、数据中出现矛盾、数据重复 ​ 3、覆盖类异常：值缺失、元组缺失 数据质量：​ 数据质量的评价标准：完整的评价标准是子评价标准的综合加权评分 ​ 1、正确性：完整性、一致性（可继续划分为模式符合性和统一性）、密度 ​ 2、唯一性 ​ 数据清洗的任务和过程 ​ 任务：剔除数据里的异常，使得数据集成为现实世界的准确、没有重复的表示过程 ​ 主要操作：1、对元组及其各个属性的格式进行调整。2、完整性约束条件的检查和实施。3、从已知值中导出缺失值。4、检测离群值 ​ 过程： ​ 数据审计—&gt;选择合适的方法—&gt;执行方法—&gt;后序处理和控制 ​ 数据清洗的具体方法： ​ 1、数据解析数据解析的目的是检测语法错误 ​ 2、数据转换数据转换的目的是把数据从一个格式映射到另外一种格式，以适应程序的需要。在实例层面一般采取标准化和规范化方法，提出数据的不规则性 ​ 3、实施完整性约束条件 ​ 4、重复数据消除 ​ 5、一些统计方法 数据集成：​ 数据集成是指把数据从多个数据源整合在一起，提供一个观察这些数据统一视图的过程、 ​ 数据集成分为物理式数据集成、虚拟式数据集成两类 ​ 数据集成需要解决的问题——异构性：管理系统的异构性、通信协议异构性、数据模式异构性、数据类型异构性、 ​ 数据集成的三种模式：建立数据仓库、联邦数据库模式、中介者模式 第五章 数据的深度分析（数据挖掘、机器学习）广义上而言，机器学习是一种能够赋予机器学习的能力，让它完成直接编程无法完成的功能的方法。 机器学习的目的是：是预测（包括分类和回归） 特征选择算法（书上出现的）： 互信息、文档频率、信息增益、卡方检验 机器学习的基本过程是利用训练数据（包含输入数据和预期输出的分类或者数值）训练一个模型，利用这个模型，就可以对新的实例数据进行分类和计算一个预测 机器学习的方法可以分为：监督学习、无监督学习、半监督学习 ​ 监督学习：是机器学习的一种类别，训练数据由输入特征（Feature）和预期的输出构成，输出可以是一个连续的值，或者是一个分类的标签。 ​ 无监督学习：与监督学习的区别就是没有训练样本，直接对数据建模。 ​ 半监督学习：是监督学习和无监督学习的结合，它研究利用少量的标注样本和大量未标注的样本进行训练和预测问题。半监督学习分为半监督分类，半监督回 归，半监督聚类，半监督降维算法 主流机器学习算法决策树、聚类算法K-means、SVM、关联规则分析Apriori算法、EM算法、协同过滤推荐算法、朴素贝叶斯算法 第六章 流数据处理流数据处理应用​ 网络监控、电信数据管理、工业制造、传感器网络、电子商务、量化交易等 流式处理和批处理的区别​ 流式处理时针对批处理来讲的 流式处理（Stream Processing） 是针对 批处理（Batch Processing）来讲的，即它们是两种截然不同的数据处理模式，具有不同的特点，适用于不同的应用场合。不能简单地认为其中一种数据处理模式优于另一种数据处理模式。 对于批处理来讲，首先数据被不断地采集，保存到数据库中，然后进行分析处理（包括SQL查询）。批处理适用于对大量数据（High Volume）进行处理的场合。人们需要等到整个分析处理任务完成，才能获得最终结果。由于需要处理的数据集大小以及计算机系统的计算能力的差异，整个过程有时需要耗费相当长的时间，即获得最终分析处理结果的延迟较大。批处理是最通用的数据处理模式。传统的关系数据库系统、Hadoop以及Spark大数据处理平台等，都采用了这样的数据处理模式，或者以该处理模式为主。由于需要完整地保存整个数据集，并且在上面进行分析处理，比起流式数据处理系统，人们需要投入更多的硬件资源。 批处理系统可以存取已经入库的所有数据，人们可以对数据进行复杂深入的分析，分析处理的延迟以分钟或者小时计。批处理作业（Job）一旦提交，则一直运行，直到获得最终结果或者失败退出，无需用户人工干预。这些作业在整个数据集或者某个子集上执行一系列的分析，产生分析结果。在性能方面，批处理系统主要考虑系统的吞吐能力，而不是单个分析处理任务的处理延迟（Latency）。 在流式数据处理模式里，数据持续到达，系统及时处理新到达的数据，并不断产生输出。处理过的数据一般丢弃掉，当然也可以保存起来。流式数据处理模式强调数据处理的速度（Velocity）。部分原因是数据产生的速度很快，需要及时进行处理。由于流式数据处理系统能够对新到达的数据进行及时的处理，所以它能够给决策者提供最新的事物发展变化的趋势，以便对突发事件进行及时响应，调整应对措施。 查询处理的基础算法​ 随机采样、梗概技术、直方图、小波分析、布隆过滤器、计数最小梗概 流数据处理系统 Storm 第七章 文本分析文本分析的意义：深入了解非结构化数据，帮助企业或个人对产品和服务做出改进 文本分析的过程1、采集文本数据。2、运用文本分析方法分析文本。3、对分析结果进行可视化以及解释和评估分析结果等。 文本分析的任务和方法句子切分、分词、词性标注、语法分析 ​ 切分和分词 ，对于文本进行分析需要将文本切分为一个一个的句子，完成该功能的软件是语句切分器 ​ 词性标注 ​ 语法树 1、概率型上下文无关语法分析激素。2、位移归约语法分析技术。3、基于神经网络的语法分析技术 文本聚类的几种方法1、基于距离的聚类算法。2、基于单词或者短语的聚类算法。3、基于话题建模技术的概率聚类算法。 第十章 数据可视化、可视分析与探索十数据分析什么是什么可视化可视化是一种数据的可视表现形式以及交互技术的总称。它通过图形化的方式把数据表现出来，方便用户进行观察和理解，并且帮助用户对数据进行探索，发现数据里隐藏的模式，获得对大量数据的理解和洞察力 可视化分析技术1、数据：数据是所有可视化分析的基础 2、模型：可以是某个方面的属性的统计值，也可以是复杂的数据挖掘和机器学习算法 3、可视化：结果一般依据模型的分析结果进行绘制 4、探索回路：描述的是分析者如何和可视分析系统进行交互，目的是生成新的可视化结果或者调整模型；它涉及两个方面，即动作和发现 5、验证回路 ：（1）假设 （2）理解和洞察力，洞察里定义为分析者对于上述的法相如何进行解释。在解释过程中，需要用到领域的先验知识 6、产生知识回路 第十一章 云计算平台云计算的概念与特点​ 概念：云计算也称为按需计算，它是对可配置的共享的计算资源池提供安迅存取的一种计算模型，这里的资源包括计算、储存、网络等硬件资源 ​ 特点：虚拟化、弹性、成本低廉、高度容错性和高度可靠性 ​ 云计算与并行计算、分布式计算、集群计算、网格计算的区别于联系： ​ 并行计算是相对串行计算而言，可以分为时间上和空间上的并行。 ​ 分布式计算通过把整个计算任务分解成一些列的小任务，分布到各个结点上计算分别执行，最后汇总结果。获得最终结果。 ​ 集群计算通过高速网络把一组本来松散联系的结点（计算机）通过软件紧密联系在一起，协作完成计算工作 ​ 网格计算在本章中算作集群计算的一种 ​ 云计算是上述技术的发展新阶段，器底层的核心技术是虚拟化，即把计算、储存、网络等硬件都进行虚拟化。 ​ 云计算强调子要你的利用率 虚拟化技术与数据中心虚拟化技术包括服务器虚拟化，储存虚拟化和网络虚拟化等重要内容 服务器虚拟化​ 指把一台物理服务器虚拟成若干独立的逻辑服务器，各个逻辑夫妻拥有自己的CPU,内存以及I/O设备。 ​ 储存虚拟化分为两种：寄居虚拟化以及裸机虚拟化（通俗而言，前者就是，在一个已经安装了操作系统的机器上安装VMM，后者则是直接在未安装操作系统的 机器上安装VMM，后者为轻量级） ​ 储存虚拟化​ 目的是把分散的、异构的储存设备，想办法映射成一个统一的、连续编址的逻辑储存空间，也叫虚拟存储池 ​ 三种实现方式：基于主机的存储虚拟化，基于储存设备的虚拟化、基于网络的储存虚拟化 网络虚拟化​ 网络虚拟化在不改变数据中心网络的物理拓扑和布线情况下，可以虚拟出各层网络，并实现互联，形成统一的交换架构。 ​ 网络虚拟化包括核心层、接入层以及虚拟机网络化三个层次 数据中心​ 数据中心主要特点和优势：通过服务器虚拟化、储存虚拟化、网络虚拟化、应用虚拟化技术，把各种硬件资源整合，对外提供服务，提高设备利用率。 ​ 数据中心一般采用冗余、容错、容灾设计 第十二章 Hadoop两个版本之间的区别与联系1.0版本的优势与局限：​ 优势是它的可拓展性。 ​ 局限是：1、仅支持一种计算模型，即MapReduce。2、MapReduce作业的Map阶段和Reduce阶段执行过程中需要通过磁盘的存取操作进行，效率低下。 ​ 3、调度方法远未达到优化资源利用率的效果 2.0版本的不同​ 新增YARN模块，将1.0中的resource management部分拿出来作为YARN的内容单独（把资源管理功能单独划分出来）。 ​ 支持更多的计算模型，包括流数据处理、图数据处理、批处理、交互式处理","categories":[{"name":"数据科学概论","slug":"数据科学概论","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%A6%82%E8%AE%BA/"}],"tags":[{"name":"期末复习","slug":"期末复习","permalink":"http://example.com/tags/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"}]},{"title":"leetcode-train-day-4","slug":"leetcode-train-day-4","date":"2021-01-04T06:31:32.000Z","updated":"2021-01-08T08:27:37.643Z","comments":true,"path":"2021/01/04/leetcode-train-day-4/","link":"","permalink":"http://example.com/2021/01/04/leetcode-train-day-4/","excerpt":"","text":"嗯，就这样，每日一题 斐波那契数，通常用 F(n) 表示，形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是： F(0) = 0，F(1) = 1F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1给你 n ，请计算 F(n) 。 示例 1： 输入：2输出：1解释：F(2) = F(1) + F(0) = 1 + 0 = 1示例 2： 输入：3输出：2解释：F(3) = F(2) + F(1) = 1 + 1 = 2示例 3： 输入：4输出：3解释：F(4) = F(3) + F(2) = 2 + 1 = 3 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/fibonacci-number著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 从今天开始，我觉得，不仅要做python的，也要做c语言的 然后今天的题目特别简单，是一道特别简单的题目；我首先想到的就是递归的写法 c语言解法 123456int fib(int n)&#123;if(n&lt;=1) return n;else return fib(n-1) + fib(n-2);&#125; python解法 123456class Solution:def fib(self, n: int) -&gt; int: if(n&lt;=1): return n else: return self.fib(n-2) + self.fib(n-1) 然后看了评论，递归 递归的写法似乎算法不是特别好，特别是用python的时候，时间复杂度和空间复杂度都比较大；然后官方给的方法是动态规划、矩阵快速幂、通项公式。并没有递归的方法；看来递归并不是这道题的最优解。 官方的动态规划理解的了，然后矩阵的不是很懂。再看看吧 要加油呀whk","categories":[{"name":"每日一题","slug":"每日一题","permalink":"http://example.com/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}],"tags":[{"name":"leetcode每日一题","slug":"leetcode每日一题","permalink":"http://example.com/tags/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]},{"title":"leetcode-train-day-2","slug":"leetcode-train-day-3","date":"2021-01-03T05:59:10.000Z","updated":"2021-01-08T08:35:13.378Z","comments":true,"path":"2021/01/03/leetcode-train-day-3/","link":"","permalink":"http://example.com/2021/01/03/leetcode-train-day-3/","excerpt":"","text":"今天登录进去leetcode里面才发现，原来昨天也没有打到卡，要打卡就要做日历里面的题目，所以今天我点的日历里的题目题目如下给你一个链表和一个特定值 x ，请你对链表进行分隔，使得所有小于 x 的节点都出现在大于或等于 x 的节点之前。 你应当保留两个分区中每个节点的初始相对位置。 示例： 输入：head = 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, x = 3输出：1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/partition-list著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 这道题一看就是数据结构的题目，本来我个人的意愿是刷python的习题的，然后这道数据结构的题目我不会用python 写毕竟没学过python的数据结构，不过还是得写的，我写了个c语言的；然后就去评论区看python的以及c语言是否有更好的算法；python的不能算是我自己写的吧，个人感觉更像是copy（唉），照猫画虎写的 c语言 12345678910111213141516171819202122232425262728/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * struct ListNode *next; * &#125;; */struct ListNode* partition(struct ListNode* head, int x)&#123; struct ListNode* pre = malloc(sizeof(struct ListNode)); struct ListNode* temp1 = pre; struct ListNode* p = malloc(sizeof(struct ListNode)); struct ListNode* temp2 = p; while (head != NULL) &#123; if (head-&gt;val &lt; x) &#123; pre-&gt;next = head; pre = pre-&gt;next; &#125; else &#123; p-&gt;next = head; p = p-&gt;next; &#125; head = head-&gt;next; &#125; p-&gt;next = NULL; pre-&gt;next = temp2-&gt;next; return temp1-&gt;next;&#125; python 1234567891011121314151617181920212223# Definition for singly-linked list.# class ListNode:# def __init__(self, x):# self.val = x# self.next = Noneclass Solution:def partition(self, head: ListNode, x: int) -&gt; ListNode: pre = ListNode(0) p = ListNode(0) temp1 = pre temp2 = p while head: if(head.val &lt; x): temp1.next = head temp1 = temp1.next else: temp2.next = head temp2 = temp2.next head = head.next temp1.next = p.next temp2.next = None return pre.next 然后python的我发现一个问题吧（抄都抄不对(⊙﹏⊙)），最后两个链表合成一个赋值语句顺序反了，导致最后答案与题目要求的答案有一定的出入，修改后没有了 总结：python的数据结构没有指针，不是很习惯，就酱d=====(￣▽￣*)b。","categories":[{"name":"每日一题","slug":"每日一题","permalink":"http://example.com/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}],"tags":[{"name":"leetcode每日一题","slug":"leetcode每日一题","permalink":"http://example.com/tags/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]},{"title":"leetcode_train_day_2","slug":"leetcode-train-day-2","date":"2021-01-02T09:47:16.000Z","updated":"2021-01-08T08:27:35.651Z","comments":true,"path":"2021/01/02/leetcode-train-day-2/","link":"","permalink":"http://example.com/2021/01/02/leetcode-train-day-2/","excerpt":"","text":"今天做的不是那个日历里的，随便在题库里找的超级简单的题目，回文数判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。 示例 1: 输入: 121输出: true示例 2: 输入: -121输出: false解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。示例 3: 输入: 10输出: false解释: 从右向左读, 为 01 。因此它不是一个回文数。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/palindrome-number著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 123class Solution:def isPalindrome(self, x: int) -&gt; bool: return str(x) == str(x)[::-1] 这个题目好早之前似乎是做过的，一看到就想起了切片这个功能，所以就直接一行代码写完了，但是时间复杂度和空间复杂度似乎是不够好的，还有很大的改进空间，似乎不用切片就可以写的更快。 最后溜啦！我去复习了","categories":[{"name":"每日一题","slug":"每日一题","permalink":"http://example.com/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}],"tags":[{"name":"leetcode每日一题","slug":"leetcode每日一题","permalink":"http://example.com/tags/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]},{"title":"leetcode_train_day_1","slug":"leetcode-train-day-1","date":"2021-01-02T09:46:59.000Z","updated":"2021-01-08T08:27:36.807Z","comments":true,"path":"2021/01/02/leetcode-train-day-1/","link":"","permalink":"http://example.com/2021/01/02/leetcode-train-day-1/","excerpt":"","text":"首先，第一天的是今天，也就是二号做的，昨天元旦我忘了所以今天补回来 假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。 给你一个整数数组 flowerbed 表示花坛，由若干 0 和 1 组成，其中 0 表示没种植花，1 表示种植了花。另有一个数 n ，能否在不打破种植规则的情况下种入 n 朵花？能则返回 true ，不能则返回 false。 示例 1： 输入：flowerbed = [1,0,0,0,1], n = 1输出：true示例 2： 输入：flowerbed = [1,0,0,0,1], n = 2输出：false 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/can-place-flowers著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 123456789class Solution:def canPlaceFlowers(self, flowerbed: List[int], n: int) -&gt; bool: temp = [0] + flowerbed + [0] for i in range(1,len(temp)-1): if((temp[i-1]==0) and (temp[i]==0) and (temp[i+1]==0)): temp[i] = 1 n -= 1 return n&lt;=0 也可以是通过三个判断条件，也就是判断开头，结尾，中间，是否可以种。开始我是这种思路。看完大佬的防御式编程后，发掘这个更加简单，于是尝试了这个，主要思路就是首尾，加一个；数据结构里面似乎可以叫哨兵。 后面还看了其他人的，然后有个人的分析了主要过程，似乎开始位置不用加哨兵也是可以的。但是我没有改进了，期末了，复习吧。今天就这样吧","categories":[{"name":"每日一题","slug":"每日一题","permalink":"http://example.com/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}],"tags":[{"name":"leetcode每日一题","slug":"leetcode每日一题","permalink":"http://example.com/tags/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]},{"title":"begin","slug":"begin","date":"2021-01-02T09:18:22.000Z","updated":"2021-04-01T01:01:49.284Z","comments":true,"path":"2021/01/02/begin/","link":"","permalink":"http://example.com/2021/01/02/begin/","excerpt":"","text":"这是我在上次丢失文件后再次创建的个人博客，也没有啥说的吧就算是个新的开始吧；然后博客还没搞好，先凑合一下吧","categories":[],"tags":[{"name":"闲话","slug":"闲话","permalink":"http://example.com/tags/%E9%97%B2%E8%AF%9D/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-01-02T07:20:48.704Z","updated":"2021-01-02T07:20:48.705Z","comments":true,"path":"2021/01/02/hello-world/","link":"","permalink":"http://example.com/2021/01/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"每日一题","slug":"每日一题","permalink":"http://example.com/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"},{"name":"马克思主义原理","slug":"马克思主义原理","permalink":"http://example.com/categories/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%8E%9F%E7%90%86/"},{"name":"数据科学概论","slug":"数据科学概论","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%A6%82%E8%AE%BA/"}],"tags":[{"name":"期末复习","slug":"期末复习","permalink":"http://example.com/tags/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"},{"name":"leetcode每日一题","slug":"leetcode每日一题","permalink":"http://example.com/tags/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"},{"name":"闲话","slug":"闲话","permalink":"http://example.com/tags/%E9%97%B2%E8%AF%9D/"}]}