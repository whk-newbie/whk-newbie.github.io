<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>whks-blog</title>
  
  
  <link href="https://www.whkblog.work/atom.xml" rel="self"/>
  
  <link href="https://www.whkblog.work/"/>
  <updated>2022-04-19T02:02:07.026Z</updated>
  <id>https://www.whkblog.work/</id>
  
  <author>
    <name>whk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>闲话</title>
    <link href="https://www.whkblog.work/2022/04/18/%E9%97%B2%E8%AF%9D/"/>
    <id>https://www.whkblog.work/2022/04/18/%E9%97%B2%E8%AF%9D/</id>
    <published>2022-04-18T12:11:20.000Z</published>
    <updated>2022-04-19T02:02:07.026Z</updated>
    
    <content type="html"><![CDATA[<p>今天又开始继续写两个月前开的前后端分离项目，写了一下午，可算是把新闻模块给搞定了。后端api做完了(?)，不知道啥问题，就是明明图片地址都是正确的，还是拿不到数据。就先不管了，就这样吧，明天争取将前端的新闻模块也搞定（主要是换了个思路，以前都是模仿院官网，神经病！我干嘛还要分两种新闻类别，不都是新闻，搞得我后台重复写）。就酱</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天又开始继续写两个月前开的前后端分离项目，写了一下午，可算是把新闻模块给搞定了。后端api做完了(?)，不知道啥问题，就是明明图片地址都是正确的，还是拿不到数据。就先不管了，就这样吧，明天争取将前端的新闻模块也搞定（主要是换了个思路，以前都是模仿院官网，神经病！我干嘛还要</summary>
      
    
    
    
    
    <category term="碎碎念" scheme="https://www.whkblog.work/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>sort()的一个小点</title>
    <link href="https://www.whkblog.work/2022/04/14/sort%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%82%B9/"/>
    <id>https://www.whkblog.work/2022/04/14/sort%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%82%B9/</id>
    <published>2022-04-14T08:02:51.000Z</published>
    <updated>2022-04-14T12:35:05.404Z</updated>
    
    <content type="html"><![CDATA[<p>今天看一篇python面试真题的时候，有一道题</p><p>内容如下：</p><p><strong>s = “ajldjlajfdljfddd”，去重并从小到大排序输出”adfjl”</strong></p><p>我比较懒，就直接套写了</p><p><img src="https://www.whkblog.work/blog/images/image-20220414160607433.png" alt="image-20220414160607433"></p><p>这里报错是说join智能套用在可迭代的数据类型，</p><p>但是如果分开写的话就可以了</p><p><img src="https://www.whkblog.work/blog/images/image-20220414160823118.png" alt="image-20220414160823118"></p><p>这里的话我上网查了一下，是sort函数的问题，sort只对列表本身排序，它没有返回值</p><p>所以你直接套在里面写，就相当于给join一个空值，这当然是没有用的，控制不可迭代。</p><p>分开写就相当于先排序了，然后传进去</p><p>正确的想法应该是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;ajldjlajfdljfddd&#x27;</span></span><br><span class="line">s = <span class="built_in">list</span>(<span class="built_in">set</span>(s)).sort()</span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(s))</span><br></pre></td></tr></table></figure><p>或者使用sorted()这个是可迭代的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;&quot;</span>.join(<span class="built_in">sorted</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(s)))))</span><br></pre></td></tr></table></figure><p>然后就这样</p><p>同样的的数组中的extend也是如此，没有返回值</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天看一篇python面试真题的时候，有一道题&lt;/p&gt;
&lt;p&gt;内容如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;s = “ajldjlajfdljfddd”，去重并从小到大排序输出”adfjl”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我比较懒，就直接套写了&lt;/p&gt;
&lt;p&gt;&lt;img src</summary>
      
    
    
    
    <category term="杂七杂八" scheme="https://www.whkblog.work/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
    <category term="python" scheme="https://www.whkblog.work/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SortingAlgorithm</title>
    <link href="https://www.whkblog.work/2022/04/12/SortingAlgorithm/"/>
    <id>https://www.whkblog.work/2022/04/12/SortingAlgorithm/</id>
    <published>2022-04-12T12:42:18.000Z</published>
    <updated>2022-04-12T13:42:39.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础的排序算法"><a href="#基础的排序算法" class="headerlink" title="基础的排序算法"></a>基础的排序算法</h1><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><p>思路：默认文件第一个记录为已排序，将第2个到第n个记录依次插入到已排序的记录组成的文件中。</p><table><thead><tr><th align="center">312，126，272，226，28，165，123</th></tr></thead><tbody><tr><td align="center">[312]，126，272，226，28，165，123</td></tr><tr><td align="center">[126, 312]，272，226，28，165，123</td></tr><tr><td align="center">[126，272, 312]，226，28，165，123</td></tr><tr><td align="center">…</td></tr></tbody></table><p>在面对第一个值是全部数据中最小的数据时，每次比较是都需要判断是否记录，会比较耗时，否则会出现越界问题。解决方法是在最前面插入一个值，作为哨兵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span>(<span class="params">self, <span class="built_in">list</span></span>):</span>  </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    直接插入排序</span></span><br><span class="line"><span class="string">    :param list: 需要排序的列表</span></span><br><span class="line"><span class="string">    :return: list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">list</span>[j] &lt; <span class="built_in">list</span>[j - <span class="number">1</span>]:</span><br><span class="line">                <span class="built_in">list</span>[j], <span class="built_in">list</span>[j - <span class="number">1</span>] = <span class="built_in">list</span>[j - <span class="number">1</span>], <span class="built_in">list</span>[j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这里是没有设置哨兵的形式！！！</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="二分法插入排序"><a href="#二分法插入排序" class="headerlink" title="二分法插入排序"></a>二分法插入排序</h3><p>二分法插入排序是直接插入排序的升级，每次插入时，前 <em>i-1</em>个都时有序的了。将记录的排序码<em>list[i]*和已排序的前 *i-1</em>个的中间位置进行比较，如果小于则在前半部分继续使用二分法，否则在后半部分使用二分法；一直到查找范围都是空的时候，即可确定key[i]的插入位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_sort</span>(<span class="params">self, <span class="built_in">list</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    二分法插入排序</span></span><br><span class="line"><span class="string">    :param list: 需要排序的列表</span></span><br><span class="line"><span class="string">    :return: list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">        low = <span class="number">0</span></span><br><span class="line">        high = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">list</span>[mid] &gt; <span class="built_in">list</span>[i]:</span><br><span class="line">                high = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, low, -<span class="number">1</span>):</span><br><span class="line">            <span class="built_in">list</span>[j] = <span class="built_in">list</span>[j - <span class="number">1</span>]</span><br><span class="line">        <span class="built_in">list</span>[low] = <span class="built_in">list</span>[i]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span></span><br></pre></td></tr></table></figure><h3 id="表插入排序"><a href="#表插入排序" class="headerlink" title="表插入排序"></a>表插入排序</h3><p>表插入排序改变了实现方式，在前两个排序算法中，都是通过改变内存的值来排序的，表插入排序方式则是不同，它是通过改变指针域（相对有指针的语言来讲）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># define a record type</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">recordtype</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.key = <span class="literal">None</span></span><br><span class="line">        self.link = <span class="literal">None</span></span><br><span class="line">        self.other = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">table</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, maxsize</span>):</span></span><br><span class="line">        self.r = recordtype * (maxsize + <span class="number">1</span>)</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tableinsertsort</span>(<span class="params">self, <span class="built_in">list</span></span>):</span></span><br><span class="line">        self.r[<span class="number">0</span>].link = <span class="number">1</span> <span class="comment"># 初始化</span></span><br><span class="line">        self.r[<span class="number">1</span>].link = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">            q = <span class="number">0</span></span><br><span class="line">            p = self.r[<span class="number">0</span>].link</span><br><span class="line">            <span class="keyword">while</span> p != <span class="literal">None</span> <span class="keyword">and</span> self.r[i] &gt;= self.r[p].key: <span class="comment"># 找到插入位置</span></span><br><span class="line">                q = p</span><br><span class="line">                p = self.r[p].link </span><br><span class="line">            self.r[i].link = p <span class="comment"># 将新元素插入到p的前面</span></span><br><span class="line">            self.r[q].link = i</span><br></pre></td></tr></table></figure><h3 id="shell插入排序"><a href="#shell插入排序" class="headerlink" title="shell插入排序"></a>shell插入排序</h3><p>shell排序算法由D.L.Shell 提出，又称缩小增量排序算法。 主要思路就是按照某种规律将表分成若干组，然后若干组各自排序完后再从新分组排序（注：每次分组数目会减少），这样重复的做，直到分组数为1再进行一次插入排序就完成排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shellinsertsord</span>(<span class="params">self, <span class="built_in">list</span></span>):</span></span><br><span class="line">    d = self.size // <span class="number">2</span> <span class="comment"># 分组个数</span></span><br><span class="line">    <span class="keyword">while</span> d &gt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(d + <span class="number">1</span>, self.size):</span><br><span class="line">            j = i - d</span><br><span class="line">            <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> self.r[<span class="number">0</span>].key &lt; self.r[j].key:</span><br><span class="line">                self.r[j + d] = self.r[j]</span><br><span class="line">                j -= d</span><br><span class="line">            self.r[j + d] = self.r[<span class="number">0</span>]</span><br><span class="line">        d = d // <span class="number">2</span></span><br></pre></td></tr></table></figure><p>shell跟表插入排序都是针对有指针操作的语言而言来讲，相对于直接与二分直接这两种快的，但对于python而言，这两种都是脱裤子放屁的行为</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h3><h3 id="树型选择排序"><a href="#树型选择排序" class="headerlink" title="树型选择排序"></a>树型选择排序</h3><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><h2 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础的排序算法&quot;&gt;&lt;a href=&quot;#基础的排序算法&quot; class=&quot;headerlink&quot; title=&quot;基础的排序算法&quot;&gt;&lt;/a&gt;基础的排序算法&lt;/h1&gt;&lt;h2 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="杂七杂八" scheme="https://www.whkblog.work/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
    <category term="python" scheme="https://www.whkblog.work/tags/python/"/>
    
    <category term="排序算法" scheme="https://www.whkblog.work/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据库优化</title>
    <link href="https://www.whkblog.work/2022/04/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/"/>
    <id>https://www.whkblog.work/2022/04/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/</id>
    <published>2022-04-07T12:59:14.000Z</published>
    <updated>2022-04-19T02:06:00.147Z</updated>
    
    <content type="html"><![CDATA[<p>对于 数据库查询语句而言，都是大差不差的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">DISTINCT</span> <span class="operator">&lt;</span><span class="keyword">select</span> list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">join</span> type<span class="operator">&gt;</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span><span class="keyword">join</span> <span class="keyword">condition</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="operator">&lt;</span>wherer <span class="keyword">condition</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span><span class="keyword">group</span> <span class="keyword">by</span> list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="operator">&lt;</span><span class="keyword">having</span> <span class="keyword">condition</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">condition</span><span class="operator">&gt;</span></span><br><span class="line">LIMIT <span class="operator">&lt;</span>limit number<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h1 id="数据库的查询优化"><a href="#数据库的查询优化" class="headerlink" title="数据库的查询优化"></a>数据库的查询优化</h1><h3 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h3><p>查询优化分为代数优化和物理优化；代数优化是指关系代数表达式的优化，既按照一定的规则，通过对关系代数进行等价交换，改变代数表达式中操作的次序和组合，使查询更高效；物理优化，则是指存取路径和底层操作算法的选择。选择的一句可以是基于规则的，也可以是基于代价的，还可以是基于语义的</p><p>对于物理层面来讲的话，是设计数据人员需要考虑的，对于开发者而言，主要的优化就是代数优化了</p><p>对于查询语句的优化，主要遵循以下五个原则</p><ol><li>减少数据访问： 设置合理的字段类型，启用压缩，通过索引访问等减少磁盘IO</li><li>返回更少的数据： 只返回需要的字段和数据分页处理 减少磁盘io及网络io</li><li>减少交互次数： 批量DML操作，函数存储等减少数据连接次数</li><li>减少服务器CPU开销： 尽量减少数据库排序操作以及全表查询，减少cpu 内存占用</li><li>利用更多资源： 使用表分区，可以增加并行操作，更大限度利用cpu资源</li></ol><p>总结而言，就是要最大化的利用索引，比米娜全表扫描的操作，减少无效数据的查询</p><h2 id="SQL优化策略"><a href="#SQL优化策略" class="headerlink" title="SQL优化策略"></a>SQL优化策略</h2><p>【优化总结口诀】<br>        全值匹配我最爱，最左前缀要遵守；<br>        带头大哥不能死，中间兄弟不能断；<br>        索引列上少计算，范围之后全失效；<br>        Like百分写最右，覆盖索引不写星；<br>        不等空值还有or，索引失效要少用；<br>        VAR引号不可丢，SQL高级也不难！</p><p>对于SQL的优化而言，一般而言都是适用于较大的场景</p><h3 id="避免不走索引的场景"><a href="#避免不走索引的场景" class="headerlink" title="避免不走索引的场景"></a>避免不走索引的场景</h3><p>避免在字段开头模糊查询，尽量在字段后面使用模糊查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> T <span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> &quot;%陈%&quot;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> T <span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> &quot;陈%&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于 数据库查询语句而言，都是大差不差的&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    <category term="杂七杂八" scheme="https://www.whkblog.work/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
    <category term="数据库" scheme="https://www.whkblog.work/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>DataStructure</title>
    <link href="https://www.whkblog.work/2022/04/06/DataStructure/"/>
    <id>https://www.whkblog.work/2022/04/06/DataStructure/</id>
    <published>2022-04-06T07:50:48.000Z</published>
    <updated>2022-04-12T08:24:56.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构复习"><a href="#数据结构复习" class="headerlink" title="数据结构复习"></a>数据结构复习</h1><p>数据结构分为线性结构和非线性结构</p><p>线性结构有：线性表、栈、队列、数组、</p><p>非线性结构：树形结构、图形结构、集合结构</p><p><img src="https://img2.baidu.com/it/u=3942158718,1762626381&fm=253&fmt=auto&app=138&f=PNG?w=545&h=298"></p><h1 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h1><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>线性表是一个线性结构，它是一个含有n≥0个节点的有限序列</p><p>线性表在计算机中存储基本上是采用了顺序存储和链式存储两种方式</p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>线性表采用顺序存储的方式存储就称为顺序表。这个顺序表在python中我感觉就是列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SequList</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模拟实现顺序表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.data = []</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, index, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        插入顺序表</span></span><br><span class="line"><span class="string">        :param index: 插入位置</span></span><br><span class="line"><span class="string">        :param value:  插入值</span></span><br><span class="line"><span class="string">        :return: 无</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt; self.size:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;index out of range&quot;</span>)</span><br><span class="line">        self.data.insert(index, value)</span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        打印顺序表内容</span></span><br><span class="line"><span class="string">        :return: 无</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.size == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;list is empty&quot;</span>)</span><br><span class="line">        print(self.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        查找顺序表中是否存在某个值</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.size == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;list is empty&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">in</span> self.data:</span><br><span class="line">            <span class="keyword">return</span> self.data.index(value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        删除顺序表内容</span></span><br><span class="line"><span class="string">        :param index:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt; self.size:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;index out of range&quot;</span>)</span><br><span class="line">        self.data.pop(index)</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈是一种特殊的线性表，特殊的地方在于插入和删除都是在表的同一端进行，插入称为进栈，删除称为出栈，具有<strong>先进后出</strong>的特点这里我使用python模拟实现了一下栈。</p><p><em>栈可用于子程序的条用，处理递归条用，表达式的转换与求职，后面二叉树的遍历也是需要使用到的，在图的DFS(深度优先遍历)也是需要的</em></p><p>但是，我上网查询了一下关于python栈的问题，有一个heapq的内置堆栈库可以用来是实现栈。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">stack</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模拟实现那堆栈</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.data = []</span><br><span class="line">        self.top = <span class="number">0</span>  <span class="comment"># 栈顶指针</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_top_val</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取栈顶值</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.top == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;stack is empty&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.data[self.top - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        压栈</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.data.append(value)</span><br><span class="line">        self.top += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        出栈</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.top == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;stack is empty&quot;</span>)</span><br><span class="line">        self.top -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.data.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        打印栈内容</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.top == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;stack is empty&quot;</span>)</span><br><span class="line">        print(self.data)</span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列也是一种特殊的线性表，它是<strong>先进先出</strong>，一端为出口，一端为进口，插入删除分别称为入队和出队</p><p>下面是我使用python模拟实现的队列,</p><p>实际上来说python官方是自带一个Queue的库的，实际使用时直接调用就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">queue</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模拟实现队列</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.data = []</span><br><span class="line">        self.front = <span class="number">0</span></span><br><span class="line">        self.rear = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        入队</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.data.append(value)</span><br><span class="line">        self.rear += <span class="number">1</span>  <span class="comment"># 入队</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        出队</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.front == self.rear:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;queue is empty&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.front += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        打印队列内容</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.front == self.rear:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;queue is empty&quot;</span>)</span><br><span class="line">        print(self.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_front_val</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取队首</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.front == self.rear:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;queue is empty&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.data[self.front]</span><br></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表是线性表的链式实现方式，对于链表，数据存储在一个结点当中，一个结点分为两个部分，一个是data一个是索引next（指向下一个结点），在c语言中就是一个指针指向下一个结点的地址</p><p>python中模拟实现结点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    定义结点</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.data = value</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>python中实现单链表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模式实现单链表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, node=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.head = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">length</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取链表长度</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        length = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> self.head:</span><br><span class="line">            self.head = self.head.<span class="built_in">next</span></span><br><span class="line">            length += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, value, index</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        在链表指定位置插入值为value的结点</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :param index:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt; self.length():</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;index out of range&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">            self.head = Node(value)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index - <span class="number">1</span>):</span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line">        node.<span class="built_in">next</span> = Node(value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        删除指定位置的结点</span></span><br><span class="line"><span class="string">        :param index:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt; self.length():</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;index out of range&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index - <span class="number">1</span>):</span><br><span class="line">            self.head = self.head.<span class="built_in">next</span></span><br><span class="line">        self.head.<span class="built_in">next</span> = self.head.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        打印单链表</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.head:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;list is empty&quot;</span>)</span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            print(node.data)</span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>链表不止有单链表，还有双链表（拥有两个指针，分别指向前后结点）啥的</p><h1 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a>非线性结构</h1><p>对于非线性结构，与链表非常相似，数据都是存储在结点中，每个结点还有多个指针指向其他结点</p><p>由于本文是使用python来模拟实现，在实际开发的时候，不推荐使用这种结构，毕竟python本身就以及比较慢了（相交其他语言来说），而且python官方也是推荐使用列表、字典等数据结构来解决问题</p><p><a href="https://github.com/keon/algorithms,%E8%BF%99%E4%B8%AAgithub%E4%BB%93%E5%BA%93%E9%87%8C%E9%9D%A2%E4%B9%9F%E6%9C%89python%E7%B1%BB%E7%9A%84%E5%90%84%E7%A7%8D%E7%AE%97%E6%B3%95">https://github.com/keon/algorithms,这个github仓库里面也有python类的各种算法</a></p><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p>是由<em>n(n≥0</em>)个有限节点组成一个具有层次关系的<a href="https://baike.baidu.com/item/%E9%9B%86%E5%90%88/2908117">集合</a>。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：</p><p>每个节点有零个或多个子节点；没有父节点的节点称为根节点；每一个非根节点有且只有一个父节点；除了根节点外，每个子节点可以分为多个不相交的子树。</p><p>树（<em>tree</em>）是包含 n(n≥0) [2] 个节点，当 n=0 时，称为空树，非空树中</p><p><img src="https://bkimg.cdn.bcebos.com/formula/978ecf3f98f22ff38e1cf0a9fcdd46c3.svg" alt="img"></p><p>条边的有穷集，在非空树中：</p><p>（1）每个元素称为节点（*<a href="https://baike.baidu.com/item/node/4689680">node</a>*）。</p><p>（2）有一个特定的节点被称为根节点或树根（*<a href="https://baike.baidu.com/item/root/73226">root</a>*）。</p><p>（3）除根节点之外的其余数据元素被分为</p><p><img src="https://bkimg.cdn.bcebos.com/formula/6576249470c12096c755423254a81ac5.svg" alt="img"></p><p>个互不相交的集合</p><p><img src="https://bkimg.cdn.bcebos.com/formula/77b7f3b103abcd51d5447c6c4b721e76.svg" alt="img"></p><p>，其中每一个集合</p><p><img src="https://bkimg.cdn.bcebos.com/formula/4a6a0815df2fe3a069937f66bd9dc0d9.svg" alt="img"></p><p>本身也是一棵树，被称作原树的子树（<em>subtree</em>）。</p><p>树常用3种表示方法：双亲表示法、孩子表示法和孩子双亲表示法</p><p>我校教程中，主要是介绍的二叉树及其变种，不过我这里使用B树开始打头（主要为了面试，看的面经中，B树什么的更多）</p><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><p>B树（B-树）一种平衡多路查找，在大多数的</p><p>（Self-balancing search trees)，比如 AVL 树 和红黑树，都假设所有的数据放在主存当中.</p><h3 id="B-树的特性"><a href="#B-树的特性" class="headerlink" title="B 树的特性"></a><strong>B 树的特性</strong></h3><ol><li>所有的叶子结点都出现在同一层上，并且不带信息(可以看做是外部结点或查找失败的结点，实际上这些结点不存在，指向这些结点的指针为空)。</li><li>每个结点包含的关键字个数有上界和下界。用一个被称为 B-树的 <strong>最小度数</strong> 的固定整数 <img src="https://www.zhihu.com/equation?tex=t+%5Cge+2" alt="[公式]"> 来表示这些界 ，其中 <img src="https://www.zhihu.com/equation?tex=t" alt="[公式]"> 取决于磁盘块的大小：<br>a.除根结点以外的每个结点必须至少有 <img src="https://www.zhihu.com/equation?tex=t-1" alt="[公式]"> 个关键字。因此，除了根结点以外的每个内部结点有 t 个孩子。如果树非空，根结点至少有一个关键字。<br>b. 每个结点至多包含 <img src="https://www.zhihu.com/equation?tex=2t+-1" alt="[公式]"> 个关键字。</li><li>一个包含 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 个关键字的结点有 <img src="https://www.zhihu.com/equation?tex=x+1" alt="[公式]"> 个孩子；</li><li>一个结点中的所有关键字升序排列，两个关键字 <img src="https://www.zhihu.com/equation?tex=k_1" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=k_2" alt="[公式]"> 之间的孩子结点的所有关键字 key 在 <img src="https://www.zhihu.com/equation?tex=(k_1,k_2)" alt="[公式]"> 的范围之内。</li><li>与二叉排序树不同， B-树的搜索是从根结点开始，根据结点的孩子树做多路分支选择，而二叉排序树做的是二路分支选择，每一次判断都会进行一次磁盘 I/O操作。</li><li>与其他平很二叉树类似，B-树查找、插入和删除操作的时间复杂度为 <img src="https://www.zhihu.com/equation?tex=O(%5Clog+n)" alt="[公式]"> 量级。</li></ol><h3 id="树结点类"><a href="#树结点类" class="headerlink" title="树结点类"></a>树结点类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    树结点</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.data = value</span><br><span class="line">        self.children = []</span><br><span class="line">       </span><br></pre></td></tr></table></figure><h3 id="B树python模拟实现"><a href="#B树python模拟实现" class="headerlink" title="B树python模拟实现"></a>B树python模拟实现</h3><p>对于树而言，主要操作就是增删改查，遍历以及求树的高度深度叶子结点啥的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BTree</span>:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">模拟实现B树</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,node=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.root = node</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        插入</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">            self.root = TreeNode(value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.insert_node(self.root, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_node</span>(<span class="params">self, node, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        插入结点</span></span><br><span class="line"><span class="string">        :param node:</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> value &lt; node.data:</span><br><span class="line">            <span class="keyword">if</span> node.children:</span><br><span class="line">                self.insert_node(node.children[<span class="number">0</span>], value)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node.children.append(TreeNode(value))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> node.children:</span><br><span class="line">                self.insert_node(node.children[-<span class="number">1</span>], value)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node.children.append(TreeNode(value))</span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        删除</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;tree is empty&quot;</span>)</span><br><span class="line">        self.delete_node(self.root, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_node</span>(<span class="params">self, node, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        删除结点</span></span><br><span class="line"><span class="string">        :param node:</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> node.data == value:</span><br><span class="line">            node.data = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> node.children:</span><br><span class="line">            <span class="keyword">if</span> self.delete_node(child, value):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;value not found&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        查找</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;tree is empty&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.search_node(self.root, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_node</span>(<span class="params">self, node, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        查找结点</span></span><br><span class="line"><span class="string">        :param node:</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> node.data == value:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> node.children:</span><br><span class="line">            <span class="keyword">if</span> self.search_node(child, value):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span> <span class="comment"># 这里就没有写一个改了，改感觉和展示，查差不多</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        打印</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;tree is empty&quot;</span>)</span><br><span class="line">        self.display_node(self.root)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display_node</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        打印结点</span></span><br><span class="line"><span class="string">        :param node:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        print(node.data)</span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> node.children:</span><br><span class="line">            self.display_node(child)</span><br></pre></td></tr></table></figure><p>然后这边是树的遍历，一般而言，树的遍历分为前序遍历、中序遍历、后序遍历、以及层次遍历，</p><p>这几个遍历都是故名思意的，从树的前面（根）开始，从中间开始（一般来说是最左的那个结点，在我看来，感觉和后续遍历没什么区别）、从后面（叶子结点开始），层次遍历就是一层一层，从根到叶子。对于树的遍历来说，可以使用递归和非递归，这里就使用递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pre_order</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       先序遍历</span></span><br><span class="line"><span class="string">       :return:</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">           <span class="keyword">raise</span> Exception(<span class="string">&quot;tree is empty&quot;</span>)</span><br><span class="line">       self.pre_order_node(self.root)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">pre_order_node</span>(<span class="params">self, node</span>):</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       先序遍历结点</span></span><br><span class="line"><span class="string">       :param node:</span></span><br><span class="line"><span class="string">       :return:</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">           <span class="keyword">return</span></span><br><span class="line">       print(node.data)</span><br><span class="line">       <span class="keyword">for</span> child <span class="keyword">in</span> node.children:</span><br><span class="line">           self.pre_order_node(child)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">in_order</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       中序遍历</span></span><br><span class="line"><span class="string">       :return:</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">           <span class="keyword">raise</span> Exception(<span class="string">&quot;tree is empty&quot;</span>)</span><br><span class="line">       self.in_order_node(self.root)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">in_order_node</span>(<span class="params">self, node</span>):</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       中序遍历结点</span></span><br><span class="line"><span class="string">       :param node:</span></span><br><span class="line"><span class="string">       :return:</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">           <span class="keyword">return</span></span><br><span class="line">       <span class="keyword">for</span> child <span class="keyword">in</span> node.children:</span><br><span class="line">           self.in_order_node(child)</span><br><span class="line">       print(node.data)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">post_order</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       后序遍历</span></span><br><span class="line"><span class="string">       :return:</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">           <span class="keyword">raise</span> Exception(<span class="string">&quot;tree is empty&quot;</span>)</span><br><span class="line">       self.post_order_node(self.root)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">post_order_node</span>(<span class="params">self, node</span>):</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       后序遍历结点</span></span><br><span class="line"><span class="string">       :param node:</span></span><br><span class="line"><span class="string">       :return:</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">           <span class="keyword">return</span></span><br><span class="line">       <span class="keyword">for</span> child <span class="keyword">in</span> node.children:</span><br><span class="line">           self.post_order_node(child)</span><br><span class="line">       print(node.data)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">level_order</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       层序遍历</span></span><br><span class="line"><span class="string">       :return:</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">           <span class="keyword">raise</span> Exception(<span class="string">&quot;tree is empty&quot;</span>)</span><br><span class="line">       self.level_order_node(self.root)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">level_order_node</span>(<span class="params">self, node</span>):</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       层序遍历结点</span></span><br><span class="line"><span class="string">       对于层次遍历而言，这里需要注意，需先将当前一层的数据遍历完再进行下一层</span></span><br><span class="line"><span class="string">       可以使用队列来实现，在遍历某一结点的同时，将其子结点添加到队列的后面。</span></span><br><span class="line"><span class="string">       如果需要把每一层的数据都分割开，可以在每次while循环时，获取到当前队列的大小，然后通过for循环开始当前一层</span></span><br><span class="line"><span class="string">       :param node:</span></span><br><span class="line"><span class="string">       :return:</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">           <span class="keyword">return</span></span><br><span class="line">       queue = [node]  </span><br><span class="line">       <span class="keyword">while</span> queue:</span><br><span class="line">           <span class="comment"># temp = []</span></span><br><span class="line">           <span class="comment"># for i in range(queue.size()):</span></span><br><span class="line">           node = queue.pop(<span class="number">0</span>)</span><br><span class="line">           print(node.data) <span class="comment">#temp.append(node.data)</span></span><br><span class="line">           <span class="keyword">for</span> child <span class="keyword">in</span> node.children:</span><br><span class="line">               queue.append(child)</span><br><span class="line">           <span class="comment"># print(temp) or ans.append(temp)</span></span><br></pre></td></tr></table></figure><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><p><strong>B+树</strong>是在B树的基础上基础上进行改造，它的数据都在叶子节点，<strong>同时叶子节点之间还加了指针形成链表</strong></p><ul><li>有k个子结点的结点必然有k个关键码；</li><li>非叶结点仅具有索引作用，跟记录有关的信息均存放在叶结点中。</li><li>树的所有叶结点构成一个有序链表，可以按照关键码排序的次序遍历全部记录，便于区间查找和遍历。</li><li>B+ 树的优点在于：由于B+树在内部节点上不包含数据信息，因此在内存页中能够存放更多的key。 数据存放的更加紧密，具有更好的空间局部性。因此访问叶子节点上关联的数据也具有更好的缓存命中率。B+树的叶子结点都是相连的，因此对整棵树的便利只需要一次线性遍历叶子结点即可。</li></ul><p>这里我就没对B+树进行模拟了</p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p>图是一种较线性表和树更加复杂的数据结构。在图形结构中，结点之间的关系可以是任意的，图中任意两个数据元素之间都可能相关。</p><p>图(Graph)是由顶点的有穷非空集合V ( G ) V(G)V(G)和顶点之间边的集合E ( G ) E(G)E(G)组成，通常表示为: G = ( V , E ) G=(V,E)G=(V,E)，其中，G GG表示个图，V VV是图G GG中顶点的集合，E EE是图G GG中边的集合。若V = { v 1 , v 2 , . . . , v n } V= {v_1, v_2,…,v_n}V={v 1 ,v 2,…,v n}，则用∣ V ∣ |V|∣V∣表示图G GG中顶点的个数，也称图G GG的阶，E = { ( u , v ) ∣ u ∈ V , v ∈ V } E= {(u, v) |u∈V, v∈V}E={(u,v)∣u∈V,v∈V}，用∣ E ∣ |E|∣E∣表示图G GG中边的条数。</p><p>图分为有向图和无向图。二者的区别就是，对于某两个节点之间的连接是否有向，例如a-&gt;b 于a-b</p><p><img src="https://img-blog.csdnimg.cn/20210227111745661.png#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/20210227112230368.png#pic_center"></p><p>对于图而言，通常都是采用邻接矩阵/邻接表来存储图的信息</p><p>一般而言，<strong>一个一维数组存储图中顶点信息，一个二维数组(称为邻接矩阵)存储图中的边或弧的信息。</strong></p><h3 id="模拟实现"><a href="#模拟实现" class="headerlink" title="模拟实现"></a>模拟实现</h3><h4 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Vertex</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    顶点类</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    边类</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, start_vertex, end_vertex</span>):</span></span><br><span class="line">        self.start = start_vertex</span><br><span class="line">        self.end = end_vertex</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="基础功能实现"><a href="#基础功能实现" class="headerlink" title="基础功能实现"></a>基础功能实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模拟实现图</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, vertex_num</span>):</span></span><br><span class="line">        self.vertex_num = vertex_num  <span class="comment"># 顶点数</span></span><br><span class="line">        self.vertex_list = []  <span class="comment"># 顶点列表</span></span><br><span class="line">        self.edge_num = <span class="number">0</span>  <span class="comment"># 边数</span></span><br><span class="line">        self.edge_list = []  <span class="comment"># 边列表</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_vertex</span>(<span class="params">self, vertex</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        添加顶点</span></span><br><span class="line"><span class="string">        :param vertex:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.vertex_list.append(vertex)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge</span>(<span class="params">self, edge</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        添加边</span></span><br><span class="line"><span class="string">        :param edge:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.edge_list.append(edge)</span><br><span class="line">        self.edge_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_vertex_num</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取顶点数</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.vertex_num</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_edge_num</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取边数</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.edge_num</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_vertex_list</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取顶点列表</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.vertex_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_edge_list</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取边列表</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.edge_list</span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>对于图而言，有两种遍历方式，一种是深度优先遍历，一种是广度优先遍历</p><p><strong>深度优先遍历</strong>(DFS)类似于树的先序遍历。如其名称中所暗含的意思一样，这种搜索算法所遵循的搜索策略是尽可能“深”地搜索一个图。</p><p><strong>广度优先遍历</strong>(BFS)是一种分层的查找过程，每向前走一步可能访问一批顶点，不像深度优先搜索那样有往回退的情况，因此它不是一个递归的算法。</p><p>二者都是指定一个开始节点，然后进行遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">self, start_vertex</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    深度优先遍历</span></span><br><span class="line"><span class="string">    :param start_vertex:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.vertex_list:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;vertex list is empty&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.edge_list:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;edge list is empty&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> start_vertex <span class="keyword">not</span> <span class="keyword">in</span> self.vertex_list:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;start vertex is not in vertex list&quot;</span>)</span><br><span class="line">    visited = [<span class="literal">False</span>] * self.vertex_num</span><br><span class="line">    self.dfs_node(start_vertex, visited)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span>(<span class="params">self, start_vertex</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    广度优先遍历</span></span><br><span class="line"><span class="string">    :param start_vertex:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> start_vertex:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;start_vertex is empty&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> start_vertex <span class="keyword">not</span> <span class="keyword">in</span> self.vertex_list:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;start_vertex is not in vertex_list&quot;</span>)</span><br><span class="line">    visited = [<span class="literal">False</span>] * self.vertex_num</span><br><span class="line">    que = [start_vertex]</span><br><span class="line">    visited[start_vertex] = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> que:</span><br><span class="line">        vertex = que.pop(<span class="number">0</span>)</span><br><span class="line">        print(vertex)</span><br><span class="line">        <span class="keyword">for</span> edge <span class="keyword">in</span> self.edge_list:</span><br><span class="line">            <span class="keyword">if</span> edge.start_vertex == vertex <span class="keyword">and</span> <span class="keyword">not</span> visited[edge.end_vertex]:</span><br><span class="line">                que.append(edge.end_vertex)</span><br><span class="line">                visited[edge.end_vertex] = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>这里我还利用了一下python的可视化，写了个展示图关系的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw_graph</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        利用python可视化，画出图的结构</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        G = nx.Graph()</span><br><span class="line">        <span class="keyword">for</span> edge <span class="keyword">in</span> self.edge_list:</span><br><span class="line">            G.add_edge(edge.start, edge.end)</span><br><span class="line">        pos = nx.spring_layout(G)</span><br><span class="line">        nx.draw(G, pos, with_labels=<span class="literal">True</span>, node_size=<span class="number">500</span>)</span><br><span class="line">        plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据结构复习&quot;&gt;&lt;a href=&quot;#数据结构复习&quot; class=&quot;headerlink&quot; title=&quot;数据结构复习&quot;&gt;&lt;/a&gt;数据结构复习&lt;/h1&gt;&lt;p&gt;数据结构分为线性结构和非线性结构&lt;/p&gt;
&lt;p&gt;线性结构有：线性表、栈、队列、数组、&lt;/p&gt;
&lt;p&gt;非线性结</summary>
      
    
    
    
    <category term="杂七杂八" scheme="https://www.whkblog.work/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
    <category term="数据结构" scheme="https://www.whkblog.work/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>ComputerNetwork</title>
    <link href="https://www.whkblog.work/2022/04/06/ComputerNetwork/"/>
    <id>https://www.whkblog.work/2022/04/06/ComputerNetwork/</id>
    <published>2022-04-06T07:18:28.000Z</published>
    <updated>2022-04-18T06:19:12.268Z</updated>
    
    <content type="html"><![CDATA[<p>计网的一些面经，以及一些自己的小总结</p><h2 id="常见的网络传输协议"><a href="#常见的网络传输协议" class="headerlink" title="常见的网络传输协议"></a>常见的网络传输协议</h2><p>UDP、TCP、FT、HTTP、SMTP等等</p><h2 id="UDP和TCP"><a href="#UDP和TCP" class="headerlink" title="UDP和TCP"></a>UDP和TCP</h2><ul><li>TCP/IP 是互联网相关的各类协议族的总称，比如：TCP，UDP，IP，FTP，HTTP，ICMP，SMTP 等都属于 TCP/IP 族内的协议。</li><li>UDP协议全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在第四层——传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</li><li>TCP协议全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的RFC 793定义。TCP 是面向连接的、可靠的流协议。流就是指不间断的数据结构，你可以把它想象成排水管中的水流。</li></ul><table><thead><tr><th align="center"></th><th align="center">UDP</th><th align="center">TCP</th></tr></thead><tbody><tr><td align="center">是否连接</td><td align="center">无连接</td><td align="center">面向连接</td></tr><tr><td align="center">是否可靠</td><td align="center">不可靠传输，不使用流量控制和拥塞控制</td><td align="center">可靠传输，使用流量控制和拥塞控制</td></tr><tr><td align="center">连接对象个数</td><td align="center">支持一对一，一对多，多对一和多对多交互通信</td><td align="center">只能是一对一通信</td></tr><tr><td align="center">传输方式</td><td align="center">面向报文</td><td align="center">面向字节流</td></tr><tr><td align="center">首部开销</td><td align="center">首部开销小，仅8字节</td><td align="center">首部最小20字节，最大60字节</td></tr><tr><td align="center">适用场景</td><td align="center">适用于实时应用（IP电话、视频会议、直播等）</td><td align="center">适用于要求可靠传输的应用，例如文件传输</td></tr></tbody></table><h4 id="TCP协议的三次握手跟四次挥手"><a href="#TCP协议的三次握手跟四次挥手" class="headerlink" title="TCP协议的三次握手跟四次挥手"></a>TCP协议的三次握手跟四次挥手</h4><p>三次握手：</p><ul><li>第一次握手就是客户端给服务器端发送一个报文，</li><li>第二次就是服务器收到报文之后，会应答一个报文给客户端，</li><li>第三次握手就是客户端收到报文后再给服务器发送一个报文，三次握手就成功了<br>作用是为了确认双方的接收与发送能力是否正常。</li></ul><p>四次挥手：客户端先发起关闭请求</p><ul><li><p>第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于FIN_WAIT1状态。</p></li><li><p>第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 + 1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT状态。</p></li><li><p>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。<br>客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +</p></li><li><p>第四次挥手：作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态<br>服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。</p></li></ul><p>更详细可以看看<a href="https://www.cnblogs.com/fundebug/p/differences-of-tcp-and-udp.html">https://www.cnblogs.com/fundebug/p/differences-of-tcp-and-udp.html</a></p><h2 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h2><p>基于tcp/ip的应用层协议</p><h3 id="post、get的区别"><a href="#post、get的区别" class="headerlink" title="post、get的区别"></a>post、get的区别</h3><p>GET多用于获取信息，是无副作用的，是幂等的（没有副作用被称为“幂等“（Idempotent)），可缓存，url长度有限，由浏览器设定，理论上是无限长度的</p><p>POST多用于上传数据，有副作用，非幂等，不可缓存</p><table><thead><tr><th align="center">后退按钮刷新</th><th align="center">无害</th><th align="center">数据会被重新提交（浏览器应该告知用户数据会被重新提交）。</th></tr></thead><tbody><tr><td align="center">书签</td><td align="center">可收藏为书签</td><td align="center">不可收藏为书签</td></tr><tr><td align="center">缓存</td><td align="center">能被缓存</td><td align="center">不能缓存</td></tr><tr><td align="center">编码类型</td><td align="center">application/x-www-form-urlencoded</td><td align="center">application/x-www-form-urlencoded or multipart/form-data。为二进制数据使用多重编码。</td></tr><tr><td align="center">历史</td><td align="center">参数保留在浏览器历史中。</td><td align="center">参数不会保存在浏览器历史中。</td></tr><tr><td align="center">对数据长度的限制</td><td align="center">是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。</td><td align="center">无限制。</td></tr><tr><td align="center">对数据类型的限制</td><td align="center">只允许 ASCII 字符。</td><td align="center">没有限制。也允许二进制数据。</td></tr><tr><td align="center">安全性</td><td align="center">与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。  在发送密码或其他敏感信息时绝不要使用 GET ！</td><td align="center">POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</td></tr><tr><td align="center">可见性</td><td align="center">数据在 URL 中对所有人都是可见的。</td><td align="center">数据不会显示在 URL 中。</td></tr></tbody></table><p>常见状态码及意义</p><p>超详细可看这里：<a href="https://seo.juziseo.com/doc/http_code/">https://seo.juziseo.com/doc/http_code/</a></p><table><thead><tr><th align="center">状态码</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">200 OK</td><td align="center">请求正常处理完毕</td></tr><tr><td align="center">204 No Content</td><td align="center">请求成功处理，没有实体的主体返回</td></tr><tr><td align="center">206 Partial Content</td><td align="center">GET范围请求已成功处理</td></tr><tr><td align="center">301 Moved Permanently</td><td align="center">永久重定向，资源已永久分配新URL</td></tr><tr><td align="center">302 Found</td><td align="center">临时重定向，资源已零食分配新URL</td></tr><tr><td align="center">303 See Other</td><td align="center">临时重定向，希望使用GET定向获取</td></tr><tr><td align="center">304 Not Modified</td><td align="center">发送的附带条件请求为满足</td></tr><tr><td align="center">307 Temporary Redirect</td><td align="center">临时重定向，POST不会改变成GET</td></tr><tr><td align="center">400 Bad Request</td><td align="center">请求报文语法错误或参数错误</td></tr><tr><td align="center">401 Unauthorized</td><td align="center">需要通过HTTP认证或则认证失败</td></tr><tr><td align="center">403 Forbidden</td><td align="center">请求资源被拒绝</td></tr><tr><td align="center">404 Not Found</td><td align="center">无法找到请求资源</td></tr><tr><td align="center">500 Internal Server Error</td><td align="center">服务器或web应用故障</td></tr><tr><td align="center">503 Service Unavailable</td><td align="center">服务器超负载或停机维护</td></tr></tbody></table><h3 id="https加密协议"><a href="#https加密协议" class="headerlink" title="https加密协议"></a>https加密协议</h3><p>参考链接<a href="https://www.cnblogs.com/wangdong811/p/10305281.html">https://www.cnblogs.com/wangdong811/p/10305281.html</a></p><p>https是一种加密传输协议，网站使用https后可以避免铭感信息被第三方获取。所以我们经常看见许多银行或者电子邮箱等安全级别较高的服务都采用https协议。具体表现为https开头，显示绿色安全锁、某些浏览器地址栏变成绿色。</p><p>https = 非对称加密+数字摘要+数字签名+对称加密</p><p>实际上来说，https 由http和SSL/TLS两部分组成</p><p>http就是普通的传输层协议、SSL(Secure Socket Layer)安全套接字协议、TLS(Transport Layer Security)运输层安全，后两者是用来增加运输层协议的安全</p><p><img src="https://www.whkblog.work/blog/images/IMG_20220418_140426.jpg" alt="image-20220418140519691"></p><p>https的工作过程是：</p><p>​    先由客户端发起https请求→服务器端的配置（向CA机构申请）→传送证书→客户端解析证书→传送加密信息→服务端解密信息</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;计网的一些面经，以及一些自己的小总结&lt;/p&gt;
&lt;h2 id=&quot;常见的网络传输协议&quot;&gt;&lt;a href=&quot;#常见的网络传输协议&quot; class=&quot;headerlink&quot; title=&quot;常见的网络传输协议&quot;&gt;&lt;/a&gt;常见的网络传输协议&lt;/h2&gt;&lt;p&gt;UDP、TCP、FT、HTTP、</summary>
      
    
    
    
    <category term="杂七杂八" scheme="https://www.whkblog.work/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
    <category term="面经" scheme="https://www.whkblog.work/tags/%E9%9D%A2%E7%BB%8F/"/>
    
    <category term="计算机网络" scheme="https://www.whkblog.work/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Git Learn</title>
    <link href="https://www.whkblog.work/2022/03/31/Git-Learn/"/>
    <id>https://www.whkblog.work/2022/03/31/Git-Learn/</id>
    <published>2022-03-31T12:17:57.000Z</published>
    <updated>2022-04-01T09:25:20.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GIT-使用复习"><a href="#GIT-使用复习" class="headerlink" title="GIT 使用复习"></a>GIT 使用复习</h1><p>git命令学习复习网站  <a href="https://learngitbranching.js.org/">https://learngitbranching.js.org</a></p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="提交命令"><a href="#提交命令" class="headerlink" title="提交命令"></a>提交命令</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git commit</span></span><br></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><h4 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;<span class="built_in">name</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;<span class="built_in">name</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="创建并切换"><a href="#创建并切换" class="headerlink" title="创建并切换"></a>创建并切换</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;your-branch-<span class="built_in">name</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="分支与合并"><a href="#分支与合并" class="headerlink" title="分支与合并"></a>分支与合并</h3><p>将一个分支与本分支合并</p><p>方法一</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">merge</span> &lt;<span class="keyword">name</span>&gt;</span><br></pre></td></tr></table></figure><p>方法二</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase &lt;<span class="built_in">name</span>&gt;</span><br></pre></td></tr></table></figure><p>二者之间的区别</p><p><img src="https://www.whkblog.work/blog/images/gitrebase_merge.jpg"></p><h2 id="高级命令"><a href="#高级命令" class="headerlink" title="高级命令"></a>高级命令</h2><h3 id="分离head"><a href="#分离head" class="headerlink" title="分离head"></a>分离head</h3><p>HEAD 是一个对当前检出记录的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。</p><p>HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。</p><p>HEAD 通常情况下是指向分支名的</p><h3 id="相对引用"><a href="#相对引用" class="headerlink" title="相对引用"></a>相对引用</h3><ul><li><p>使用 <code>^</code> 向上移动 1 个提交记录</p><ul><li><p><code>main^</code> 相当于“<code>main</code> 的父节点”。</p><p><code>main^^</code> 是 <code>main</code> 的第二个父节点</p></li></ul></li><li><p>使用 <code>~&lt;num&gt;</code> 向上移动多个提交记录，如 <code>~3</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> checkout &lt;name&gt;^ 表示向父节点移动</span><br><span class="line"><span class="attribute">git</span> checkout &lt;name&gt;~<span class="number">3</span> 表示向上移动<span class="number">3</span>个节点</span><br></pre></td></tr></table></figure></li><li><p>相对引用最多的就是移动分支。可以直接使用 <code>-f</code> 选项让分支指向另一个提交。例如:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> branch -f main HEAD~<span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="撤销变更"><a href="#撤销变更" class="headerlink" title="撤销变更"></a>撤销变更</h3><ol><li><p>git reset 只可用于本地分支</p></li><li><p>git revert 可用于远程撤销</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">reset</span> &lt;<span class="type">name</span>&gt;/Head</span><br></pre></td></tr></table></figure><h3 id="移动提交记录-整理提交记录"><a href="#移动提交记录-整理提交记录" class="headerlink" title="移动提交记录(整理提交记录)"></a>移动提交记录(整理提交记录)</h3></li></ol><h4 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h4><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick <span class="attribute">&lt;提交号&gt;</span>...</span><br></pre></td></tr></table></figure><p>例：git cherry pick c2 c4 将 c2、c4提交到当前目录下</p><h5 id="法二：交互式rebase"><a href="#法二：交互式rebase" class="headerlink" title="法二：交互式rebase"></a>法二：交互式rebase</h5><p>交互式 rebase 指的是使用带参数 <code>--interactive</code> 的 rebase 命令, 简写为 <code>-i</code></p><p>如果你在命令后增加了这个选项, Git 会打开一个 UI 界面并列出将要被复制到目标分支的备选提交记录，它还会显示每个提交记录的哈希值和提交说明，提交说明有助于你理解这个提交进行了哪些更改。</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i head<span class="symbol">^num</span></span><br></pre></td></tr></table></figure><h2 id="远程操作命令"><a href="#远程操作命令" class="headerlink" title="远程操作命令"></a>远程操作命令</h2><h3 id="push-amp-pull-git远程仓库"><a href="#push-amp-pull-git远程仓库" class="headerlink" title="push &amp; pull  git远程仓库"></a>push &amp; pull  git远程仓库</h3><p>将远程仓库克隆到本地</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">link</span></span><br></pre></td></tr></table></figure><p>从远程仓库获取数据</p><p>完成了仅有的但是很重要的两步:</p><ul><li>从远程仓库下载本地仓库中缺失的提交记录</li><li>更新远程分支指针(如 <code>o/main</code>)</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git fetch</span></span><br></pre></td></tr></table></figure><p>获取远程仓库数据，并且与本地仓库合并</p><p>合并git fetch与git merge的两步</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git pull</span></span><br></pre></td></tr></table></figure><p>将变更更新到远程仓库</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure><p>偏离问题的解决</p><ol><li>先将历史分支合并</li><li>向远程仓库提交</li></ol><p>具体可以看看learngitbranching里的教学</p><h2 id="远程仓库高级操作"><a href="#远程仓库高级操作" class="headerlink" title="远程仓库高级操作"></a>远程仓库高级操作</h2><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><h4 id="使用rebase"><a href="#使用rebase" class="headerlink" title="使用rebase"></a>使用rebase</h4><ul><li>将特性分支集成到 <code>main</code> 上</li><li>推送并更新远程分支</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将三个分支合并，并且推送到远程仓库</span></span><br><span class="line"><span class="attribute">git</span> fetch</span><br><span class="line"><span class="attribute">git</span> rebase o/master side<span class="number">1</span>   </span><br><span class="line"><span class="attribute">git</span> rebase side<span class="number">1</span> side<span class="number">2</span></span><br><span class="line"><span class="attribute">git</span> rebase side<span class="number">2</span> side<span class="number">3</span></span><br><span class="line"><span class="attribute">git</span> rebase side<span class="number">3</span> master</span><br><span class="line"><span class="attribute">git</span> push</span><br></pre></td></tr></table></figure><h4 id="使用merge"><a href="#使用merge" class="headerlink" title="使用merge"></a>使用merge</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="literal">master</span></span><br><span class="line">git pull origin <span class="literal">master</span></span><br><span class="line">git merge side1</span><br><span class="line">git merge side2</span><br><span class="line">git merge side3</span><br><span class="line">git push origin <span class="literal">master</span></span><br></pre></td></tr></table></figure><h3 id="远程追踪"><a href="#远程追踪" class="headerlink" title="远程追踪"></a>远程追踪</h3><h3 id="git-push参数"><a href="#git-push参数" class="headerlink" title="git push参数"></a>git push参数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push <span class="tag">&lt;<span class="name">remote</span>&gt;</span> <span class="tag">&lt;<span class="name">place</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要同时为源和目的地指定 <code>&lt;place&gt;</code> 的话，只需要用冒号 <code>:</code> 将二者连起来就可以了：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;source&gt;<span class="symbol">:&lt;destination&gt;</span></span><br></pre></td></tr></table></figure><h3 id="git-fetch参数"><a href="#git-fetch参数" class="headerlink" title="git fetch参数"></a>git fetch参数</h3><p><code>git fetch</code> 的参数和 <code>git push</code> 极其相似，其实就是push的方向</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch <span class="symbol">&lt;remote&gt;</span> <span class="symbol">&lt;place&gt;</span></span><br><span class="line">git fetch origin <span class="symbol">&lt;source&gt;</span>:<span class="symbol">&lt;destination&gt;</span>  </span><br><span class="line"># <span class="keyword">source</span> 现在指的是远程仓库中的位置，而 <span class="symbol">&lt;destination&gt;</span> 才是要放置提交的本地仓库的位</span><br></pre></td></tr></table></figure><h3 id="git-pull参数"><a href="#git-pull参数" class="headerlink" title="git pull参数"></a>git pull参数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull <span class="tag">&lt;<span class="name">remote</span>&gt;</span> <span class="tag">&lt;<span class="name">place</span>&gt;</span></span><br><span class="line">git pull origin <span class="tag">&lt;<span class="name">source</span>&gt;</span>:<span class="tag">&lt;<span class="name">destin</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GIT-使用复习&quot;&gt;&lt;a href=&quot;#GIT-使用复习&quot; class=&quot;headerlink&quot; title=&quot;GIT 使用复习&quot;&gt;&lt;/a&gt;GIT 使用复习&lt;/h1&gt;&lt;p&gt;git命令学习复习网站  &lt;a href=&quot;https://learngitbranchin</summary>
      
    
    
    
    
    <category term="git" scheme="https://www.whkblog.work/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>总结</title>
    <link href="https://www.whkblog.work/2022/03/31/%E6%80%BB%E7%BB%93/"/>
    <id>https://www.whkblog.work/2022/03/31/%E6%80%BB%E7%BB%93/</id>
    <published>2022-03-31T07:05:19.000Z</published>
    <updated>2022-04-19T06:52:34.606Z</updated>
    
    <content type="html"><![CDATA[<p>此文为总结网上各种面经文章以及个人问题而来，用以准备面试（持续更新）</p><p>文章内容来源</p><ul><li><a href="https://blog.csdn.net/qq7835144/article/details/117294737">https://blog.csdn.net/qq7835144/article/details/117294737</a></li><li><a href="https://blog.csdn.net/jiana_feng/article/details/118616650">https://blog.csdn.net/jiana_feng/article/details/118616650</a></li><li><a href="https://leetcode-cn.com/circle/article/ldqzNz/">https://leetcode-cn.com/circle/article/ldqzNz/</a></li><li><a href="https://zhuanlan.zhihu.com/p/54430650">https://zhuanlan.zhihu.com/p/54430650</a></li><li><a href="https://github.com/yongxinz/backend-interview">https://github.com/yongxinz/backend-interview</a></li></ul><p>文章共分为三个部分:</p><ol><li>python部分<ol><li>知识点部分</li><li>编程部分</li></ol></li><li>网络部分</li><li>数据库部分</li></ol><h1 id="python部分"><a href="#python部分" class="headerlink" title="python部分"></a>python部分</h1><h2 id="知识点部分"><a href="#知识点部分" class="headerlink" title="知识点部分"></a>知识点部分</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="可变数据类型与不可变数据类型"><a href="#可变数据类型与不可变数据类型" class="headerlink" title="可变数据类型与不可变数据类型"></a>可变数据类型与不可变数据类型</h4><ul><li>不可变数据类型：数字(number)、字符/字符串(char/string)、元组(tuple)</li><li>可变数据类型：列表(list)、集合(set)、字典(dict)</li></ul><h5 id="python中内置的数据结构有几种？"><a href="#python中内置的数据结构有几种？" class="headerlink" title="python中内置的数据结构有几种？"></a>python中内置的数据结构有几种？</h5><ul><li>整型 int、 长整型 long、浮点型 float、 复数 complex b. 字符串 str、 列表list、 元祖tuple c. 字典 dict 、 集合 set</li></ul><h4 id="python传参数是传值还是传址"><a href="#python传参数是传值还是传址" class="headerlink" title="python传参数是传值还是传址"></a>python传参数是传值还是传址</h4><ul><li>python中函数参数是应用传递（注意：不是值传递！！！）。对于不可变类型（数值型、字符型、元组），因变量不能修改，所以运算不会影响到变量自身；而对于可变类型（列表字典）来说，函数体运算可能会导致更改传入的参数变量</li></ul><h4 id="哪些操作会导致Python内存泄露？"><a href="#哪些操作会导致Python内存泄露？" class="headerlink" title="哪些操作会导致Python内存泄露？"></a>哪些操作会导致Python内存泄露？</h4><ul><li>内存中加载的数据量过于庞大，如一次从数据库取出过多数据； 一般比如数据查询未做分页处理。</li><li>集合类中有对对象的引用，使用完后未清空，使得JVM不能回收。</li><li>代码中存在死循环或循环产生过多重复的对象实体。</li><li>使用的第三方软件中的BUG； 一般引用第三方jar包过多会出现此类问题。</li><li>启动参数内存值设定的过小 。</li></ul><h4 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h4><ul><li>在函数内部再定义一个函数，并且这个函数用到了外边函数的变量，那么将这个函数以及用到的一些变量称之为闭包。</li></ul><h4 id="metaclass——元类"><a href="#metaclass——元类" class="headerlink" title="metaclass——元类"></a>metaclass——元类</h4><p> <a href="https://zhuanlan.zhihu.com/p/149126959">https://zhuanlan.zhihu.com/p/149126959</a> </p><h4 id="堆与栈"><a href="#堆与栈" class="headerlink" title="堆与栈"></a>堆与栈</h4><p>栈由操作系统自动分配释放 ，用于存放函数的参数值、局部变量等，其操作方式类似于数据结构中的栈。</p><p>堆由开发人员分配和释放， 若开发人员不释放，程序结束时由 OS 回收，分配方式类似于链表。</p><table><thead><tr><th></th><th>堆</th><th>栈</th></tr></thead><tbody><tr><td>管理方式</td><td>申请和释放由程序员控制，容易产生内存泄漏</td><td>由操作系统自动分配释放</td></tr><tr><td>空间大小</td><td>进程可申请的堆到校为虚拟内存大小</td><td>进程栈的大小64bitwindos默认1MB,64位linux默认10MB</td></tr><tr><td>生长方向</td><td>生长方向向上，内存地址由低到高</td><td>栈的生长方向向下，内存地址由高到低</td></tr><tr><td>分配方式</td><td>堆是动态分配的</td><td>有两种分配，静态分配（由操作系统完成）和动态分配（由函数完成）</td></tr><tr><td>分配效率</td><td>由c/c++提供的库函数申请与管理，实现机制复杂</td><td>栈由操作系统自动分配，会在硬件层级对栈提供支持，分配专门的寄存器存放栈的地址，有专门的指令执行进出栈</td></tr><tr><td>存放内容</td><td>堆，一般情况堆顶使用一个字节的空间来存放堆的大小，而堆中具体存放内容是由程序员来填充的</td><td>栈存放的内容，函数返回地址、相关参数、局部变量和寄存器内容等</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="语法部分"><a href="#语法部分" class="headerlink" title="语法部分"></a>语法部分</h3><h4 id="列表相关"><a href="#列表相关" class="headerlink" title="列表相关"></a>列表相关</h4><h5 id="深度拷贝、浅拷贝"><a href="#深度拷贝、浅拷贝" class="headerlink" title="深度拷贝、浅拷贝"></a>深度拷贝、浅拷贝</h5><ul><li>浅拷贝是指<strong>源对象与拷贝对象</strong>共用一份实体，仅仅是引用的变量不同（<strong>名称不同</strong>）。<strong>对其中任何一个对象的改动都会影响另外一个对象</strong></li><li>深拷贝是指源对象与拷贝对象<strong>互相独立</strong>，其中任何一个对象的改动都不会对另外一个对象造成影响</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>.copy() <span class="comment"># 原数组改变会随之改变</span></span><br><span class="line"><span class="built_in">list</span>.deepcopy() <span class="comment"># 不随原数组的变化而变化</span></span><br></pre></td></tr></table></figure><ul><li>说白了就是浅拷贝更像是c语言的指针，内存种存储的是指向被拷贝数组的地址，而深拷贝则是另外申请内存空间，来存储一份一模一样的数据</li></ul><h4 id="Python的最大递归层数"><a href="#Python的最大递归层数" class="headerlink" title="Python的最大递归层数"></a>Python的最大递归层数</h4><ul><li>Python的最大递归层数是可以设置的，默认的在window上的最大递归层数是 998。可以通过sys.setrecursionlimit()进行设置,但是一般默认不会超过3925-3929这个范围。</li></ul><h4 id="arg和-kwarg作用是什么？参数的收集和分配"><a href="#arg和-kwarg作用是什么？参数的收集和分配" class="headerlink" title="*arg和**kwarg作用是什么？参数的收集和分配"></a>*arg和**kwarg作用是什么？参数的收集和分配</h4><ul><li>*args用来将参数打包成tuple（元组）给函数体调用；</li><li>**kwargs 打包关键字参数成dict（字典）给函数体调用。当我们混合使用这三个参数时，必须遵循arg，*args，**kwargs这样的顺序，否则程序会报错。</li></ul><h4 id="is和-的区别？"><a href="#is和-的区别？" class="headerlink" title="is和==的区别？"></a>is和==的区别？</h4><ul><li>python中对象包含的三个基本要素，分别是：id(身份标识)、type(数据类型)和value(值)。is也被叫做同一性运算符，这个运算符比较判断的是对象间的唯一身份标识，也就是id是否相同。==是python标准操作符中的比较操作符，用来比较判断两个对象的value(值)是否相等.</li></ul><h4 id="异常模块中try-except-else-finally相关意义"><a href="#异常模块中try-except-else-finally相关意义" class="headerlink" title="异常模块中try except else finally相关意义"></a>异常模块中try except else finally相关意义</h4><ul><li>try except else 没有捕获到异常，执行else语句</li><li>try except finally 不管是否捕获到异常，都执行finally语句</li></ul><h4 id="zip-函数"><a href="#zip-函数" class="headerlink" title="zip()函数"></a>zip()函数</h4><ul><li><p>zip()函数在运算时，会以一个或者多个序列（可迭代对象）作为参数，返回一个元组的列表。同时将这些元素并排的元素配对</p></li><li><p>zip()参数可以接受任何的序列，同时也可以由两个以上的参数；当传入参数的长度不同时，zip能自动以最短序列长度为准进行截取，获得元组</p></li></ul><h4 id="lambda函数的好处"><a href="#lambda函数的好处" class="headerlink" title="lambda函数的好处"></a>lambda函数的好处</h4><p>精简代码，lambda省去了定义函数，map省去写循环的过程</p><h4 id="装饰器（面试问到了）"><a href="#装饰器（面试问到了）" class="headerlink" title="装饰器（面试问到了）"></a>装饰器（面试问到了）</h4><p>装饰器是闭包的的应用，简而言之，python装饰器就是用于拓展原来函数功能的一种函数，这个函数的特殊之处在于它返回的值也是一个安徽念书，使用python装饰器的好处就是可以在不用更改原函数的代码前提下给函数增加新的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        print(<span class="string">&quot;[DEBUG]: enter &#123;&#125;()&quot;</span>.<span class="built_in">format</span>(func.__name__))</span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    print(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="生成器与迭代器"><a href="#生成器与迭代器" class="headerlink" title="生成器与迭代器"></a>生成器与迭代器</h3><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。 在调用生成器运行的过程中，每次遇到yield 时函数会暂停并保存当前所有的运行信息，返回yield 的值, 并在下一次执行next() 方法时从当前位置继续运行。调用一个生成器函数，返回的是一个迭代器对象。</p><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>是准售迭代协议的对象。用户可以使用<strong>iter()**以从任何序列得到迭代器，另一种形式迭代器</strong>generator**，要获取下一个元素可以使用next() function。 当没有元素时引起stopIteration</p><h4 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h4><p>生成器能够实现迭代器的功能，生成器代码简洁，可以节省内存，发生器终结时，还会自动抛出异常</p><h3 id="多线程内容"><a href="#多线程内容" class="headerlink" title="多线程内容"></a>多线程内容</h3><p>可以看此篇博客<a href="https://www.whkblog.work/2021/12/24/python-multi/">https://www.whkblog.work/2021/12/24/python-multi/</a></p><h4 id="僵尸进程和孤儿进程"><a href="#僵尸进程和孤儿进程" class="headerlink" title="僵尸进程和孤儿进程"></a>僵尸进程和孤儿进程</h4><ul><li>孤儿进程：父进程退出，子进程还在运行的这些子进程都是孤儿进程，孤儿进程将被init进程收养，并由init经常对他们完成状态手机工作</li><li>僵尸经常：进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait获watipid获取子进程状态信息，那么子进程的进程描述符仍然保存在系统中的这些进程是僵尸进程</li><li>避免僵尸方法：1、fork两次用孙子进程去完成子进程的任务。2、用wait()函数阻塞赴京城。3、使用信号量</li></ul><h5 id="同步、异步，阻塞、非阻塞"><a href="#同步、异步，阻塞、非阻塞" class="headerlink" title="同步、异步，阻塞、非阻塞"></a>同步、异步，阻塞、非阻塞</h5><ul><li>同步：多个任务之间有先后顺序执行，一个执行完下一个才能执行（相当于操作系统的单线程）。</li><li>异步：多个任务之间没有先后顺序，可以同时执行，有时候一个任务可能要在必要的时候获取另一个同时执行的任务的结果，这个就叫回调</li><li>阻塞：调用者卡住了，不能继续往下执行，就说条用者组赛了。</li><li>非阻塞：如过不会卡住，可以继续执行，就是说非阻塞的。</li><li>同步异步相对于多任务而言。阻塞非阻塞相对于代码执行而言</li></ul><h4 id="跨进程通信的方式"><a href="#跨进程通信的方式" class="headerlink" title="跨进程通信的方式"></a>跨进程通信的方式</h4><p>共享内存、信号、管道通信 M</p><h4 id="并行和并发"><a href="#并行和并发" class="headerlink" title="并行和并发"></a>并行和并发</h4><p>并发：指应用能够交替执行不同的任务，带有类似多线程的原理</p><p>并行：是指应用能能够“同时”执行不同的任务</p><p>前者交替执行，后者同时执行</p><h4 id="协程的优势"><a href="#协程的优势" class="headerlink" title="协程的优势"></a>协程的优势</h4><p>协程是进程和线程的升级版,进程和线程都面临着内核态和用户态的切换问题而耗费许多切换时间, 而协程就是用户自己控制切换的时机,不再需要陷入系统的内核态<br>协程的执行效率非常高。 因为子程序切换不是线程切换，而是由程序自身控制。 …<br>不需要多线程的锁机制</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="正则re-complie作用"><a href="#正则re-complie作用" class="headerlink" title="正则re.complie作用"></a>正则re.complie作用</h4><p>re.complie是将正则表达式编译成一个对象，加快速度，并重复使用</p><h4 id="findall与search区别"><a href="#findall与search区别" class="headerlink" title="findall与search区别"></a>findall与search区别</h4><p>finall结果无需加group()</p><p>search需要加group()提取</p><h3 id="django"><a href="#django" class="headerlink" title="django"></a>django</h3><h4 id="django的设计模式"><a href="#django的设计模式" class="headerlink" title="django的设计模式"></a>django的设计模式</h4><p>django 的设计模式是MVT设计模式，分别代表Model(模型)、View(视图)、Template(模板)</p><p>MVT也是MVC的设计模式，但Django框架作为控制器的角色，负责了用户请求和转发的工作，django里更关注的是模型、模板、和视图</p><p>Django框架接收了用户和参数后，再通过正则表达式匹配url，转飞给对应视图进行处理。视图调用M处理诗句，再调用T返回界面给浏览器</p><h4 id="简述Django的ORM"><a href="#简述Django的ORM" class="headerlink" title="简述Django的ORM"></a>简述Django的ORM</h4><p>ORM,全拼Object-Relation Mapping, 对象-关系映射。</p><p>实现了数据模型与数据库的解耦，通过简单的配置就可以更换数据库，不需要修改代码只需面向对象编程，orm本质上会更具对接的数据库引擎，翻译成对应的sql语句，所有使用Django开发的项目无需关系底层使用的是何数据库。（更换数据库在实际代码里就是更改setting.py里的数据库相关内容）</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="Python-实例方法、类方法、静态方法的区别与作用"><a href="#Python-实例方法、类方法、静态方法的区别与作用" class="headerlink" title="Python 实例方法、类方法、静态方法的区别与作用"></a>Python 实例方法、类方法、静态方法的区别与作用</h4><p><a href="https://www.cnblogs.com/wcwnina/p/8644892.html">https://www.cnblogs.com/wcwnina/p/8644892.html</a></p><p>实例方法：第一个参数必须是实例对象，该参数名一般约定为“self”，通过它来传递实例的属性和方法（也可以传类的属性和方法）；只能由实例对象调用。<br>类方法：使用装饰器@classmethod。第一个参数必须是当前类对象，该参数名一般约定为“cls”，通过它来传递类的属性和方法（不能传实例的属性和方法）；类和实例对象都可以调用。<br>静态方法：使用装饰器@staticmethod。参数随意，没有“self”和“cls”参数，但是方法体中不能使用类或实例的任何属性和方法；类和实例对象都可以调用。</p><h4 id="Python中单下划线和双下划线"><a href="#Python中单下划线和双下划线" class="headerlink" title="Python中单下划线和双下划线"></a>Python中单下划线和双下划线</h4><ul><li>_foo:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.不能用from module import * 导入，其他方面和公有一样访问；</li><li>__foo:这个有真正的意义:解析器用_classname__foo来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,通过对象名._类名__xxx这样的方式可以访问.</li><li>__foo__:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突，就是例__init__(), __del__(),__call__()这些特殊方法</li></ul><h4 id="def-func-a-b-的坑"><a href="#def-func-a-b-的坑" class="headerlink" title="def func(a,b=[])的坑"></a>def func(a,b=[])的坑</h4><ul><li>函数的第二个默认参数是一个list,当第一次执行的时候实例化了一个list,第二次执行还是用第一次执行的时候实例化的地址存储</li></ul><h4 id="new方法"><a href="#new方法" class="headerlink" title="new方法"></a>new方法</h4><p><img src="https://img-blog.csdnimg.cn/8d572c3b99a540b8a5042bcbc9b053ab.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNzgzNTE0NA==,size_16,color_FFFFFF,t_70"></p><h4 id="调优手段"><a href="#调优手段" class="headerlink" title="调优手段"></a>调优手段</h4><ul><li>避免循环引用</li><li>调高垃圾回收阈值</li><li>手动垃圾回收</li></ul><h4 id="python装饰器"><a href="#python装饰器" class="headerlink" title="python装饰器"></a>python装饰器</h4><p>本质上就是一个函数，可以让其他函数在不需要任何代码变动的请款下，增加函数对象，适用于有插入日志，性能测试，就是说为了已经纯在的函数或对象添加额外的功能（ps看来，感觉挺像django里的meta函数）</p><h2 id="编程部分"><a href="#编程部分" class="headerlink" title="编程部分"></a>编程部分</h2><h3 id="实现进制转换"><a href="#实现进制转换" class="headerlink" title="实现进制转换"></a>实现进制转换</h3><p>直接转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">50</span></span><br><span class="line"><span class="built_in">bin</span>(a) <span class="comment"># 二进制 0b110010</span></span><br><span class="line"><span class="built_in">oct</span>(a) <span class="comment"># 八进制 0o62</span></span><br><span class="line"><span class="built_in">hex</span>(a) <span class="comment"># 十六进制 0x32</span></span><br></pre></td></tr></table></figure><p>使用int</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;50&#x27;</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;0b110010&#x27;</span>,<span class="number">2</span>) <span class="comment"># int(&#x27;110010&#x27;,2)</span></span><br><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;0o62&#x27;</span>,<span class="number">8</span>)</span><br><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;0x32&#x27;</span>,<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>转为bytes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">50</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.bit_length() <span class="comment"># 查看数字占用的位长度</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="comment"># a=50,对应二进制为110010,两个字节为‘00000000 00110010’，ascii编码中 50 对应的字符为 2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.to_bytes(<span class="number">2</span>, byteorder=<span class="string">&#x27;little&#x27;</span>) <span class="comment"># 转为2字节的bytes, 低位在前面</span></span><br><span class="line"><span class="string">b&#x27;2\x00&#x27;</span> <span class="comment"># b‘\x00’表示 0x00 即 0b00000000，&#x27;2&#x27; 是 ascii编码中 50 对应的字符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.to_bytes(<span class="number">2</span>, byteorder=<span class="string">&#x27;big&#x27;</span>) <span class="comment"># 转为2字节的bytes, 高位在前面</span></span><br><span class="line"><span class="string">b&#x27;\x002&#x27;</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = -<span class="number">50</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.to_bytes(<span class="number">2</span>, byteorder=<span class="string">&#x27;little&#x27;</span>,signed=<span class="literal">True</span>) <span class="comment"># 有符号数</span></span><br><span class="line"><span class="string">b&#x27;\xce\xff&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b&#x27;\x002&#x27;</span>[<span class="number">1</span>] <span class="comment"># 获取第1个字节即 b‘2’</span></span><br><span class="line"><span class="number">50</span> <span class="comment"># 输出其utf-8编码（这里与ASCII编码相同，因为‘2’可用ASCII编码表示，ASCII编码可看成utf-8编码的一部分）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b&#x27;\x002&#x27;</span>[<span class="number">0</span>] <span class="comment"># 获取第0个字节即 b‘\x00’</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>.from_bytes(<span class="string">b&#x27;\x002&#x27;</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h1 id="网络部分"><a href="#网络部分" class="headerlink" title="网络部分"></a>网络部分</h1><p>调整链接：<a href="https://www.whkblog.work/2022/04/06/ComputerNetwork/">https://www.whkblog.work/2022/04/06/ComputerNetwork/</a></p><h1 id="数据库部分"><a href="#数据库部分" class="headerlink" title="数据库部分"></a>数据库部分</h1><p>还没看到，等后面更新吧</p><h1 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h1><h3 id="解释型语言和编译型语言区别"><a href="#解释型语言和编译型语言区别" class="headerlink" title="解释型语言和编译型语言区别"></a>解释型语言和编译型语言区别</h3><ul><li>解释型 在运行时才翻译；每个语句执行时候才翻译；效率比较低；跨平台性好 （python）</li><li>编译型 程序执行之前有一个专门的编译过程 把程序编译成机器语言的文件 程序执行效率高 跨平台性差 （c c++）</li></ul><h3 id="字节码和机器码"><a href="#字节码和机器码" class="headerlink" title="字节码和机器码"></a>字节码和机器码</h3><p>字节码是一种中间状态（中间码）的二进制代码（文件）。需要直译器转译后才能成为机器码。</p><h3 id="分别从前端、后端、数据库阐述web项目的性能优化"><a href="#分别从前端、后端、数据库阐述web项目的性能优化" class="headerlink" title="分别从前端、后端、数据库阐述web项目的性能优化"></a><strong>分别从前端、后端、数据库阐述web项目的性能优化</strong></h3><h4 id="前端优化"><a href="#前端优化" class="headerlink" title="前端优化"></a>前端优化</h4><ol><li>减少http请求，丽日制作精灵图</li><li>html 和css放在页面上部，js放在页面下面，js加载比html和css加载慢，容易导致dom渲染慢</li></ol><h4 id="后端优化"><a href="#后端优化" class="headerlink" title="后端优化"></a>后端优化</h4><ol><li>缓存存储读写次数搞，变化少的数据，比如网站首页信息，商品信息等。应用程序读取数据时，一般时先从缓存中读取，如果读取不到或者数据已失效，再访问磁盘数据库，并将数据再次写入缓存。</li><li>异步方式，如果有耗时操作，可以采用异步，比如celery</li><li>代码优化，避免循环和判断次数太多，如果多个if else判断，优先判断最有可能发送的情况</li></ol><h4 id="数据库优化"><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h4><ol><li>条件允许的话，数据可以存放在redis,读取速度快</li><li>简历索引外键</li></ol><h3 id="简述cookie和session的区别"><a href="#简述cookie和session的区别" class="headerlink" title="简述cookie和session的区别"></a>简述cookie和session的区别</h3><ol><li>session在服务器端，cookie在客户端（浏览器）</li><li>session的运行依赖session id,而session id 是存在cookie中的，也就是说，如果浏览器禁用了cookie，同时session 也会失效，存储session时，键与cookie众多session相同，值时开发人员设置的键值对信息，进行了base64编码，过期时间由开发人员设置</li><li>cookie安全性比session差</li></ol><h3 id="集中魔法方法，简要介绍用途"><a href="#集中魔法方法，简要介绍用途" class="headerlink" title="集中魔法方法，简要介绍用途"></a>集中魔法方法，简要介绍用途</h3><p>__init__: 对象创建初始化方法</p><p>__new__: 创建对象时执行的方法，单列模式会用到</p><p>__str__: 当使用print()输出对象的时后，只要自己定义了__str__(self)方法，那么就会打印从在这个方法中return的数据</p><p>__del__: 删除对象执行的方法</p><h3 id="距离说明sql注入和解决办法"><a href="#距离说明sql注入和解决办法" class="headerlink" title="距离说明sql注入和解决办法"></a>距离说明sql注入和解决办法</h3><p>当以字符串格式化书写的时候，如果用户输入的有：;+SQL语句，后面的SQL语句会执行，比如例子中的SQL注入会删除数据库demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input_name= <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">sql = <span class="string">&#x27;select * from demo where name=&quot;%s&quot;&#x27;</span> % input_name</span><br><span class="line">print(<span class="string">&quot;正常的SQL语句&quot;</span>,sql)</span><br><span class="line">input_name = <span class="string">&#x27;zs;drop database demo&#x27;</span></span><br><span class="line">sql = <span class="string">&#x27;select * from demo where name=&quot;%s&quot;&#x27;</span> % input_name</span><br><span class="line">print(<span class="string">&quot;SQLZ注入语句&quot;</span>,sql)</span><br></pre></td></tr></table></figure><p>解决方式：通过传入参数方式解决SQL注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">params = [input_name]</span><br><span class="line"></span><br><span class="line">count = cs1.execute(‘select * <span class="keyword">from</span> goods where name=%s’, params)</span><br></pre></td></tr></table></figure><h3 id="简述python引用计数机制"><a href="#简述python引用计数机制" class="headerlink" title="简述python引用计数机制"></a>简述python引用计数机制</h3><p>python 垃圾回收主要以引用计数为主，标记-清楚和分代清除为辅的机制，其中标记-清楚和分代回收主要是为了处理循环引用的难题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此文为总结网上各种面经文章以及个人问题而来，用以准备面试（持续更新）&lt;/p&gt;
&lt;p&gt;文章内容来源&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq7835144/article/details/117294737&quot;&gt;https:/</summary>
      
    
    
    
    
    <category term="python" scheme="https://www.whkblog.work/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>TypteScript学习</title>
    <link href="https://www.whkblog.work/2022/03/07/TypteScript%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.whkblog.work/2022/03/07/TypteScript%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-03-07T12:49:41.000Z</published>
    <updated>2022-03-30T13:52:57.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前几天看了一篇通过路由创建导航栏的博客</p><p>[<a href="https://blog.csdn.net/lianghecai52171314/article/details/116148779]">https://blog.csdn.net/lianghecai52171314/article/details/116148779]</a>: </p><p>，自己尝试将前后端项目完成的部分给改成根据路由生成导航栏的代码，结果失败（主要是我想生成的导航栏是横向的，每次调整都不能全部调到一行），且项目跟着使用ts也没有用，于是我回退了，然后就打算先停一段时间，先，先去学习了解一下，毕竟通过根据路由创建导航栏可以节省时间，提高效率。</p><h1 id="编译部分"><a href="#编译部分" class="headerlink" title="编译部分"></a>编译部分</h1><h2 id="静态类型检查、非异常故障"><a href="#静态类型检查、非异常故障" class="headerlink" title="静态类型检查、非异常故障"></a>静态类型检查、非异常故障</h2><p>TS自带一个类型检查器，语法错误以及非异常故障可以给我们检查一番</p><h2 id="优化编译"><a href="#优化编译" class="headerlink" title="优化编译"></a>优化编译</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --<span class="keyword">init</span> <span class="meta">#生成配置文件</span></span><br></pre></td></tr></table></figure><p>用于解决TS和JS冲突问题</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc <span class="comment">--watch</span></span><br></pre></td></tr></table></figure><p>用于自动编译，即在编码内容修改后自动编译，而不是要手动再次编译</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tsc</span> --<span class="literal">no</span>EmitOnError hello.ts</span><br></pre></td></tr></table></figure><p>出现类型错误可以防止其编译成js</p><h2 id="显示类型"><a href="#显示类型" class="headerlink" title="显示类型"></a>显示类型</h2><p>手动定义的类型，相当于python中定义变量的类型，或者C中预定义变量的时候声明变量类型，TS中的类型声明，编译后会删除，js文件中不会出现</p><h2 id="降级编译"><a href="#降级编译" class="headerlink" title="降级编译"></a>降级编译</h2><p>在init产生的tsconfig.json配置文件中可以更改配置文件中target值，以适配旧版浏览器（不支持ES6的）</p><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>同样是在tsconfig.json文件中配置 在/*Type Checking */中配置，用于严格检查</p><hr><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><p>string 字符类型</p><p>number 数值类型</p><p>boolean 布尔类型</p><h2 id="常用类型"><a href="#常用类型" class="headerlink" title="常用类型"></a>常用类型</h2><p>数组 </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">法<span class="number">1</span> <span class="keyword">let</span> arr:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">法<span class="number">2</span> <span class="keyword">let</span> arr: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>any</p><p>any 可以是任何类型</p><p>nolmplicitAny 当不指定类型时，并且TyperScript无法从上下文推断它时，编译器通常回默认为any</p><h2 id="变量上的类型注释"><a href="#变量上的类型注释" class="headerlink" title="变量上的类型注释"></a>变量上的类型注释</h2><p>使用const let或var时 可以选择添加类型注释来显示指定变量类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myNmae:<span class="built_in">string</span>=<span class="string">&quot;stringsss&quot;</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="类型注释"><a href="#类型注释" class="headerlink" title="类型注释"></a>类型注释</h3><p>函数与其他语言的函数机制相似，没有什么区别，参数可以定义类型（在参数后面定义），函数同样可以（函数名后面）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">numb:int</span>):<span class="title">int</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">11</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>匿名函数与声明函数有点不同，当一个函数出现在TyperScript就可以确定它将如何被条用的地方时，该行数的参数回自动指定类型</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>对象类型：除基础类型外的几乎所有带有属性的JavaScript值</p><p>联合类型：一种组合是由两个或者多个其他类型组成的类型，表示这些类型中的任何一种值。我们将这些类型中的每一种称为<em>联合类型成员</em>，（使用时需注意一定要满足两个或多个类型能使用的方法，否者需使用分支进行使用[if-else]）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printId</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 在此分支中，id的类型为“string”</span></span><br><span class="line">        <span class="built_in">console</span>.log(id.toUpperCase());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 此处，id的类型为“number”</span></span><br><span class="line">    <span class="built_in">console</span>.log(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型别名 ：一个类型别名正式一个名称为任何类型的定义</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例</span><br><span class="line"><span class="keyword">type</span> point =&#123;</span><br><span class="line">x: <span class="built_in">number</span>;</span><br><span class="line">y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printCoord</span>(<span class="params">pt: point</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(pt.x)</span><br><span class="line"><span class="built_in">console</span>.log(pt.y)</span><br><span class="line">&#125;</span><br><span class="line">printCoord(&#123;<span class="attr">x</span>: <span class="number">100</span>,<span class="attr">t</span>: <span class="number">100</span>&#125;)</span><br></pre></td></tr></table></figure><p>接口 ： 一个接口声明式另一种方式来命名对象类型</p><p>类型断言：与类型注释一样，类型断言由编译器删除，不hi影响代码运行时行为</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myCanvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;main_canvas&quot;</span>) <span class="keyword">as</span> HTML CanvasElement</span><br></pre></td></tr></table></figure><p>文字类型、null 、underfined</p><p>bigint 大整数</p><p>symbol 全局唯一引用  eslint低于2020无法使用</p><hr><h1 id="类型缩小"><a href="#类型缩小" class="headerlink" title="类型缩小"></a>类型缩小</h1><p>常用于联合类型 0</p><h2 id="typeof类型守卫"><a href="#typeof类型守卫" class="headerlink" title="typeof类型守卫"></a>typeof类型守卫</h2><p>JavaScript 支持一个 typeof 运算符，它可以提供有关我们在运行时拥有的值类型的非常 基本的信息。TypeoScript期望它返回一组特定的字符串</p><p>string、number、bigint、boolean、symbol、undefined、object、function</p><h2 id="真值缩小"><a href="#真值缩小" class="headerlink" title="真值缩小"></a>真值缩小</h2><p>重要参数<strong>strs</strong>,检查strs是否为真，可以</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAll</span>(<span class="params">strs: <span class="built_in">string</span> | <span class="built_in">string</span>[] | <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strs &amp;&amp; <span class="keyword">typeof</span> strs === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> strs) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(strs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">TypeError</span>: <span class="literal">null</span> is not iterable</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAll</span>(<span class="params">strs: <span class="built_in">string</span> | <span class="built_in">string</span>[] | <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line"><span class="comment">// !!!!!!!!!!!!!!!!</span></span><br><span class="line"><span class="comment">// 别这样!</span></span><br><span class="line"><span class="comment">// 原因在下边</span></span><br><span class="line"><span class="comment">// !!!!!!!!!!!!!!!!</span></span><br><span class="line">    <span class="keyword">if</span> (strs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> strs) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(strs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前几天看了一篇通过路由创建导航栏的博客&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;https://blog.csdn.net/lianghecai5</summary>
      
    
    
    
    
    <category term="闲话" scheme="https://www.whkblog.work/tags/%E9%97%B2%E8%AF%9D/"/>
    
    <category term="TS学习" scheme="https://www.whkblog.work/tags/TS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue+Django前后端分离项目一</title>
    <link href="https://www.whkblog.work/2022/01/16/Vue+Django%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E4%B8%80/"/>
    <id>https://www.whkblog.work/2022/01/16/Vue+Django%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E4%B8%80/</id>
    <published>2022-01-16T04:44:41.000Z</published>
    <updated>2022-01-25T06:42:09.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>去年国庆的时候乘着放假学完了vue,然后10月份跟11月份又自己看B站视频学完了django、DRF，之后又跟着一个大佬的博客做了一个vue-django前后端分离的项目，具体连接为：<a href="https://www.dusaiphoto.com/article/103/%EF%BC%8C%E7%84%B6%E5%90%8E%E5%AF%92%E5%81%87%E5%9C%A8%E5%AE%B6%E6%9C%89%E7%82%B9%E6%97%A0%E8%81%8A%EF%BC%8C%E6%88%91%E5%B0%B1%E6%B2%A1%E4%BA%8B%E8%87%AA%E5%B7%B1%E5%BC%80%E4%BA%86%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E6%9D%A5%E8%AF%95%E7%9D%80%E8%87%AA%E5%B7%B1%E5%81%9A%E4%B8%80%E4%B8%AA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E9%A1%B9%E7%9B%AE%E3%80%82">https://www.dusaiphoto.com/article/103/，然后寒假在家有点无聊，我就没事自己开了一个项目来试着自己做一个前后端分离的项目。</a></p><p>项目的主要目标就将我院的官网重构一下，实在是太丑了。虽然我做了我也不会给学院就是。这些都是后话。</p><p>另外，实在官网原有功能上的修改</p><h2 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h2><h2 id="开始项目"><a href="#开始项目" class="headerlink" title="开始项目"></a>开始项目</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>项目环境的话</p><ul><li>Vue 3</li><li>vue/cli 4.5.14</li><li>npm 7.23.0</li></ul><p>开始项目部分我就不说了</p><p>直接进入主题</p><p>先安装一下axios ,vue-router element-ui</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br><span class="line">npm install vue-router</span><br><span class="line">npm install element-plus</span><br></pre></td></tr></table></figure><p>也可以通过vue控制面板安装，读者自行尝试</p><h2 id="一、首页搭建"><a href="#一、首页搭建" class="headerlink" title="一、首页搭建"></a>一、首页搭建</h2><p>首先我们使用的是element-plus的组件，这里就不详细赘述组件内容及其使用，有需要可通过</p><p>[]: <a href="https://element-plus.gitee.io/zh-CN/component/button.html">https://element-plus.gitee.io/zh-CN/component/button.html</a></p><p>链接去查看组件属性等</p><hr><h3 id="修改路由"><a href="#修改路由" class="headerlink" title="修改路由"></a>修改路由</h3><p>首先我们先修改main.js文件,使用element-plus，以及修改路由，使用router</p><p>文件内容修改如下</p><p><img src="https://www.whkblog.work/blog/images/jxnu/main.js.png"></p><p>在src文件夹下新建router文件夹，在文件夹中新建index.js文件</p><p>在文件内写入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&quot;@/views/Home.vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">        component: Home</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    history: createWebHashHistory(),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="写首页组件"><a href="#写首页组件" class="headerlink" title="写首页组件"></a>写首页组件</h3><p>运用组件化思想，在components文件夹下新建Header、Homebody、Footer 三个组件</p><p>在Header组件内写入一下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;header&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;img&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;imgs&quot;&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;head-text&quot;&gt;计算机信息工程学院&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;list&quot;&gt;</span><br><span class="line">        &lt;el-menu</span><br><span class="line">            router</span><br><span class="line">            :default-active&#x3D;&quot;this.$route.path&quot;</span><br><span class="line">            class&#x3D;&quot;el-menu-demo&quot;</span><br><span class="line">            mode&#x3D;&quot;horizontal&quot;</span><br><span class="line">            background-color&#x3D;&quot;#545c64&quot;</span><br><span class="line">            text-color&#x3D;&quot;#fff&quot;</span><br><span class="line">            active-text-color&#x3D;&quot;#ffd04b&quot;</span><br><span class="line">            @select&#x3D;&quot;handleSelect&quot;</span><br><span class="line">            ellipsis&#x3D;&quot;false&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;el-menu-item index&#x3D;&quot;1&quot;&gt;首页&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;el-sub-menu index&#x3D;&quot;2&quot;&gt;</span><br><span class="line">            &lt;template #title&gt;学院概况&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;2-1&quot;&gt;学院简介&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;2-2&quot;&gt;学院领导&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;2-3&quot;&gt;内设机构&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-sub-menu index&#x3D;&quot;2-4&quot;&gt;</span><br><span class="line">              &lt;template #title&gt;师资队伍&lt;&#x2F;template&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;2-4-1&quot;&gt;专人教师&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;2-4-2&quot;&gt;教授队伍&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;2-4-3&quot;&gt;硕士生导师&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;2-4-4&quot;&gt;招贤纳才&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;&#x2F;el-sub-menu&gt;</span><br><span class="line">          &lt;&#x2F;el-sub-menu&gt;</span><br><span class="line">          &lt;el-sub-menu index&#x3D;&quot;3&quot;&gt;</span><br><span class="line">            &lt;template #title&gt;人才培养&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;3-1&quot;&gt;研究生教育&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;3-2&quot;&gt;本科生教育&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;&#x2F;el-sub-menu&gt;</span><br><span class="line">          &lt;el-sub-menu index&#x3D;&quot;4&quot;&gt;</span><br><span class="line">            &lt;template #title&gt;科学研究&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;4-1&quot;&gt;科研动态&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;4-2&quot;&gt;科研机构&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;4-3&quot;&gt;科研成果&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;&#x2F;el-sub-menu&gt;</span><br><span class="line">          &lt;el-menu-item index&#x3D;&quot;5&quot;&gt;师德师风&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;el-sub-menu index&#x3D;&quot;6&quot;&gt;</span><br><span class="line">            &lt;template #title&gt;招生就业&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;6-1&quot;&gt;本科生&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;6-2&quot;&gt;研究生&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;&#x2F;el-sub-menu&gt;</span><br><span class="line">          &lt;el-menu-item index&#x3D;&quot;7&quot;&gt;党建工作&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;el-sub-menu index&#x3D;&quot;8&quot;&gt;</span><br><span class="line">            &lt;template #title&gt;团学工作&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;8-1&quot;&gt;学工新闻&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;8-2&quot;&gt;青年之声江西师范大学&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;8-3&quot;&gt;团学组织&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;8-4&quot;&gt;党员服务&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;8-5&quot;&gt;管理制度&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;8-6&quot;&gt;荣誉室&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;&#x2F;el-sub-menu&gt;</span><br><span class="line">          &lt;el-sub-menu index&#x3D;&quot;9&quot;&gt;</span><br><span class="line">            &lt;template #title&gt;实验中心&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;9-1&quot;&gt;中心概况&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;9-2&quot;&gt;综合实验室&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;9-3&quot;&gt;硬件实验室&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;9-4&quot;&gt;网络实验室&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;9-5&quot;&gt;物联网实验室&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;9-6&quot;&gt;嵌入式实验室&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;&#x2F;el-sub-menu&gt;</span><br><span class="line">          &lt;el-sub-menu index&#x3D;&quot;10&quot;&gt;</span><br><span class="line">            &lt;template #title&gt;主题教育专题&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;10-1&quot;&gt;活动报告&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;10-2&quot;&gt;通知公告&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;10-3&quot;&gt;文件学习&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;10-4&quot;&gt;意见征集&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;&#x2F;el-sub-menu&gt;</span><br><span class="line">          &lt;el-sub-menu index&#x3D;&quot;11&quot;&gt;</span><br><span class="line">            &lt;template #title&gt;下载中心&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;11-1&quot;&gt;学习资料&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;11-2&quot;&gt;软件下载&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;11-3&quot;&gt;&lt;a class&#x3D;&quot;ccf&quot; href&#x3D;&quot;https:&#x2F;&#x2F;dl.ccf.org.cn&#x2F;index.html?_ack&#x3D;1&quot;&gt;CCF数字图书馆&lt;&#x2F;a&gt;&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;&#x2F;el-sub-menu&gt;</span><br><span class="line">        &lt;&#x2F;el-menu&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Header&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      activeIndex: &#39;1&#39;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleSelect(key, keyPath) &#123;</span><br><span class="line">      console.log(key, keyPath);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.header &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  border: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.img &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: auto;</span><br><span class="line">  background: url(&quot;https:&#x2F;&#x2F;jsjxy.jxnu.edu.cn&#x2F;_upload&#x2F;tpl&#x2F;00&#x2F;d8&#x2F;216&#x2F;template216&#x2F;images&#x2F;head.jpg&quot;);</span><br><span class="line">    &#x2F;&#x2F;图片链接为原本官网我直接拿过来，省的下载</span><br><span class="line">  background-size: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.imgs &#123;</span><br><span class="line">  padding: 80px 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.imgs span &#123;</span><br><span class="line">  margin-left: 35%;</span><br><span class="line">  color: #01697c;</span><br><span class="line">  font-family: &quot;华文行楷&quot;;</span><br><span class="line">  font-weight: bolder;</span><br><span class="line">  font-size: 36px;</span><br><span class="line">&#125;</span><br><span class="line">.ccf&#123;</span><br><span class="line">  color:#F5FFFA;</span><br><span class="line">  text-decoration: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Homebody内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;body&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;newsbox&quot;&gt;</span><br><span class="line">      &lt;el-row :gutter&#x3D;&quot;28&quot;&gt;</span><br><span class="line">        &lt;el-col :span&#x3D;&quot;12&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;grid-content bg-purple&quot;&gt;</span><br><span class="line">            &lt;!--    轮播图--&gt;</span><br><span class="line">            &lt;el-carousel class&#x3D;&quot;carousel&quot;&gt;</span><br><span class="line">              &lt;el-carousel-item v-for&#x3D;&quot;item in pics&quot; :key&#x3D;&quot;item.url&quot;&gt;</span><br><span class="line">                &lt;router-view v-bind:to&#x3D;&#123;&#125;&gt;&lt;img :src&#x3D;&quot;item.url&quot;&#x2F;&gt;</span><br><span class="line">                  &lt;h3&gt;&#123;&#123; item.title &#125;&#125;&lt;&#x2F;h3&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">              &lt;&#x2F;el-carousel-item&gt;</span><br><span class="line">            &lt;&#x2F;el-carousel&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;el-col&gt;</span><br><span class="line">        &lt;el-col :span&#x3D;&quot;12&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;grid-content bg-purple&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;newslist&quot;&gt;</span><br><span class="line">              &lt;el-table v-loading&#x3D;&quot;loading&quot; :data&#x3D;&quot;tableData&quot; stripe style&#x3D;&quot;width: 100%;height:135%&quot;</span><br><span class="line">                        @cell-click&#x3D;&quot;changetodetil&quot;&gt;</span><br><span class="line">                &lt;el-table-column prop&#x3D;&quot;article.title&quot; label&#x3D;&quot;学院新闻&quot;&#x2F;&gt;</span><br><span class="line">                &lt;el-table-column prop&#x3D;&quot;article.date&quot; width&#x3D;&quot;180&quot;&#x2F;&gt;</span><br><span class="line">              &lt;&#x2F;el-table&gt;</span><br><span class="line">              &lt;div style&#x3D;&quot;border:0;margin-bottom: 50%&quot;&gt;</span><br><span class="line">                &lt;el-button style&#x3D;&quot;border:0;margin-left:85%;&quot; @click&#x3D;&quot;$router.push(&#39;&#x2F;News&#39;)&quot;&gt;更多+&lt;&#x2F;el-button&gt;</span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;el-col&gt;</span><br><span class="line">      &lt;&#x2F;el-row&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;midlist&quot;&gt;</span><br><span class="line">      &lt;el-row :gutter&#x3D;&quot;2&quot;&gt;</span><br><span class="line">        &lt;el-col :span&#x3D;&quot;6&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;grid-content dangshi&quot;&gt;</span><br><span class="line">            &lt;el-icon :size&#x3D;&quot;30&quot; color&#x3D;&quot;white&quot; class&#x3D;&quot;icon&quot;&gt;</span><br><span class="line">              &lt;reading&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;el-icon&gt;</span><br><span class="line">            &lt;span&gt;党史学习专栏&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;el-col&gt;</span><br><span class="line">        &lt;el-col :span&#x3D;&quot;6&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;grid-content zhuti&quot;&gt;</span><br><span class="line">            &lt;el-icon :size&#x3D;&quot;30&quot; color&#x3D;&quot;white&quot; class&#x3D;&quot;icon&quot;&gt;</span><br><span class="line">              &lt;collection&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;el-icon&gt;</span><br><span class="line">            &lt;span&gt;主题学习专栏&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;el-col&gt;</span><br><span class="line">        &lt;el-col :span&#x3D;&quot;6&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;grid-content xiaoqing&quot;&gt;</span><br><span class="line">            &lt;el-icon :size&#x3D;&quot;30&quot; color&#x3D;&quot;white&quot; class&#x3D;&quot;icon&quot;&gt;</span><br><span class="line">              &lt;checked&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;el-icon&gt;</span><br><span class="line">            &lt;span&gt;80周年校庆&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;el-col&gt;</span><br><span class="line">        &lt;el-col :span&#x3D;&quot;6&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;grid-content xiaoyou&quot;&gt;</span><br><span class="line">            &lt;el-icon :size&#x3D;&quot;30&quot; color&#x3D;&quot;white&quot; class&#x3D;&quot;icon&quot;&gt;</span><br><span class="line">              &lt;connection&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;el-icon&gt;</span><br><span class="line">            &lt;span&gt;计信校友专栏&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;el-col&gt;</span><br><span class="line">      &lt;&#x2F;el-row&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;info&quot;&gt;</span><br><span class="line">      &lt;el-table v-loading&#x3D;&quot;loading&quot; :data&#x3D;&quot;infoData&quot; stripe style&#x3D;&quot;width: 100%;height:135%&quot; height&#x3D;&quot;100%&quot;</span><br><span class="line">                @cell-click&#x3D;&quot;changetodetil&quot;&gt;</span><br><span class="line">        &lt;el-table-column prop&#x3D;&quot;info.title&quot; label&#x3D;&quot;通知&quot;&#x2F;&gt;</span><br><span class="line">        &lt;el-table-column prop&#x3D;&quot;info.date&quot; width&#x3D;&quot;180&quot;&gt;</span><br><span class="line">          &lt;template #header&gt;</span><br><span class="line">            &lt;el-button @click&#x3D;&quot;moreinfo&quot; style&#x3D;&quot;border:0;textStyle:#8e0e0a&quot;&gt;更多+&lt;&#x2F;el-button&gt;</span><br><span class="line">          &lt;&#x2F;template&gt;</span><br><span class="line">        &lt;&#x2F;el-table-column&gt;</span><br><span class="line">      &lt;&#x2F;el-table&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;achives&quot;&gt;</span><br><span class="line">      &lt;el-header&gt;</span><br><span class="line">        &lt;el-container&gt;</span><br><span class="line">          &lt;div style&#x3D;&quot;margin-right: 90%;margin-top:1%&quot;&gt;成就&lt;&#x2F;div&gt;</span><br><span class="line">          &lt;el-button @click&#x3D;&quot;moreinfo&quot; style&#x3D;&quot;border:0;margin-top:1%&quot;&gt;更多+&lt;&#x2F;el-button&gt;</span><br><span class="line">        &lt;&#x2F;el-container&gt;</span><br><span class="line">      &lt;&#x2F;el-header&gt;</span><br><span class="line">      &lt;el-container&gt;</span><br><span class="line">        &lt;el-aside width&#x3D;&quot;30%&quot;&gt;</span><br><span class="line">          &lt;el-card :body-style&#x3D;&quot;&#123; padding: &#39;0px&#39; &#125;&quot; shadow&#x3D;&quot;hover&quot;&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;shadow.elemecdn.com&#x2F;app&#x2F;element&#x2F;hamburger.9cf7b091-55e9-11e9-a976-7f4d0b07eef6.png&quot;</span><br><span class="line">                 class&#x3D;&quot;image&quot;&#x2F;&gt;</span><br><span class="line">            &lt;div style&#x3D;&quot;padding: 14px&quot;&gt;</span><br><span class="line">              &lt;span&gt;Yummy hamburger&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;&#x2F;el-card&gt;</span><br><span class="line">        &lt;&#x2F;el-aside&gt;</span><br><span class="line">        &lt;el-container&gt;</span><br><span class="line">          &lt;el-main&gt;</span><br><span class="line">            &lt;el-row :gutter&#x3D;&quot;12&quot; style&#x3D;&quot;margin-top:2%;margin-bottom: 2%&quot;&gt;</span><br><span class="line">              &lt;el-col :span&#x3D;&quot;8&quot;&gt;</span><br><span class="line">                &lt;el-card shadow&#x3D;&quot;hover&quot;&gt; hover&lt;&#x2F;el-card&gt;</span><br><span class="line">              &lt;&#x2F;el-col&gt;</span><br><span class="line">              &lt;el-col :span&#x3D;&quot;8&quot;&gt;</span><br><span class="line">                &lt;el-card shadow&#x3D;&quot;hover&quot;&gt; Hover&lt;&#x2F;el-card&gt;</span><br><span class="line">              &lt;&#x2F;el-col&gt;</span><br><span class="line">              &lt;el-col :span&#x3D;&quot;8&quot;&gt;</span><br><span class="line">                &lt;el-card shadow&#x3D;&quot;hover&quot;&gt; hover&lt;&#x2F;el-card&gt;</span><br><span class="line">              &lt;&#x2F;el-col&gt;</span><br><span class="line">            &lt;&#x2F;el-row&gt;</span><br><span class="line">            &lt;el-row :gutter&#x3D;&quot;12&quot; style&#x3D;&quot;margin-top:2%;margin-bottom: 2%&quot;&gt;</span><br><span class="line">              &lt;el-col :span&#x3D;&quot;8&quot;&gt;</span><br><span class="line">                &lt;el-card shadow&#x3D;&quot;hover&quot;&gt; hover&lt;&#x2F;el-card&gt;</span><br><span class="line">              &lt;&#x2F;el-col&gt;</span><br><span class="line">              &lt;el-col :span&#x3D;&quot;8&quot;&gt;</span><br><span class="line">                &lt;el-card shadow&#x3D;&quot;hover&quot;&gt; Hover&lt;&#x2F;el-card&gt;</span><br><span class="line">              &lt;&#x2F;el-col&gt;</span><br><span class="line">              &lt;el-col :span&#x3D;&quot;8&quot;&gt;</span><br><span class="line">                &lt;el-card shadow&#x3D;&quot;hover&quot;&gt; hover&lt;&#x2F;el-card&gt;</span><br><span class="line">              &lt;&#x2F;el-col&gt;</span><br><span class="line">            &lt;&#x2F;el-row&gt;</span><br><span class="line">          &lt;&#x2F;el-main&gt;</span><br><span class="line">        &lt;&#x2F;el-container&gt;</span><br><span class="line">      &lt;&#x2F;el-container&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;Academic&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;el-backtop&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;Connection, Checked, Collection, Reading&#125; from &#39;@element-plus&#x2F;icons-vue&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;homebody&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Connection, Checked, Collection, Reading</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      pics: [</span><br><span class="line">        &#123;url: require(&quot;..&#x2F;assets&#x2F;pic1.jpg&quot;), title: &quot;标题1sdfasdf&quot;&#125;,</span><br><span class="line">        &#123;url: require(&quot;..&#x2F;assets&#x2F;pic2.jpg&quot;), title: &quot;标题2sdfasdf&quot;&#125;,</span><br><span class="line">        &#123;url: require(&quot;..&#x2F;assets&#x2F;pic3.jpg&quot;), title: &quot;标题3dfasdfsda&quot;&#125;,</span><br><span class="line">        &#123;url: require(&quot;..&#x2F;assets&#x2F;pic4.jpg&quot;), title: &quot;标题4dfasdfdsa&quot;&#125;</span><br><span class="line">      ],</span><br><span class="line">      tableData: [</span><br><span class="line">        &#123;</span><br><span class="line">          article: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          article: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          article: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          article: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          article: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">      ],</span><br><span class="line">      infoData: [</span><br><span class="line">        &#123;</span><br><span class="line">          info: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          info: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          info: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          info: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          info: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          info: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changetodetil() &#123;</span><br><span class="line">      alert(&quot;跳转中&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    moreinfo() &#123;</span><br><span class="line">      alert(&quot;正在跳转到更多&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.newsbox &#123;</span><br><span class="line">  margin: 2% 10%;</span><br><span class="line">  width: 80%;</span><br><span class="line">  height: 35%;</span><br><span class="line">  box-shadow: 4px 4px 15px #dad9d9;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.newslist &#123;</span><br><span class="line">  height: 190px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.newslist span &#123;</span><br><span class="line">  margin-left: 2%;</span><br><span class="line">  color: brown;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.midlist &#123;</span><br><span class="line">  margin: 2% 10%;</span><br><span class="line">  width: 80%;</span><br><span class="line">  height: 35%;</span><br><span class="line">  box-shadow: 4px 4px 15px #dad9d9;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.info &#123;</span><br><span class="line">  margin: 2% 10%;</span><br><span class="line">  width: 80%;</span><br><span class="line">  height: 40%;</span><br><span class="line">  box-shadow: 4px 4px 15px #dad9d9;</span><br><span class="line">border-radius: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.info span &#123;</span><br><span class="line">  margin-right: 2%;</span><br><span class="line">  color: brown;</span><br><span class="line">  float: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.achives &#123;</span><br><span class="line">  margin: 2% 10%;</span><br><span class="line">  width: 80%;</span><br><span class="line">  height: 35%;</span><br><span class="line">  box-shadow: 4px 4px 15px #dad9d9;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.carousel &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.carousel &gt; h4 &#123;</span><br><span class="line">  float: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.midlist .grid-content &#123;</span><br><span class="line">  transition: all 0.6s;</span><br><span class="line">  box-shadow: 4px 4px 15px #dad9d9;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.midlist .grid-content:hover &#123;</span><br><span class="line">  transform: scale(1.2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.grid-content &gt; span &#123;</span><br><span class="line">  font-family: 华文仿宋;</span><br><span class="line">  font-style: normal;</span><br><span class="line">  font-size: 28px;</span><br><span class="line">  margin-left: 20%;</span><br><span class="line">  padding: 5%;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.icon &#123;</span><br><span class="line">  margin-top: 5%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dangshi &#123;</span><br><span class="line">  background-color: #b1b817;</span><br><span class="line">  text-align: center;</span><br><span class="line">  height: auto;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.zhuti &#123;</span><br><span class="line">  background-color: #1a8dc2;</span><br><span class="line">  text-align: center;</span><br><span class="line">  height: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.xiaoqing &#123;</span><br><span class="line">  background-color: #b82b2c;</span><br><span class="line">  text-align: center;</span><br><span class="line">  height: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.xiaoyou &#123;</span><br><span class="line">  background-color: #8e0e0a;</span><br><span class="line">  text-align: center;</span><br><span class="line">  height: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里并没有真实数据，都是自己先伪造的数据，因为我是同时写的，先想到写前端就写前端，想到写后端就写后端，，这里这种处理方式不好，按道理应该先写后端，然后前端方便获取数据便于调试，大家不要学习</p><p>然后是Footer内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;footer&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;img&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;imgs&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;foot-left&quot; &gt;</span><br><span class="line">    &lt;a&gt;校内链接：&lt;&#x2F;a&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.jxnu.edu.cn&#x2F;&quot; target&#x3D;&quot;_blank&quot;&gt;江西师范大学&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;jwc.jxnu.edu.cn&#x2F;&quot; target&#x3D;&quot;_blank&quot;&gt;师大教务在线&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;rsc.jxnu.edu.cn&#x2F;&quot; target&#x3D;&quot;_blank&quot;&gt;江西师大人事网&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;p class&#x3D;&quot;copyright&quot;&gt;&lt;span&gt;Copyright©2021 江西师范大学美术学院； 地址：江西省南昌市紫阳大道99号； 电话：0791-88120416， 88120411；邮编：330022&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p class&#x3D;&quot;copyright&quot;&gt;&lt;span&gt;技术支持：whk&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;foot&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.footer &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  border: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">.img &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: auto;</span><br><span class="line">  background: url(&quot;https:&#x2F;&#x2F;jsjxy.jxnu.edu.cn&#x2F;_upload&#x2F;tpl&#x2F;00&#x2F;d8&#x2F;216&#x2F;template216&#x2F;images&#x2F;under1.jpg&quot;);</span><br><span class="line">  background-size: cover;</span><br><span class="line">&#125;</span><br><span class="line">.imgs &#123;</span><br><span class="line">  padding: 80px 50px;</span><br><span class="line">&#125;</span><br><span class="line">.foot-left&#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.foot-left a&#123;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  color: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>到这里，主页的三个组件基本完成，还有部分功能没有加上，后期再加。</p><h3 id="应用首页组件"><a href="#应用首页组件" class="headerlink" title="应用首页组件"></a>应用首页组件</h3><p>在src文件下创建view文件夹，然后在其中新建一个Home组件</p><p>将前面写好的三个组件引入到Home文件夹中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Header&#x2F;&gt;</span><br><span class="line">  &lt;Homebody&#x2F;&gt;</span><br><span class="line">  &lt;Footer&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Header from &quot;@&#x2F;components&#x2F;Header&quot;;</span><br><span class="line">import Homebody from &quot;@&#x2F;components&#x2F;Homebody&quot;;</span><br><span class="line">import Footer from &quot;@&#x2F;components&#x2F;Footer&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Home&quot;,</span><br><span class="line">  components: &#123; Header,Homebody,Footer&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>再修改App.vue（src目录下）文件，改为路由到Home</p><p>修改后文件内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;router-view&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此，首页就创建完成</p><h3 id="页面效果显示"><a href="#页面效果显示" class="headerlink" title="页面效果显示"></a>页面效果显示</h3><p>项目文件夹内打开命令行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p><img src="https://www.whkblog.work/blog/images/jxnu/Homeview1.png"></p><p>到此首页占告一段落</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;去年国庆的时候乘着放假学完了vue,然后10月份跟11月份又自己看B站视频学完了django、DRF，之后又跟着一个大佬的博客做了一个vue</summary>
      
    
    
    
    <category term="前后端分离项目" scheme="https://www.whkblog.work/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="python" scheme="https://www.whkblog.work/tags/python/"/>
    
    <category term="vue" scheme="https://www.whkblog.work/tags/vue/"/>
    
    <category term="django" scheme="https://www.whkblog.work/tags/django/"/>
    
    <category term="后端" scheme="https://www.whkblog.work/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>python_multi</title>
    <link href="https://www.whkblog.work/2021/12/24/python-multi/"/>
    <id>https://www.whkblog.work/2021/12/24/python-multi/</id>
    <published>2021-12-24T02:44:16.000Z</published>
    <updated>2021-12-26T07:52:19.075Z</updated>
    
    <content type="html"><![CDATA[<p>这两天学习了下多线程相关知识，观看的是b站上一个up主的视频，这里做一个总结，方便以后回忆一下。</p><p>视频链接<a href="https://www.bilibili.com/video/BV1bK411A7tV">https://www.bilibili.com/video/BV1bK411A7tV</a></p><p>以下文章中出现的图片出自视频截图</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="CPU-BOUND-amp-I-O-BOUND"><a href="#CPU-BOUND-amp-I-O-BOUND" class="headerlink" title="CPU-BOUND &amp; I/O-BOUND"></a>CPU-BOUND &amp; I/O-BOUND</h2><h3 id="cpu-bound"><a href="#cpu-bound" class="headerlink" title="cpu-bound"></a>cpu-bound</h3><p>计算密集型、☞I/O在很短时间内可以完成，CPU需要大量的计算和处理，特点是CPU占用率相当高</p><p>例如：解压缩，加密压缩、正则表达式搜索</p><h4 id="i-o-bound"><a href="#i-o-bound" class="headerlink" title="i/o-bound"></a>i/o-bound</h4><p>IO密集型☞系统运作大部分状况是CPU在登I/O（内存硬盘）的读/写操作，CPU占用率仍然较低</p><p>例如：文件处理程序、网络爬虫程序</p><h1 id="多线程、多进程、多协程"><a href="#多线程、多进程、多协程" class="headerlink" title="多线程、多进程、多协程"></a>多线程、多进程、多协程</h1><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><p>进程是操作系统进行资源分配与调度的基本单位，是具有一定独立功能的程序关于某个数据集合上的一次运行活动，而程序是指令、数据及其组织形式的描述。简言之，进程是程序的实体，一个进程就是一个独立的程序，程序一旦运行就是进程。</p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>线程是操作系统程序执行流的最小单元，即进程中的最小运行单元，也是处理器调度和分派的基本单位。进程由一个或多个线程组成，同一进程中的多个线程将共享该进程中的全部系统资源，一个进程（程序）执行过程中，可能有多个线程在运行。</p><h3 id="多协程"><a href="#多协程" class="headerlink" title="多协程"></a>多协程</h3><p>协程，又称微线程，纤程，英文名为Coroutine，是一种用户态的轻量级线程，其本质上是一个单线程。协程可以看作是子程序，但执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行。</p><h2 id="多线程、多进程、多协程的对比"><a href="#多线程、多进程、多协程的对比" class="headerlink" title="多线程、多进程、多协程的对比"></a>多线程、多进程、多协程的对比</h2><p>关系：一个进程可以启动N个线程、一个线程可以启动N个协程</p><h4 id="多线程-1"><a href="#多线程-1" class="headerlink" title="多线程"></a>多线程</h4><p>优点：可以利用多核CUP并行运算</p><p>缺点：占用资源最多、可启动数目比线程少</p><p>适用于： CPU密集型计算</p><h4 id="多进程-1"><a href="#多进程-1" class="headerlink" title="多进程"></a>多进程</h4><p>优点：相比进程更轻量级、占用资源少</p><p>缺点：</p><p>​        相比进程：多线程只能并发执行，不能利用多CPU（由于python 有GIL锁的缘故）</p><p>​        相比协程：启动数目有限制、占用内存资源，有多线程切换开销</p><p>适用于： IO密集型计算、同时运行任务数要求不多</p><h4 id="多协程-1"><a href="#多协程-1" class="headerlink" title="多协程"></a>多协程</h4><p>优点：内存开销最少、启动协程数量最多</p><p>缺点：支持库有限制（aiohttp &amp; requests）、代码实现复杂</p><p>适用于：IO密集型计算、需要超多任务运行、但有现成库支持的场景</p><h1 id="三种方式的用法及案例"><a href="#三种方式的用法及案例" class="headerlink" title="三种方式的用法及案例"></a>三种方式的用法及案例</h1><h2 id="技术选择"><a href="#技术选择" class="headerlink" title="技术选择"></a>技术选择</h2><p>根据任务特点进行数据选择</p><p>如果是CPU密集型，选择多进程multiprocessing。</p><p>如果是IO密集型，任务量多少？是否有协程库支持？协程实现复杂度？</p><h2 id="前缀知识GIL锁"><a href="#前缀知识GIL锁" class="headerlink" title="前缀知识GIL锁"></a>前缀知识GIL锁</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>全局解释器锁（Global Interpreter Lock,简写：GIL）</p><p>是计算机程序设计语言解释器用于同步线程的一种机制，它使得任何时刻仅有一个线程在执行。即便在多核心处理器上，使用GIL的解释器也只允许同一时间执行一个线程</p><p>用于解决多线程之间数据完整性和状态同步问题</p><p>具体可看<a href="https://www.bilibili.com/video/BV1bK411A7tV?p=3&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1bK411A7tV?p=3&amp;spm_id_from=pageDriver</a> 第7分钟左右的解释</p><p>好处：简化python对共享资源的管理</p><h3 id="如何规避"><a href="#如何规避" class="headerlink" title="如何规避"></a>如何规避</h3><p>1、多线程threading机制，用于IO密集型计算</p><p>2、使用multiprocessing的多线程机制是实现并行计算、利用多核CPU优势</p><p>​        python 提供了multiprocessing模块</p><h2 id="多线程-2"><a href="#多线程-2" class="headerlink" title="多线程"></a>多线程</h2><h3 id="多线程数据通讯"><a href="#多线程数据通讯" class="headerlink" title="多线程数据通讯"></a>多线程数据通讯</h3><p>queue.Queue可用于多线程之间的、线程安全的数据通信</p><p><img src="https://www.whkblog.work/blog/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B/queue.png"></p><h3 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h3><p><img src="https://www.whkblog.work/blog/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B/producer_consumer.png"></p><h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>线程安全指某个函数、函数库在多线程环境中被调用时，能够正确处理多个线程之间的共享变量，使程序功能正确完成</p><p>由于线程的执行会随时发生切换，就造成了不可预料的结果，出现线程不安全</p><h4 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h4><p>Lock用于解决线程安全问题</p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><strong>线程周期</strong></p><p><img src="https://www.whkblog.work/blog/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B/threading_life.png" alt="线程周期"></p><p>新建线程系统需要分配资源、终止线程系统需要回收资源，如果可以重用线程，则可以减去新建/终止的开销</p><p><img src="https://www.whkblog.work/blog/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B/threading_process.png" alt="线程池原理"></p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>1、提升性能：减去了大量新建、终止线程的开销，重用了线程资源</p><p>2、使用场景：适合处理突发性大量请求或需要大量线程完成任务，但实际任务处理时间较短</p><p>3、防御功能：能有效避免系统因为创建县城过多，而导致系统负荷过大相应变慢等问题（线程池线程数目                可以固定）</p><p>4：代码优势：使用线程池的语法比自己新建线程执行线程更加简洁</p><h4 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h4><p><img src="https://www.whkblog.work/blog/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B/ThreadPoolExecutor.png" alt="线程池用法"></p><h2 id="多进程-2"><a href="#多进程-2" class="headerlink" title="多进程"></a>多进程</h2><p>引入缘故</p><p>多线程虽然可以加速运行，但遇到CPU密集型计算依然会速度变慢，multirocessing模块可以解决多线程中GIL缺陷。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>实际上与多线程的用法差不多</p><p>这里需要注意到一点是线程安全锁即LOCK使用缘由：一个是安全锁防止冲突的（if） 一个是生产者消费者模式的</p><p><img src="https://www.whkblog.work/blog/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B/multiprocessing_ways.png" alt="多线程与多进程用法对比"></p><h2 id="多协程-2"><a href="#多协程-2" class="headerlink" title="多协程"></a>多协程</h2><h3 id="协程：在单线程内实现并发"><a href="#协程：在单线程内实现并发" class="headerlink" title="协程：在单线程内实现并发"></a>协程：在单线程内实现并发</h3><p>核心原理：利用一个超级循环（既while true）循环</p><p>核心原理：配合IO多路复用原理（IO时CPU可以干其他的事）</p><h3 id="实现：异步IO库——asyncio"><a href="#实现：异步IO库——asyncio" class="headerlink" title="实现：异步IO库——asyncio"></a>实现：异步IO库——asyncio</h3><p><strong>使用前提</strong>：要用在IO异步编程中，依赖的库必须支持异步IO特性，在爬虫中的<strong>requests</strong>不支持异步需使用<strong>aiohttp</strong> </p><p><img src="https://www.whkblog.work/blog/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B/asyncio.png" alt="协程爬虫模板"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这两天学习了下多线程相关知识，观看的是b站上一个up主的视频，这里做一个总结，方便以后回忆一下。&lt;/p&gt;
&lt;p&gt;视频链接&lt;a href=&quot;https://www.bilibili.com/video/BV1bK411A7tV&quot;&gt;https://www.bilibili.co</summary>
      
    
    
    
    <category term="python" scheme="https://www.whkblog.work/categories/python/"/>
    
    
    <category term="python" scheme="https://www.whkblog.work/tags/python/"/>
    
    <category term="多线程" scheme="https://www.whkblog.work/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>webcrawle</title>
    <link href="https://www.whkblog.work/2021/11/30/webcrawle_douban/"/>
    <id>https://www.whkblog.work/2021/11/30/webcrawle_douban/</id>
    <published>2021-11-30T02:30:57.000Z</published>
    <updated>2021-12-26T07:47:00.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬取豆瓣评论数据"><a href="#爬取豆瓣评论数据" class="headerlink" title="爬取豆瓣评论数据"></a>爬取豆瓣评论数据</h1><p>此教程时教如何爬取豆瓣网页数据，是笔者上爬虫课的一个实验作业；这里写下个人实现过程</p><h2 id="一、查看网页结构"><a href="#一、查看网页结构" class="headerlink" title="一、查看网页结构"></a>一、查看网页结构</h2><p>进入随机一个电影的评论区，摁F12查看网页数据</p><p><img src="https://www.whkblog.work/blog/images/%E8%B1%86%E7%93%A3/%E7%BD%91%E9%A1%B5%E7%BB%93%E6%9E%84.PNG"></p><p><img src="https://www.whkblog.work/blog/images/%E8%B1%86%E7%93%A3/%E7%BD%91%E9%A1%B5%E7%BB%93%E6%9E%84.PNG"></p><p>可以看到豆瓣评论区评论内容就是直接的html格式返回的数据；</p><p>数据的接口就是：</p><p><a href="https://movie.douban.com/subject/26897885/comments?status=P">https://movie.douban.com/subject/26897885/comments?status=P</a></p><p>然后我们分析一下这个链接的结构</p><p><a href="http://movie.douban.com/subject/">http://movie.douban.com/subject/</a> 这一段可以看懂，那26892885这一数据是代表什么？先放下不表。</p><p>/comments?status=P这里不用讲，就是评论，？好后面只要学过的网页的应该能知道是参数</p><p>再随便进入另外一个电影的评论区</p><p><a href="https://movie.douban.com/subject/30382416/comments?status=P">https://movie.douban.com/subject/30382416/comments?status=P</a></p><p>与上面电影的链接对比</p><p><a href="https://movie.douban.com/subject/26897885/comments?status=P">https://movie.douban.com/subject/26897885/comments?status=P</a></p><p>我们可以发现，这中间这串数字代表的应该就是电影的id</p><h2 id="二、爬取评论数据"><a href="#二、爬取评论数据" class="headerlink" title="二、爬取评论数据"></a>二、爬取评论数据</h2><p>首先，我们将要用到的库引入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> HTTPError</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> time</span><br></pre></td></tr></table></figure><p>urllib.request是用来向服务器发送请求获取网页数据的</p><p>bs4 用于解析网页结构</p><p>randint、time 主要使用其中的sleep函数，防止电脑爬取的过快，被服务器识别出，被封IP，用于反扒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">get_comments</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, save_name</span>):</span></span><br><span class="line">        self.save_name = save_name</span><br><span class="line">        self.url_pre = <span class="string">&#x27;https://movie.douban.com/subject/26897885/comments?status=P&#x27;</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;movie.douban.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;个人cookie数据&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0(WindowsNT10.0;Win64;x64)AppleWebKit/537.36(KHTML,&#x27;</span></span><br><span class="line">                          <span class="string">&#x27;likeGecko)Chrome/96.0.4664.45Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.douban.com/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这里先初始化后面会使用到的参数，save_name 顾名思义，就是保存的名字，</p><p>url_pre则是前面的评论数据的请求网址；headers 则是我们伪装成流浪器，除cookie外，大同小异，cookie则是每台机器都不同</p><p>现在来定义数据获取函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">self</span>):</span></span><br><span class="line">req = urllib.request.Request(self.url_pre, headers=self.headers)</span><br><span class="line">    req = urllib.request.urlopen(req)</span><br><span class="line">    content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br></pre></td></tr></table></figure><p>先向服务器请求数据，并将其编码成utf-8的格式</p><p>数据拿到后如何获取我要的数据呢？</p><p>我们先print获取到的数据</p><p><img src="https://www.whkblog.work/blog/images/%E8%B1%86%E7%93%A3/print.PNG"></p><p>可以看到，返回的就是html数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里我们直接获取到所有评论内容，find_all(‘div’,’comment-item’)返回的是一个列表</p><p>先打印一下，看看内容</p><p><img src="https://www.whkblog.work/blog/images/%E8%B1%86%E7%93%A3/commentlist.PNG"></p><p>可以看到，列表元素还是一段一段的html的数据，这肯定不是我们所需要的数据</p><p>前面我们不是查看了网页结构嘛</p><p><img src="https://www.whkblog.work/blog/images/%E8%B1%86%E7%93%A3/destruct.PNG"></p><p>这些标注出来的就是我们需要的，对于每一评论的数据</p><p>于是，我们遍历列表，对每条数据进行处理,并对数据进行储存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line">        evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">        ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">        times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">        vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">        content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">        strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; &quot;</span> + evaluation + <span class="string">&quot; &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里我先做一个处理，先判断一下comment_list 是否为空，别面出现一些不可预知的问题，导致了为爬取到，再进行遍历</p><p>这样，就对每调评论的信息提取出来了，具体代码我就解释了。</p><p>但是，这样不行，这样数据只是在内存中，而我们需要保存下来我们要的数据，添加写数据的步骤</p><p>这里我们将前面的代码整合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">self</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(self.save_name, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    f.truncate()  <span class="comment"># 清空文件</span></span><br><span class="line">    f.write(<span class="string">&quot;id     时间      点赞     星级      评论\n&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在获取评论...&quot;</span>)</span><br><span class="line">    <span class="comment"># 先爬取第一页内容</span></span><br><span class="line">    url = self.url_pre</span><br><span class="line">    req = urllib.request.Request(url, headers=self.headers)</span><br><span class="line">    req = urllib.request.urlopen(req)</span><br><span class="line">    content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    print(soupComment)</span><br><span class="line">    comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br><span class="line">    print(comments_list)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line"> evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">             ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">             times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">             vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">             content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">             strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; &quot;</span> + evaluation + <span class="string">&quot; &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">             f.write(strings)</span><br><span class="line">     f.close() <span class="comment">#打开文件后还要关闭文件</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>到这里，我们就完成了对一个网页的内容爬取，但是光爬一页数据一般来讲是没有用的</p><h2 id="三、翻页爬取——爬取更多页"><a href="#三、翻页爬取——爬取更多页" class="headerlink" title="三、翻页爬取——爬取更多页"></a>三、翻页爬取——爬取更多页</h2><p>怎么爬取下一页呢？</p><p>我们点击下一页</p><p>可以看到网页连接多了一段</p><p>第一页：<a href="https://movie.douban.com/subject/26897885/comments?status=P">https://movie.douban.com/subject/26897885/comments?status=P</a></p><p>第二页：<a href="https://movie.douban.com/subject/26897885/comments?start=20&amp;limit=20&amp;status=P&amp;sort=new_score">https://movie.douban.com/subject/26897885/comments?start=20&amp;limit=20&amp;status=P&amp;sort=new_score</a></p><p>第三页：<a href="https://movie.douban.com/subject/26897885/comments?start=40&amp;limit=20&amp;status=P&amp;sort=new_score">https://movie.douban.com/subject/26897885/comments?start=40&amp;limit=20&amp;status=P&amp;sort=new_score</a></p><p>。。。。。。</p><p>可以发现就是连接改变了</p><p>这时候，是不是我们可以考虑更改请求url的不同来进行处理，一种方式是，把pre_url 改掉，然后使用后面的，每次请求时调整start这个参数，以获取不同页的评论内容。</p><p>不过这里我们不这么做，我们怎么做呢？</p><p>我们再查看下一页按钮的网页结构</p><p><img src="https://www.whkblog.work/blog/images/%E8%B1%86%E7%93%A3/next.PNG"></p><p>可以发现，a标签内的href 链接不就是第二页第三页等等改变的数据嘛？</p><p>于是乎，我们可以这样处理</p><p>对__init__进行修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, save_name</span>):</span></span><br><span class="line">        self.save_name = save_name</span><br><span class="line">        self.url_pre = <span class="string">&#x27;https://movie.douban.com/subject/26897885/comments?status=P&#x27;</span></span><br><span class="line">        self.<span class="built_in">next</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>将请求代码也改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url = self.url_pre + self.<span class="built_in">next</span></span><br><span class="line">req = urllib.request.Request(url, headers=self.headers)</span><br></pre></td></tr></table></figure><p>在遍历完comment_list后，获取一下self.next</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">self</span>):</span></span><br><span class="line">    ....</span><br><span class="line">     f.close() <span class="comment">#打开文件后还要关闭文件</span></span><br><span class="line">        self.<span class="built_in">next</span> = soupComment.find(<span class="string">&#x27;a&#x27;</span>, attrs=&#123;<span class="string">&quot;data-page&quot;</span>: <span class="string">&quot;next&quot;</span>&#125;).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br></pre></td></tr></table></figure><p>接着，我们再进行翻页处理</p><p>当有next的时候，就继续获取继续写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">self</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(self.save_name, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    f.truncate()  <span class="comment"># 清空文件</span></span><br><span class="line">    f.write(<span class="string">&quot;id     时间      点赞     星级      评论\n&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在获取评论...&quot;</span>)</span><br><span class="line">    <span class="comment"># 先爬取第一页内容</span></span><br><span class="line">    url = self.url_pre + self.<span class="built_in">next</span></span><br><span class="line">    req = urllib.request.Request(url, headers=self.headers)</span><br><span class="line">    req = urllib.request.urlopen(req)</span><br><span class="line">    content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    print(soupComment)</span><br><span class="line">    comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br><span class="line">    print(comments_list)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line">            evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">            ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">            times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">            vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">            content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">            strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; 该用户没有进行评价 &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">            f.write(strings)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(id,time,vote,evaluation,content)</span></span><br><span class="line">        <span class="comment"># 获取下一页对应的url</span></span><br><span class="line">        self.<span class="built_in">next</span> = soupComment.find(<span class="string">&#x27;a&#x27;</span>, attrs=&#123;<span class="string">&quot;data-page&quot;</span>: <span class="string">&quot;next&quot;</span>&#125;).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br><span class="line">    <span class="comment"># 如果有下一页</span></span><br><span class="line">    <span class="keyword">while</span> self.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        time.sleep(randint(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">        print(<span class="string">&quot;翻页&quot;</span>)</span><br><span class="line">        url = self.url_pre + self.<span class="built_in">next</span></span><br><span class="line">        req = urllib.request.Request(url, headers=self.headers)</span><br><span class="line">        req = urllib.request.urlopen(req)</span><br><span class="line">        content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line">                evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">            ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">            times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">            vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">            content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">            strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; 该用户没有进行评价 &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">            f.write(strings)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>这时候，爬完了，我们运行测试一下（笔者这里测试的url 是 <a href="https://movie.douban.com/subject/26588308/comments%EF%BC%89">https://movie.douban.com/subject/26588308/comments）</a></p><p><img src="https://www.whkblog.work/blog/images/%E8%B1%86%E7%93%A3/test1.PNG"></p><p>结果一发现，诶，怎么回事啊，都还没有翻页，就开始报错</p><p>不对啊，怎么评价星级这一条怎么会为空呢？</p><p>检查一下代码，再运行一下，还是不行，于是 我们从头开始，再查看网页结构</p><p>诶，发现</p><p><img src="https://www.whkblog.work/blog/images/%E8%B1%86%E7%93%A3/test2.png"></p><p>怎么有一条评论没有星级评价，于是乎，我们再次修改，以处理这个bug</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">self</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(self.save_name, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    f.truncate()  <span class="comment"># 清空文件</span></span><br><span class="line">    f.write(<span class="string">&quot;id     时间      点赞     星级      评论\n&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在获取评论...&quot;</span>)</span><br><span class="line">    <span class="comment"># 先爬取第一页内容</span></span><br><span class="line">    url = self.url_pre + self.<span class="built_in">next</span></span><br><span class="line">    req = urllib.request.Request(url, headers=self.headers)</span><br><span class="line">    req = urllib.request.urlopen(req)</span><br><span class="line">    content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(soupComment)</span></span><br><span class="line">    comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(comments_list)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line">            <span class="keyword">try</span>:  <span class="comment"># 用于防止出现有的评论有评论内容但是没有对电影进行星级评分</span></span><br><span class="line">            evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">            <span class="keyword">except</span> AttributeError:</span><br><span class="line">                evaluation = <span class="string">&quot;&quot;</span></span><br><span class="line">            ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">            times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">            vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">            content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(evaluation) != <span class="number">0</span>:</span><br><span class="line">                strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; &quot;</span> + evaluation + <span class="string">&quot; &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                <span class="comment"># print(strings)</span></span><br><span class="line">                f.write(strings)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; 该用户没有进行评价 &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                <span class="comment"># print(strings)</span></span><br><span class="line">                f.write(strings)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(id,time,vote,evaluation,content)</span></span><br><span class="line">        <span class="comment"># 获取下一页对应的url</span></span><br><span class="line">        self.<span class="built_in">next</span> = soupComment.find(<span class="string">&#x27;a&#x27;</span>, attrs=&#123;<span class="string">&quot;data-page&quot;</span>: <span class="string">&quot;next&quot;</span>&#125;).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br><span class="line">    <span class="comment"># 如果有下一页</span></span><br><span class="line">    <span class="keyword">while</span> self.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        time.sleep(randint(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">        print(<span class="string">&quot;翻页&quot;</span>)</span><br><span class="line">        url = self.url_pre + self.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            req = urllib.request.Request(url, headers=self.headers)</span><br><span class="line">            req = urllib.request.urlopen(req)</span><br><span class="line">            content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">            comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line">                    <span class="keyword">try</span>: <span class="comment"># 用于防止出现有的评论有评论内容但是没有对电影进行星级评分</span></span><br><span class="line">                    evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">                    <span class="keyword">except</span> AttributeError: <span class="comment"># 找不到</span></span><br><span class="line">                        evaluation = <span class="string">&quot;&quot;</span></span><br><span class="line">                    ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">                    times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">                    vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">                    content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(evaluation) != <span class="number">0</span>:</span><br><span class="line">                        strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; &quot;</span> + evaluation + <span class="string">&quot; &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                        f.write(strings)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; 该用户没有进行评价 &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                        f.write(strings)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># print(id,time,vote,evaluation,content)d</span></span><br><span class="line">                <span class="comment"># 获取下一页对应的url</span></span><br><span class="line">                self.<span class="built_in">next</span> = soupComment.find(<span class="string">&#x27;a&#x27;</span>, attrs=&#123;<span class="string">&quot;data-page&quot;</span>: <span class="string">&quot;next&quot;</span>&#125;).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>我们再次测试：</p><p>会发现，当爬取到20页时，会出现一个错误：</p><p>httperror</p><p>这不是我们的问题，这个是豆瓣设置的，如果要看20页以后的评论数据就需要登录了，这里笔者并没有对这个进行处理</p><p>我们可以对其稍微处理一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">self</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(self.save_name, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    f.truncate()  <span class="comment"># 清空文件</span></span><br><span class="line">    f.write(<span class="string">&quot;id     时间      点赞     星级      评论\n&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在获取评论...&quot;</span>)</span><br><span class="line">    <span class="comment"># 先爬取第一页内容</span></span><br><span class="line">    url = self.url_pre + self.<span class="built_in">next</span></span><br><span class="line">    req = urllib.request.Request(url, headers=self.headers)</span><br><span class="line">    req = urllib.request.urlopen(req)</span><br><span class="line">    content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line">            <span class="keyword">try</span>:  <span class="comment"># 用于防止出现有的评论有评论内容但是没有对电影进行星级评分</span></span><br><span class="line">                evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">            <span class="keyword">except</span> AttributeError:</span><br><span class="line">                evaluation = <span class="string">&quot;&quot;</span></span><br><span class="line">            ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">            times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">            vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">            content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(evaluation) != <span class="number">0</span>:</span><br><span class="line">                strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; &quot;</span> + evaluation + <span class="string">&quot; &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                <span class="comment"># print(strings)</span></span><br><span class="line">                f.write(strings)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; 该用户没有进行评价 &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                <span class="comment"># print(strings)</span></span><br><span class="line">                f.write(strings)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(id,time,vote,evaluation,content)</span></span><br><span class="line">        <span class="comment"># 获取下一页对应的url</span></span><br><span class="line">        self.<span class="built_in">next</span> = soupComment.find(<span class="string">&#x27;a&#x27;</span>, attrs=&#123;<span class="string">&quot;data-page&quot;</span>: <span class="string">&quot;next&quot;</span>&#125;).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br><span class="line">    <span class="comment"># 如果有下一页</span></span><br><span class="line">    <span class="keyword">while</span> self.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        time.sleep(randint(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">        print(<span class="string">&quot;翻页&quot;</span>)</span><br><span class="line">        url = self.url_pre + self.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            req = urllib.request.Request(url, headers=self.headers)</span><br><span class="line">            req = urllib.request.urlopen(req)</span><br><span class="line">            content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">            comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line">                    <span class="keyword">try</span>: <span class="comment"># 用于防止出现有的评论有评论内容但是没有对电影进行星级评分</span></span><br><span class="line">                        evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">                    <span class="keyword">except</span> AttributeError: <span class="comment"># 找不到</span></span><br><span class="line">                        evaluation = <span class="string">&quot;&quot;</span></span><br><span class="line">                    ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">                    times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">                    vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">                    content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(evaluation) != <span class="number">0</span>:</span><br><span class="line">                        strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; &quot;</span> + evaluation + <span class="string">&quot; &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                        f.write(strings)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; 该用户没有进行评价 &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                        f.write(strings)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># print(id,time,vote,evaluation,content)d</span></span><br><span class="line">                <span class="comment"># 获取下一页对应的url</span></span><br><span class="line">                self.<span class="built_in">next</span> = soupComment.find(<span class="string">&#x27;a&#x27;</span>, attrs=&#123;<span class="string">&quot;data-page&quot;</span>: <span class="string">&quot;next&quot;</span>&#125;).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> HTTPError:</span><br><span class="line">            print(<span class="string">&quot;网络连接错误！！！ 或者当前已爬取20页评论数据，更多需要登录爬取&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h2 id="四、进阶——根据用户输入的电影名搜索对应的电影评论数据"><a href="#四、进阶——根据用户输入的电影名搜索对应的电影评论数据" class="headerlink" title="四、进阶——根据用户输入的电影名搜索对应的电影评论数据"></a>四、进阶——根据用户输入的电影名搜索对应的电影评论数据</h2><p>前面在查看网页结构的的时候我们已经知道，对于不同的电影，我们只需要修改一下电影id就可以获取到不同电影的评论数据</p><p>那怎么获取电影id呢？</p><p>根据爬虫的逻辑，我们先找到搜索链接，</p><p>搜索芬奇 对应网址：<a href="https://search.douban.com/movie/subject_search?search_text=%E8%8A%AC%E5%A5%87&amp;cat=1002">https://search.douban.com/movie/subject_search?search_text=%E8%8A%AC%E5%A5%87&amp;cat=1002</a></p><p>搜索毒液2 对应网址    <a href="https://search.douban.com/movie/subject_search?search_text=%E6%AF%92%E6%B6%B22&amp;cat=1002">https://search.douban.com/movie/subject_search?search_text=%E6%AF%92%E6%B6%B22&amp;cat=1002</a></p><p>这里可以知道搜索参数的就是text= 到 &amp;之间的数据，其实就是对应中文的urlencode。</p><p>再查看网页结构：</p><p><img src="https://www.whkblog.work/blog/images/%E8%B1%86%E7%93%A3/%E7%BD%91%E9%A1%B5%E7%BB%93%E6%9E%843.PNG"></p><p>可以发现这个搜索出来的结果对应的第一个电影里的subject_id就是我们需要的；</p><p>于是我们按照步骤走，不难发现明明浏览器中显示有这些数据，为什么我爬取出来的就没找到这些数据呢？</p><p>这里是由于搜索结构式动态返回的，是动态的，直接向服务器请求，我们无法获得此数据。</p><p>这里我们做另一种可行方式，也有其他方式，读者可自行实现。</p><p>我们引入selenium库（一个模拟浏览器的库） 模拟浏览器请求数据，并获取我们需要的数据,并且修改一下默认的 self.url_pre</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMovieID</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;:arg</span></span><br><span class="line"><span class="string">        运行此函数需要，检查电脑是否有浏览器的对应chromedrive，</span></span><br><span class="line"><span class="string">        运行的时候会打开一个浏览器页面，不能关闭！！！</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    self.movie_name = <span class="built_in">input</span>(<span class="string">&quot;请输入你要爬取的电影名：&quot;</span>)  <span class="comment"># 绿皮书</span></span><br><span class="line">    url = self.search_url + urlencode(&#123;<span class="string">&quot;q&quot;</span>: self.movie_name&#125;)</span><br><span class="line">    driver = webdriver.Chrome()  <span class="comment"># 模拟浏览器行为，以获得动态数据</span></span><br><span class="line">    driver.get(url)</span><br><span class="line">    content = BeautifulSoup(driver.page_source, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    temp = content.find(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;nbg&#x27;</span>).get(<span class="string">&quot;onclick&quot;</span>).split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    self.moveID = temp[-<span class="number">2</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].strip(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    self.url_pre = <span class="string">&#x27;https://movie.douban.com/subject/%s/comments&#x27;</span> % <span class="built_in">str</span>(self.moveID)</span><br><span class="line">    self.save_name = self.movie_name + self.save_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五、补充"><a href="#五、补充" class="headerlink" title="五、补充"></a>五、补充</h2><p>这次的爬虫，我认为并不完美，譬如：搜索出来的电影第一个就一定是我们输入的需要的电影嘛，这里可以进一步处理，通过打印出来我们搜索的电影列表信息（电影名，电影导演，主演，电影类型，这些都可通过爬虫获取到，不用到详情页面），再让用户进行选择；又譬如如果我要获取超过20页评论数据，我要怎么做，是否可以也向爬取电影id那样，模拟流浪器登录，然后再继续数据的爬取？</p><h2 id="六、全部代码"><a href="#六、全部代码" class="headerlink" title="六、全部代码"></a>六、全部代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author  : w</span></span><br><span class="line"><span class="comment"># @Time    : 2021/11/23 8:14</span></span><br><span class="line"><span class="comment"># @environment:PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> HTTPError</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  <span class="comment"># 获取电影id,搜索内容为动态数据</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">get_comments</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, save_name</span>):</span></span><br><span class="line">        self.moveID = <span class="literal">None</span></span><br><span class="line">        self.movie_name = <span class="literal">None</span></span><br><span class="line">        self.save_name = save_name</span><br><span class="line">        self.search_url = <span class="string">&#x27;https://www.douban.com/search?cat=1002&amp;&#x27;</span></span><br><span class="line">        self.url_pre = <span class="string">&#x27;https://movie.douban.com/subject/26588308/comments&#x27;</span></span><br><span class="line">        self.<span class="built_in">next</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;movie.douban.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;cookeis&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0(WindowsNT10.0;Win64;x64)AppleWebKit/537.36(KHTML,&#x27;</span></span><br><span class="line">                          <span class="string">&#x27;likeGecko)Chrome/96.0.4664.45Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.douban.com/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMovieID</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;:arg</span></span><br><span class="line"><span class="string">            运行此函数需要，检查电脑是否有浏览器的对应chromedrive，</span></span><br><span class="line"><span class="string">            运行的时候会打开一个浏览器页面，不能关闭！！！</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.movie_name = <span class="built_in">input</span>(<span class="string">&quot;请输入你要爬取的电影名：&quot;</span>)  <span class="comment"># 绿皮书</span></span><br><span class="line">        url = self.search_url + urlencode(&#123;<span class="string">&quot;q&quot;</span>: self.movie_name&#125;)</span><br><span class="line">        driver = webdriver.Chrome()  <span class="comment"># 模拟浏览器行为，以获得动态数据</span></span><br><span class="line">        driver.get(url)</span><br><span class="line">        content = BeautifulSoup(driver.page_source, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        temp = content.find(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;nbg&#x27;</span>).get(<span class="string">&quot;onclick&quot;</span>).split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        self.moveID = temp[-<span class="number">2</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].strip(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        self.url_pre = <span class="string">&#x27;https://movie.douban.com/subject/%s/comments&#x27;</span> % <span class="built_in">str</span>(self.moveID)</span><br><span class="line">        self.save_name = self.movie_name + self.save_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">self</span>):</span></span><br><span class="line">        f = <span class="built_in">open</span>(self.save_name, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        f.truncate()  <span class="comment"># 清空文件</span></span><br><span class="line">        f.write(<span class="string">&quot;id     时间      点赞      评论\n&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;正在获取评论...&quot;</span>)</span><br><span class="line">        <span class="comment"># 先爬取第一页内容</span></span><br><span class="line">        url = self.url_pre + self.<span class="built_in">next</span></span><br><span class="line">        req = urllib.request.Request(url, headers=self.headers)</span><br><span class="line">        req = urllib.request.urlopen(req)</span><br><span class="line">        content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">         <span class="comment"># print(soupComment)</span></span><br><span class="line">        comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(comments_list)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line">                <span class="keyword">try</span>:  <span class="comment"># 用于防止出现有的评论有评论内容但是没有对电影进行星级评分</span></span><br><span class="line">                evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">                <span class="keyword">except</span> AttributeError:</span><br><span class="line">                evaluation = <span class="string">&quot;&quot;</span></span><br><span class="line">                ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">                times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">                vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">                content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(evaluation) != <span class="number">0</span>:</span><br><span class="line">                    strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; &quot;</span> + evaluation + <span class="string">&quot; &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                    <span class="comment"># print(strings)</span></span><br><span class="line">                    f.write(strings)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; 该用户没有进行评价 &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                    <span class="comment"># print(strings)</span></span><br><span class="line">                    f.write(strings)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># print(id,time,vote,evaluation,content)</span></span><br><span class="line">            <span class="comment"># 获取下一页对应的url</span></span><br><span class="line">            self.<span class="built_in">next</span> = soupComment.find(<span class="string">&#x27;a&#x27;</span>, attrs=&#123;<span class="string">&quot;data-page&quot;</span>: <span class="string">&quot;next&quot;</span>&#125;).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br><span class="line">        <span class="comment"># 如果有下一页</span></span><br><span class="line">        <span class="keyword">while</span> self.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            time.sleep(randint(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">            print(<span class="string">&quot;翻页&quot;</span>)</span><br><span class="line">            url = self.url_pre + self.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                req = urllib.request.Request(url, headers=self.headers)</span><br><span class="line">                req = urllib.request.urlopen(req)</span><br><span class="line">                content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">                comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line">                        <span class="keyword">try</span>: <span class="comment"># 用于防止出现有的评论有评论内容但是没有对电影进行星级评分</span></span><br><span class="line">                        evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">                        <span class="keyword">except</span> AttributeError: <span class="comment"># 找不到</span></span><br><span class="line">                            evaluation = <span class="string">&quot;&quot;</span></span><br><span class="line">                        ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">                        times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">                        vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">                        content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">len</span>(evaluation) != <span class="number">0</span>:</span><br><span class="line">                            strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; &quot;</span> + evaluation + <span class="string">&quot; &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                            f.write(strings)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; 该用户没有进行评价 &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                            f.write(strings)</span><br><span class="line">                    <span class="comment"># print(id,time,vote,evaluation,content)d</span></span><br><span class="line">                    <span class="comment"># 获取下一页对应的url</span></span><br><span class="line">                    self.<span class="built_in">next</span> = soupComment.find(<span class="string">&#x27;a&#x27;</span>, attrs=&#123;<span class="string">&quot;data-page&quot;</span>: <span class="string">&quot;next&quot;</span>&#125;).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> HTTPError:</span><br><span class="line">                print(<span class="string">&quot;网络连接错误！或者 当前已经爬取了20页，后续爬取需要登录后才能继续。!&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = get_comments(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">    a.getMovieID()</span><br><span class="line">    a.get_data()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>le</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;爬取豆瓣评论数据&quot;&gt;&lt;a href=&quot;#爬取豆瓣评论数据&quot; class=&quot;headerlink&quot; title=&quot;爬取豆瓣评论数据&quot;&gt;&lt;/a&gt;爬取豆瓣评论数据&lt;/h1&gt;&lt;p&gt;此教程时教如何爬取豆瓣网页数据，是笔者上爬虫课的一个实验作业；这里写下个人实现过程&lt;/p&gt;
</summary>
      
    
    
    
    <category term="爬虫" scheme="https://www.whkblog.work/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="python" scheme="https://www.whkblog.work/tags/python/"/>
    
    <category term="爬虫" scheme="https://www.whkblog.work/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>wifi</title>
    <link href="https://www.whkblog.work/2021/11/27/wifi/"/>
    <id>https://www.whkblog.work/2021/11/27/wifi/</id>
    <published>2021-11-27T03:27:21.000Z</published>
    <updated>2021-12-26T07:47:51.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h1><p>前几天被同学问怎么抓包校园网，他想做一个自动登录校园网的脚本，然后昨天上linux我实验提前做完了，就没事干写两个python自动连接wifi并且登录校园网的脚本</p><h1 id="实现想法"><a href="#实现想法" class="headerlink" title="实现想法"></a>实现想法</h1><h3 id="开始想法"><a href="#开始想法" class="headerlink" title="开始想法"></a>开始想法</h3><p>一开始我的想法是，直接向服务器发送一个数据包，是关于登hahha录的，也就是在点击登录后，浏览器发送的数据包；这个同时也是我那个同学的想法</p><p>这个实现，能力不足，计网没学到家（嗯~ o(<em>￣▽￣</em>)o）；我那个同学抓了好几次包，都不知道发送的数据是啥，这里是指可以抓到数据包，</p><p>我也可以，就是我看不懂数据包内容，一串16进制的数据，我分不清那些数据段是自己设置的数据段</p><h3 id="实现想法-1"><a href="#实现想法-1" class="headerlink" title="实现想法"></a>实现想法</h3><p>我的想法是模拟人的操作，打开浏览器，然后输入内容，再点击登录，这一步我是使用python selenium库实现的；</p><p>再要考虑的一个问题是，电脑自动连接wifi,这个可以使用pywifi来通过控制电脑wifi的连接来确保一定会连接上校园网</p><p>最后再将写好的代码打包成exe文件，并且将文件设置为开机自启动，在学校期间，全都是使用校园网，并且我校校园网是全校覆盖</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>现在python环境下创建一个py文件</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>新建一个class 类,并初始化一些变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, userID, pwd</span>):</span></span><br><span class="line">        self.login = <span class="string">&#x27;url&#x27;</span> <span class="comment">#校园网登录网址</span></span><br><span class="line">        self.<span class="built_in">id</span> = userID   <span class="comment"># 校园网登录ID</span></span><br><span class="line">        self.password = pwd<span class="comment"># 校园网登录pwd</span></span><br><span class="line">        self.headers = &#123;  <span class="comment">#请求头定义</span></span><br><span class="line">            <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0(WindowsNT10.0;Win64;x64)AppleWebKit/537.36(KHTML,&#x27;</span></span><br><span class="line">                          <span class="string">&#x27;likeGecko)Chrome/96.0.4664.45Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="wifi控制函数"><a href="#wifi控制函数" class="headerlink" title="wifi控制函数"></a>wifi控制函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_wifi</span>(<span class="params">self</span>):</span></span><br><span class="line">    wifi = pywifi.PyWiFi()  <span class="comment"># 扫描wifi驱动，并会输出</span></span><br><span class="line">    ifaces = wifi.interfaces()[<span class="number">0</span>] </span><br><span class="line">    print(ifaces.name()) <span class="comment"># 不一定是必要，可以不输出</span></span><br><span class="line">    ifaces.disconnect() <span class="comment"># 断开网卡连接</span></span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    profile = pywifi.Profile() <span class="comment"># 创建wifi连接文件</span></span><br><span class="line">    profile.ssid = <span class="string">&#x27;wifi_name&#x27;</span> <span class="comment"># 校园网的wifi密码</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 我校校园网是开放的，登录的</span></span><br><span class="line"><span class="string">    有需要的话，也可以改为自己想自动连接的wifi;</span></span><br><span class="line"><span class="string">    不过要是在家的话，这个脚本又鸡肋了，毕竟家里wifi一般来讲不会断，而不是像校园网会断网orz</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    # 网卡的开放状态 | auth - AP的认证算法</span></span><br><span class="line"><span class="string">profile.auth = const.AUTH_ALG_OPEN</span></span><br><span class="line"><span class="string"># wifi的加密算法，一般wifi 加密算法时wps  #选择wifi加密方式  akm - AP的密钥管理类型</span></span><br><span class="line"><span class="string">profile.akm.append(const.AKM_TYPE_WPA2PSK)</span></span><br><span class="line"><span class="string"># 加密单元 /cipher - AP的密码类型</span></span><br><span class="line"><span class="string">profile.cipher = const.CIPHER_TYPE_CCMP</span></span><br><span class="line"><span class="string"># 调用密码 /wifi密钥 如果无密码，则应该设置此项CIPHER_TYPE_NONE</span></span><br><span class="line"><span class="string">profile.key = pwd</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    ifaces.remove_all_network_profiles()  <span class="comment"># 删除所有AP配置文件（为了下一次新的连接）：</span></span><br><span class="line">    tmp_profile = ifaces.add_network_profile(profile) <span class="comment"># 加载新的连接文件</span></span><br><span class="line">    ifaces.connect(tmp_profile)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.isConnected(ifaces):</span><br><span class="line">        sleep(<span class="number">5</span>)  <span class="comment"># 若未成功，等待5秒后再看下是否成功连接了</span></span><br><span class="line">        self.isConnected(ifaces)</span><br></pre></td></tr></table></figure><p>这里面还有一个isConnected函数，是用来判断wifi是否连接成功</p><p>如果连接成功，将会调用自动登录模块，连接不成功会输出连接失败</p><p>下面是isConnected函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isConnected</span>(<span class="params">self, ifaces=<span class="literal">None</span></span>):</span></span><br><span class="line">       <span class="keyword">if</span> ifaces.status() == pywifi.const.IFACE_CONNECTED:</span><br><span class="line">           print(<span class="string">&quot;成功连接&quot;</span>)</span><br><span class="line">           self.test_login()</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           print(<span class="string">&quot;失败&quot;</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="自动登录"><a href="#自动登录" class="headerlink" title="自动登录"></a>自动登录</h3><p>自动登录模块用到的selenium库，使用了webdriver()，如果你也使用这个的话，需要注意一点的就是，需要下载一个驱动这里我就不写，</p><p>我是chorme浏览器，也可改成fox,edge等，估计都得安装这个chromedriver.exe类似的东西，我没有测试</p><p>可以参考这个连接<a href="https://blog.csdn.net/weixin_42403127/article/details/85255891">https://blog.csdn.net/weixin_42403127/article/details/85255891</a></p><p>这里有三个find_elemet 是针对我校校园网的的,不同的公开网络登录需要特殊设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_login</span>(<span class="params">self</span>):</span></span><br><span class="line">    driver = webdriver.Chrome() </span><br><span class="line">    driver.get(self.login) <span class="comment"># 驱动浏览器到这个网页</span></span><br><span class="line">    username = driver.find_element(By.ID, <span class="string">&quot;username&quot;</span>)  <span class="comment">#找到登录表单</span></span><br><span class="line">    pwd = driver.find_element(By.ID, <span class="string">&quot;password&quot;</span>)</span><br><span class="line">    username.send_keys(self.<span class="built_in">id</span>)  <span class="comment"># 向表单中填入数据</span></span><br><span class="line">    pwd.send_keys(self.password)</span><br><span class="line">    elem = driver.find_element(By.ID, <span class="string">&quot;login&quot;</span>) <span class="comment"># 找到登录按钮</span></span><br><span class="line">    elem.click() <span class="comment">#点击登录</span></span><br><span class="line">    sleep(<span class="number">2</span>) <span class="comment"># 停止两秒，等待返回状态</span></span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    l = test(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">3</span>)</span><br><span class="line">    l.get_wifi()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在编辑器运行一下，测试一下是否成功，出错的话好再改</p><h1 id="打包成exe文件"><a href="#打包成exe文件" class="headerlink" title="打包成exe文件"></a>打包成exe文件</h1><p>前面的代码都没包含引入库的内容，写在这里；为了方便打包，应该把用了的函数引入，而不是把所有的包内容都引入，那样容易导致打包的内容多，exe打</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pywifi</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br></pre></td></tr></table></figure><p>打开命令行，进入到当前py文件所在文件夹，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F xx.py</span><br></pre></td></tr></table></figure><p>这里xx.py是指你的py文件</p><p>使用的是-F命令，这样只会生成一个独立文件，不然会带好多东西3</p><p><img src="https://www.whkblog.work/blog/images/wifi1.png" alt="begin"></p><p>出现上面这个就代表成功。</p><p>同时在py文件下会出现两个文件夹，一个build一个dist文件，exe文件在dist文件当中</p><p><img src="https://www.whkblog.work/blog/images/wifi2.png" alt="begin"></p><h1 id="设置为开机自启"><a href="#设置为开机自启" class="headerlink" title="设置为开机自启"></a>设置为开机自启</h1><p>键盘win+r，输入shell:startup,会打开一个文件夹</p><p><img src="https://www.whkblog.work/blog/images/wifi3.png" alt="begin"></p><p><img src="https://www.whkblog.work/blog/images/wifi4.png" alt="begin"></p><p>将dist文件内exe文件创建一个快捷方式，然后将快捷方式剪切到刚打开的文件夹中，即完成了开机自动这个exe</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>这个脚本还有挺多问题的</p><p>譬如，要是wifi没有连接成功怎么办，以及登录失败怎么处理这些都没有处理，不过就目前而言，凑合用吧。</p><p><img src="https://www.whkblog.work/blog/images/%E5%8F%88%E4%B8%8D%E6%98%AF%E4%B8%8D%E8%83%BD%E7%94%A8.jpg" alt="begin"></p><p>就这样。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概况&quot;&gt;&lt;a href=&quot;#概况&quot; class=&quot;headerlink&quot; title=&quot;概况&quot;&gt;&lt;/a&gt;概况&lt;/h1&gt;&lt;p&gt;前几天被同学问怎么抓包校园网，他想做一个自动登录校园网的脚本，然后昨天上linux我实验提前做完了，就没事干写两个python自动连接wif</summary>
      
    
    
    
    <category term="杂七杂八" scheme="https://www.whkblog.work/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
    <category term="python" scheme="https://www.whkblog.work/tags/python/"/>
    
    <category term="没事做的" scheme="https://www.whkblog.work/tags/%E6%B2%A1%E4%BA%8B%E5%81%9A%E7%9A%84/"/>
    
  </entry>
  
  <entry>
    <title>OS算法</title>
    <link href="https://www.whkblog.work/2021/05/09/OS%E7%AE%97%E6%B3%95/"/>
    <id>https://www.whkblog.work/2021/05/09/OS%E7%AE%97%E6%B3%95/</id>
    <published>2021-05-09T12:42:49.000Z</published>
    <updated>2021-11-30T02:37:36.938Z</updated>
    
    <content type="html"><![CDATA[<p>此文写的是操作系统的算法（java版）</p><h1 id="读前须知"><a href="#读前须知" class="headerlink" title="读前须知"></a>读前须知</h1><p>1、文中算法，都是为了完成作业而写的，存在较多BUG, 算法最后带一个测试数据，就是实验要求的测试数据，并不全，算法本身问题较多，很多可能边界数据不能运行，会出现bug,例如进程调度里面，一个进程结束了，新的进程还未到达这一类情况就并没有写解决方法。、</p><p>2、由于我不会java,但是实验老师说用java加分，所有边学边写的，代码有些不规范敬请谅解。</p><p>3、由于java不太会，许多算法，都是在前任的基础之上写的；当然了，也有我完全我自己写的，不是所有的代码都符合老师的要求。<strong>在此感谢哪些人(≧∇≦)ﾉ</strong></p><h1 id="进程调度算法（单道）"><a href="#进程调度算法（单道）" class="headerlink" title="进程调度算法（单道）"></a>进程调度算法（单道）</h1><h2 id="FCFS"><a href="#FCFS" class="headerlink" title="FCFS"></a>FCFS</h2><h3 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h3><p>​    先来先服务的调度算法：最简单的调度算法，既可以用于作业调度 ，也可以用于程序调度，当作业调度中采用该算法时，系统将按照作业到达的先后次序来进行调度，优先从后备队列中，选择一个或多个位于队列头部的作业，把他们调入内存，分配所需资源、创建进程，然后放入“就绪队列”,直到该进程运行到完成或发生某事件堵塞后，进程调度程序才将处理机分配给其他进程。</p><h3 id="Java具体实现"><a href="#Java具体实现" class="headerlink" title="Java具体实现"></a>Java具体实现</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shuru</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    String name; <span class="comment">//进程名</span></span><br><span class="line">    time arrve; <span class="comment">//到达就绪时间</span></span><br><span class="line">    <span class="keyword">int</span>  zx;<span class="comment">//执行时间</span></span><br><span class="line">    <span class="keyword">int</span> grad;</span><br><span class="line">    time start;<span class="comment">//开始时间</span></span><br><span class="line">    time  end;<span class="comment">//完成时间</span></span><br><span class="line">    <span class="keyword">int</span> zz;  <span class="comment">//周转时间=完成时间-到达时间</span></span><br><span class="line">    <span class="keyword">double</span> zzxs; <span class="comment">//周转系数 =周转时间/执行时间</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">time</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> hour;</span><br><span class="line">        <span class="keyword">int</span> mintes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FCFS</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SortByTime</span><span class="params">(Shuru shuru[])</span> </span>&#123;<span class="comment">//比较到达时间</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=shuru.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; shuru.length; j++) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (shuru[j].arrve.hour*<span class="number">60</span>+shuru[j].arrve.mintes &lt; shuru[i].arrve.hour*<span class="number">60</span>+shuru[i].arrve.mintes) &#123;</span><br><span class="line">                                        Shuru t = shuru[i];</span><br><span class="line">                                        shuru[i] = shuru[j];</span><br><span class="line">                                        shuru[j] = t;</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SortBygrade</span><span class="params">(Shuru shuru[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=shuru.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; shuru.length; j++) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (shuru[j].grad &lt; shuru[i].grad) &#123;</span><br><span class="line">                                        Shuru t = shuru[i];</span><br><span class="line">                                        shuru[i] = shuru[j];</span><br><span class="line">                                        shuru[j] = t;</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fcfs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      </span></span><br><span class="line">                Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                Shuru shuru[] = <span class="keyword">new</span> Shuru[n];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;进程&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;信息输入：&quot;</span>);</span><br><span class="line">                        shuru[i] = <span class="keyword">new</span> Shuru();</span><br><span class="line">                        shuru[i].start = <span class="keyword">new</span> time();</span><br><span class="line">                        shuru[i].arrve = <span class="keyword">new</span> time();</span><br><span class="line">                        shuru[i].end = <span class="keyword">new</span> time();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;进程id\t进程名\t优先级\t进程到达时间\t进程执行时间&quot;</span>);</span><br><span class="line">                        String s = scan.nextLine();</span><br><span class="line">                        String[] sa = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                        shuru[i].id = Integer.parseInt(sa[<span class="number">0</span>]);</span><br><span class="line">                        shuru[i].name = sa[<span class="number">1</span>];</span><br><span class="line">                        shuru[i].grad = Integer.parseInt(sa[<span class="number">2</span>]);</span><br><span class="line">                        String[] time = sa[<span class="number">3</span>].split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                        shuru[i].arrve.hour = Integer.parseInt(time[<span class="number">0</span>]);</span><br><span class="line">                        shuru[i].arrve.mintes = Integer.parseInt(time[<span class="number">1</span>]);</span><br><span class="line">                        shuru[i].zx = Integer.parseInt(sa[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        shuru[i].start.hour = shuru[i].start.mintes = <span class="number">0</span>;</span><br><span class="line">                        shuru[i].end.hour = shuru[i].end.mintes = <span class="number">0</span>;</span><br><span class="line">                        shuru[i].zz = <span class="number">0</span>;</span><br><span class="line">                        shuru[i].zzxs = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;**********************************************************&quot;</span>);</span><br><span class="line"></span><br><span class="line">                SortByTime(shuru);</span><br><span class="line">                calculate(shuru,n);</span><br><span class="line">                SortBygrade(shuru);</span><br><span class="line">                calculate(shuru,n);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">(Shuru shuru[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">                <span class="comment">/*第一个执行的程序*/</span></span><br><span class="line">                shuru[<span class="number">0</span>].start.hour = shuru[<span class="number">0</span>].arrve.hour;</span><br><span class="line">                shuru[<span class="number">0</span>].start.mintes = shuru[<span class="number">0</span>].arrve.mintes;</span><br><span class="line">                <span class="comment">//计算结束时间</span></span><br><span class="line">                <span class="keyword">if</span> ((shuru[<span class="number">0</span>].start.mintes + shuru[<span class="number">0</span>].zx) &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">                        shuru[<span class="number">0</span>].end.hour = shuru[<span class="number">0</span>].start.hour + <span class="number">1</span>;</span><br><span class="line">                        shuru[<span class="number">0</span>].end.mintes = (shuru[<span class="number">0</span>].start.mintes + shuru[<span class="number">0</span>].zx - <span class="number">60</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        shuru[<span class="number">0</span>].end.hour = shuru[<span class="number">0</span>].start.hour;</span><br><span class="line">                        shuru[<span class="number">0</span>].end.mintes = (shuru[<span class="number">0</span>].start.mintes + shuru[<span class="number">0</span>].zx);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//计算周转时间</span></span><br><span class="line">                <span class="keyword">if</span> (shuru[<span class="number">0</span>].end.hour == shuru[<span class="number">0</span>].start.hour) &#123;</span><br><span class="line">                        shuru[<span class="number">0</span>].zz = (shuru[<span class="number">0</span>].end.mintes - shuru[<span class="number">0</span>].arrve.mintes);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        shuru[<span class="number">0</span>].zz = ((shuru[<span class="number">0</span>].end.hour - shuru[<span class="number">0</span>].arrve.hour)*<span class="number">60</span> + shuru[<span class="number">0</span>].end.mintes - shuru[<span class="number">0</span>].arrve.mintes);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//计算周转系数</span></span><br><span class="line">                shuru[<span class="number">0</span>].zzxs = (<span class="keyword">float</span>)shuru[<span class="number">0</span>].zz/shuru[<span class="number">0</span>].zx;</span><br><span class="line">                <span class="comment">/*计算除去第一个进程外的其他进程*/</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"></span><br><span class="line">                        shuru[i].start.hour = shuru[i - <span class="number">1</span>].end.hour;</span><br><span class="line">                        shuru[i].start.mintes = shuru[i - <span class="number">1</span>].end.mintes;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//计算结束时间</span></span><br><span class="line">                        <span class="keyword">if</span> ((shuru[i].start.mintes + shuru[i].zx) &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">                                shuru[i].end.hour = (shuru[i].start.hour + <span class="number">1</span>);</span><br><span class="line">                                shuru[i].end.mintes = (shuru[i].zx + shuru[i].start.mintes - <span class="number">60</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                shuru[i].end.hour = shuru[i].start.hour;</span><br><span class="line">                                shuru[i].end.mintes = shuru[i].start.mintes + shuru[i].zx;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//计算周转时间</span></span><br><span class="line">                        <span class="keyword">if</span> (shuru[i].end.hour == shuru[i].arrve.hour) &#123;</span><br><span class="line">                                shuru[i].zz = shuru[i].end.mintes - shuru[i].arrve.mintes;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                shuru[i].zz = (shuru[i].end.hour - shuru[i].arrve.hour) * <span class="number">60</span> + shuru[i].end.mintes - shuru[i].arrve.mintes;</span><br><span class="line">                        &#125;</span><br><span class="line">                        shuru[i].zzxs = (<span class="keyword">float</span>)shuru[i].zz / shuru[i].zx;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;进程id\t进程名\t优先级\t执行时间\t\t到达时间\t\t开始时间\t\t结束时间\t\t周转时间\t\t带权周转系数&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> sumzz=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">float</span> sumzzxs=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                        show(shuru[i]);</span><br><span class="line"></span><br><span class="line">                        sumzz += shuru[i].zz;</span><br><span class="line">                        sumzzxs += shuru[i].zzxs;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.printf(<span class="string">&quot;系统平均周转时间\t\t\t\t\t%10.2f（分钟）\n&quot;</span>,(<span class="keyword">float</span>)sumzz/n);</span><br><span class="line">                System.out.printf(<span class="string">&quot;带权平均周转时间\t\t\t\t\t%10.2f（分钟）\n&quot;</span>,sumzzxs/n);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span> <span class="params">(Shuru shuru)</span></span>&#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t%s\t\t%d\t\t%d（分钟）\t%02d:%02d\t\t%02d:%02d\t\t%02d:%02d\t\t%d（分钟）\t\t%.2f\n&quot;</span>,shuru.id, shuru.name,shuru.grad,shuru.zx,shuru.arrve.hour,shuru.arrve.mintes, shuru.start.hour,shuru.start.mintes,shuru.end.hour,shuru.end.mintes,shuru.zz,shuru.zzxs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">                FCFS j = <span class="keyword">new</span> FCFS();</span><br><span class="line">                Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                System.out.print(<span class="string">&quot;请输入进程数目：\n&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> n = s.nextInt();</span><br><span class="line">                j.fcfs(n);</span><br><span class="line">                System.out.println(<span class="string">&quot;所有进程执行完毕！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">实验数据</span></span><br><span class="line"><span class="comment">5001 p1 1 9:40 20</span></span><br><span class="line"><span class="comment">5004 p4 4 10:10 10</span></span><br><span class="line"><span class="comment">5005 p5 3 10:05 30</span></span><br><span class="line"><span class="comment">5002 p2 3 9:55 15</span></span><br><span class="line"><span class="comment">5003 p3 2 9:45 25</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="SJF"><a href="#SJF" class="headerlink" title="SJF"></a>SJF</h2><h3 id="主要思想-1"><a href="#主要思想-1" class="headerlink" title="主要思想"></a>主要思想</h3><p>同先来先服务算法一样的功能，与之不同的是，短作业优先算法，是以作业运行时间长短排序；</p><p>1、在已到达的作业中，选择作业时间最短的进程</p><p>2、当前进程结束后，再在已到达的进程中选择运行时间最短的进程进入CPU进行执行</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><h4 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h4><p>与FCFS数结构一样</p><h4 id="Java具体实现-1"><a href="#Java具体实现-1" class="headerlink" title="Java具体实现"></a>Java具体实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SJF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SortByTime</span><span class="params">(Shuru shuru[])</span> </span>&#123;<span class="comment">//比较到达时间</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=shuru.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; shuru.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (shuru[j].arrve.hour*<span class="number">60</span>+shuru[j].arrve.mintes &lt; shuru[i].arrve.hour*<span class="number">60</span>+shuru[i].arrve.mintes) &#123;</span><br><span class="line"></span><br><span class="line">                    Shuru t = shuru[i];</span><br><span class="line">                    shuru[i] = shuru[j];</span><br><span class="line">                    shuru[j] = t;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SortBygrade</span><span class="params">(Shuru shuru[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=shuru.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; shuru.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(shuru[j].grad &gt; shuru[i].grad)&#123;</span><br><span class="line"></span><br><span class="line">                    Shuru temp = shuru[i];</span><br><span class="line">                    shuru[i] = shuru[j];</span><br><span class="line">                    shuru[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Shuru shuru[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;shuru.length;i++)&#123;</span><br><span class="line">            shuru[i] = <span class="keyword">new</span> Shuru();</span><br><span class="line">            shuru[i].start = <span class="keyword">new</span> time();</span><br><span class="line">            shuru[i].arrve = <span class="keyword">new</span> time();</span><br><span class="line">            shuru[i].end = <span class="keyword">new</span> time();</span><br><span class="line">            shuru[i].id = <span class="number">0</span>;</span><br><span class="line">            shuru[i].name = <span class="string">&quot;nothing&quot;</span>;</span><br><span class="line">            shuru[i].grad = <span class="number">0</span>;</span><br><span class="line">            shuru[i].zx = <span class="number">0</span>;</span><br><span class="line">            shuru[i].zz = <span class="number">0</span>;</span><br><span class="line">            shuru[i].zzxs = <span class="number">0</span>;</span><br><span class="line">            shuru[i].start.hour = <span class="number">0</span>;</span><br><span class="line">            shuru[i].start.mintes = <span class="number">0</span>;</span><br><span class="line">            shuru[i].end.hour = <span class="number">0</span>;</span><br><span class="line">            shuru[i].end.mintes = <span class="number">0</span>;</span><br><span class="line">            shuru[i].arrve.hour = <span class="number">0</span>;</span><br><span class="line">            shuru[i].arrve.mintes = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(Shuru shuru[],Shuru shuru1)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;shuru.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(shuru[i].id == shuru1.id)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sjf</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Shuru shuru[] = <span class="keyword">new</span> Shuru[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;进程&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;信息输入：&quot;</span>);</span><br><span class="line">            shuru[i] = <span class="keyword">new</span> Shuru();</span><br><span class="line">            shuru[i].start = <span class="keyword">new</span> time();</span><br><span class="line">            shuru[i].arrve = <span class="keyword">new</span> time();</span><br><span class="line">            shuru[i].end = <span class="keyword">new</span> time();</span><br><span class="line">            System.out.println(<span class="string">&quot;进程id\t进程名\t优先级\t进程到达时间:\t进程执行时间&quot;</span>);</span><br><span class="line">            String s = scan.nextLine();</span><br><span class="line">            String[] sa = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            shuru[i].id = Integer.parseInt(sa[<span class="number">0</span>]);</span><br><span class="line">            shuru[i].name = sa[<span class="number">1</span>];</span><br><span class="line">            shuru[i].grad = Integer.parseInt(sa[<span class="number">2</span>]);</span><br><span class="line">            String[] time = sa[<span class="number">3</span>].split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            shuru[i].arrve.hour = Integer.parseInt(time[<span class="number">0</span>]);</span><br><span class="line">            shuru[i].arrve.mintes = Integer.parseInt(time[<span class="number">1</span>]);</span><br><span class="line">            shuru[i].zx = Integer.parseInt(sa[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            shuru[i].start.hour = shuru[i].start.mintes = <span class="number">0</span>;</span><br><span class="line">            shuru[i].end.hour = shuru[i].end.mintes = <span class="number">0</span>;</span><br><span class="line">            shuru[i].zz = <span class="number">0</span>;</span><br><span class="line">            shuru[i].zzxs = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;**********************************************************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Shuru shuruans[] = <span class="keyword">new</span> Shuru[n];</span><br><span class="line">        init(shuruans);</span><br><span class="line">        Shuru shurutemp[] = <span class="keyword">new</span> Shuru[n];</span><br><span class="line">        init(shurutemp);</span><br><span class="line">        <span class="comment">//先时间排序</span></span><br><span class="line">        SortByTime(shuru);</span><br><span class="line">        <span class="comment">//按优先级进行执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;进程id\t进程名\t优先级\t执行时间\t\t到达时间\t\t开始时间\t\t结束时间\t\t周转时间\t\t带权周转系数&quot;</span>);</span><br><span class="line">        calculate(shuru[<span class="number">0</span>],shuru[<span class="number">0</span>].arrve.hour,shuru[<span class="number">0</span>].arrve.mintes);</span><br><span class="line">        <span class="comment">//执行第一个到达的进程</span></span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        shuruans[count] = shuru[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n-<span class="number">1</span>;k++) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            从第一次执行完成后，每次执行时，</span></span><br><span class="line"><span class="comment">            先从已经到达的进程中选择优先级最高的进程进行执行；</span></span><br><span class="line"><span class="comment">            执行完后再次选择，直到所有进程都执行完毕。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            init(shurutemp);<span class="comment">//作为中间变量，储存筛选出来的进程</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; shuru.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (shuru[i].arrve.hour*<span class="number">60</span>+shuru[i].arrve.mintes &lt;= shuruans[count].end.hour*<span class="number">60</span>+shuruans[count].end.mintes &amp;&amp; !find(shuruans,shuru[i])  ) &#123;</span><br><span class="line">                    shurutemp[i] = shuru[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i==shuru.length-<span class="number">1</span> &amp;&amp; shurutemp[<span class="number">0</span>].id==<span class="number">0</span>)&#123;</span><br><span class="line">                    shurutemp[<span class="number">0</span>] = shuru[count+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            SortBygrade(shurutemp);<span class="comment">//按优先级排序</span></span><br><span class="line">            <span class="keyword">if</span>(count&lt;n)&#123;</span><br><span class="line">                <span class="keyword">if</span>(shurutemp[<span class="number">0</span>].arrve.hour*<span class="number">60</span>+shurutemp[<span class="number">0</span>].arrve.mintes &lt;= shuruans[count].end.hour*<span class="number">60</span>+shuruans[count].end.mintes) &#123;</span><br><span class="line">                    calculate(shurutemp[<span class="number">0</span>], shuruans[count].end.hour, shuruans[count].end.mintes);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    calculate(shurutemp[<span class="number">0</span>],shurutemp[<span class="number">0</span>].arrve.hour,shurutemp[<span class="number">0</span>].arrve.mintes);</span><br><span class="line">                &#125;</span><br><span class="line">                count+=<span class="number">1</span>;</span><br><span class="line">                shuruans[count] = shurutemp[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">            show(shuru[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;------------------------------------------------\n&quot;</span>);</span><br><span class="line">        <span class="comment">//计算带权平均与输出</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            show(shuruans[i]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;系统平均周转时间\t\t\t\t\t%10.2f（分钟）\n&quot;</span>,(<span class="keyword">float</span>)sumzz/n);</span><br><span class="line">        System.out.printf(<span class="string">&quot;带权平均周转时间\t\t\t\t\t%10.2f（分钟）\n&quot;</span>,sumzzxs/n);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">(Shuru shuru,<span class="keyword">int</span> TimeHour,<span class="keyword">int</span> TimeMinte)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            shuru.start.hour = TimeHour;</span><br><span class="line">            shuru.start.mintes = TimeMinte;</span><br><span class="line">            <span class="comment">//计算结束时间</span></span><br><span class="line">            <span class="keyword">if</span> ((shuru.start.mintes + shuru.zx) &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">                shuru.end.hour = (shuru.start.hour + <span class="number">1</span>);</span><br><span class="line">                shuru.end.mintes = (shuru.zx + shuru.start.mintes - <span class="number">60</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                shuru.end.hour = shuru.start.hour;</span><br><span class="line">                shuru.end.mintes = shuru.start.mintes + shuru.zx;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//计算周转时间</span></span><br><span class="line">            <span class="keyword">if</span> (shuru.end.hour == shuru.arrve.hour) &#123;</span><br><span class="line">                shuru.zz = shuru.end.mintes - shuru.arrve.mintes;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                shuru.zz = (shuru.end.hour - shuru.arrve.hour) * <span class="number">60</span> + shuru.end.mintes - shuru.arrve.mintes;</span><br><span class="line">            &#125;</span><br><span class="line">            shuru.zzxs = (<span class="keyword">float</span>)shuru.zz / shuru.zx;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span> <span class="params">(Shuru shuru)</span></span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%d\t%s\t\t%d\t\t%d（分钟）\t%02d:%02d\t\t%02d:%02d\t\t%02d:%02d\t\t%d（分钟）\t\t%.2f\n&quot;</span>,shuru.id, shuru.name,shuru.grad,shuru.zx,shuru.arrve.hour,shuru.arrve.mintes, shuru.start.hour,shuru.start.mintes,shuru.end.hour,shuru.end.mintes,shuru.zz,shuru.zzxs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        SJF j = <span class="keyword">new</span> SJF();</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入进程数目：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = s.nextInt();</span><br><span class="line">        j.sjf(n);</span><br><span class="line">        System.out.println(<span class="string">&quot;所有进程执行完毕！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5001 p1 1 9:40 20</span></span><br><span class="line"><span class="comment">5004 p4 4 10:10 10</span></span><br><span class="line"><span class="comment">5005 p5 3 10:05 30</span></span><br><span class="line"><span class="comment">5002 p2 3 9:55 15</span></span><br><span class="line"><span class="comment">5003 p3 2 9:45 25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1001 p1 1 10:00 20</span></span><br><span class="line"><span class="comment">1002 p2 2 9:20 65</span></span><br><span class="line"><span class="comment">1003 p3 2 10:25 50</span></span><br><span class="line"><span class="comment">1004 p4 3 8:10 10</span></span><br><span class="line"><span class="comment">1005 p5 2 7:40 20</span></span><br><span class="line"><span class="comment">1006 p6 1 11:20 100</span></span><br><span class="line"><span class="comment">1007 p7 1 10:30 120</span></span><br><span class="line"><span class="comment">        */</span></span><br></pre></td></tr></table></figure><h2 id="时间片轮转算法"><a href="#时间片轮转算法" class="headerlink" title="时间片轮转算法"></a>时间片轮转算法</h2><h3 id="主要思想-2"><a href="#主要思想-2" class="headerlink" title="主要思想"></a>主要思想</h3><p>设置时间片段，每次进入CPU的进程，只允许运行时间片段长度的时间，时间片用完后，解除CPU占用，进入当前就绪队列的最后；</p><p>CPU再选入就绪队列中最前面的进程调入CPU运行；如此反复，直到所有进程都运行完毕。</p><h3 id="Java具体实现-2"><a href="#Java具体实现-2" class="headerlink" title="Java具体实现"></a>Java具体实现</h3><h4 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据结构定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hour;</span><br><span class="line">    <span class="keyword">int</span> mintes;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">timePlus</span><span class="params">(Time begin, <span class="keyword">int</span> time)</span> </span>&#123;</span><br><span class="line">        begin.hour = (begin.hour + (<span class="keyword">int</span>) (begin.mintes + time) / <span class="number">60</span>);</span><br><span class="line">        begin.mintes = ((begin.mintes + time) % <span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">timesub</span><span class="params">(Time begin,Time end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (end.hour*<span class="number">60</span>+end.mintes - begin.hour*<span class="number">60</span>+begin.mintes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Process</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    String name; <span class="comment">//进程名</span></span><br><span class="line">    <span class="keyword">int</span>  zx;<span class="comment">//执行时间</span></span><br><span class="line">    Time arrive; <span class="comment">//到达就绪时间</span></span><br><span class="line">    Time start;<span class="comment">//每轮开始开始时间</span></span><br><span class="line">    Time first;<span class="comment">//首次执行时间</span></span><br><span class="line">    <span class="keyword">int</span> have_finished;<span class="comment">//已完成时间</span></span><br><span class="line">    Time arr;<span class="comment">//每轮到达时间</span></span><br><span class="line">    Time  end;<span class="comment">//完成时间</span></span><br><span class="line">    <span class="keyword">int</span> zz;  <span class="comment">//周转时间=完成时间-到达时间</span></span><br><span class="line">    <span class="keyword">double</span> zzxs; <span class="comment">//周转系数 =周转时间/执行时间</span></span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundRobin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SortByTime</span><span class="params">(Process shuru[])</span> </span>&#123;<span class="comment">//比较到达时间</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=shuru.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; shuru.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (shuru[j].arrive.hour*<span class="number">60</span>+shuru[j].arrive.mintes &lt; shuru[i].arrive.hour*<span class="number">60</span>+shuru[i].arrive.mintes) &#123;</span><br><span class="line"></span><br><span class="line">                    Process t = shuru[i];</span><br><span class="line">                    shuru[i] = shuru[j];</span><br><span class="line">                    shuru[j] = t;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Process a[],Process b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = a.length;</span><br><span class="line">        Process temp;</span><br><span class="line">        temp = b;</span><br><span class="line">        <span class="keyword">if</span>(find(b,a)) remove(a,b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j].name == <span class="string">&quot;nothing&quot;</span> || j==n-<span class="number">1</span>)&#123;</span><br><span class="line">                a[j] = temp;<span class="comment">//新增</span></span><br><span class="line">                a[j].start.hour = <span class="number">0</span>;</span><br><span class="line">                a[j].start.mintes = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Process A[],Process a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = A.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i].id==a.id)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;len-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                    A[j] = A[j+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        if (A[len-1].id==A[len-2].id)&#123;</span></span><br><span class="line"><span class="comment">//            A[len - 1].id = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].name = &quot;nothing&quot;;</span></span><br><span class="line"><span class="comment">//            A[len - 1].zx = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].arrive.hour = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].arrive.mintes = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].start.hour = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].start.mintes = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].have_finished = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].arr.hour = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].arr.mintes = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].end.hour = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].end.mintes = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].zz = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].zzxs = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].flag = -1;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Process input[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;input.length;i++)&#123;</span><br><span class="line">            input[i] = <span class="keyword">new</span> Process();</span><br><span class="line">            input[i].id = <span class="number">0</span>;</span><br><span class="line">            input[i].name = <span class="string">&quot;nothing&quot;</span>;</span><br><span class="line">            input[i].zx = <span class="number">0</span>;</span><br><span class="line">            input[i].arrive = <span class="keyword">new</span> Time();</span><br><span class="line">            input[i].arrive.hour = <span class="number">0</span>;</span><br><span class="line">            input[i].arrive.mintes = <span class="number">0</span>;</span><br><span class="line">            input[i].start = <span class="keyword">new</span> Time();</span><br><span class="line">            input[i].start.hour = <span class="number">0</span>;</span><br><span class="line">            input[i].start.mintes = <span class="number">0</span>;</span><br><span class="line">            input[i].first  = <span class="keyword">new</span> Time();</span><br><span class="line"></span><br><span class="line">            input[i].have_finished = <span class="number">0</span>;</span><br><span class="line">            input[i].arr = <span class="keyword">new</span> Time();</span><br><span class="line">            input[i].arr.hour = <span class="number">0</span>;</span><br><span class="line">            input[i].arr.mintes = <span class="number">0</span>;</span><br><span class="line">            input[i].end = <span class="keyword">new</span> Time();</span><br><span class="line">            input[i].end.hour = <span class="number">0</span>;</span><br><span class="line">            input[i].end.mintes = <span class="number">0</span>;</span><br><span class="line">            input[i].zz = <span class="number">0</span>;</span><br><span class="line">            input[i].zzxs = <span class="number">0</span>;</span><br><span class="line">            input[i].flag = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span> <span class="params">(Process process[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sumzz=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> sumzzxs=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = process.length;</span><br><span class="line">        System.out.println(<span class="string">&quot;进程id\t进程名\t到达时间\t执行时间\t\t首次开始时间\t结束时间\t\t周转时间\t\t带权周转系数&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            process[i].zz = ((process[i].end.hour*<span class="number">60</span>+process[i].end.mintes)-(process[i].arrive.hour*<span class="number">60</span>+process[i].arrive.mintes));</span><br><span class="line">            process[i].zzxs = (<span class="keyword">float</span>)process[i].zz/process[i].zx;</span><br><span class="line">            sumzz += process[i].zz;</span><br><span class="line">            sumzzxs += process[i].zzxs;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t%s\t\t%02d:%02d\t%d(分钟)\t\t%02d:%02d\t\t%02d:%02d\t\t%d（分钟）\t\t%.2f\n&quot;</span>,</span><br><span class="line">                    process[i].id, process[i].name,</span><br><span class="line">                    process[i].arrive.hour, process[i].arrive.mintes, process[i].zx,</span><br><span class="line">                    process[i].first.hour, process[i].first.mintes,</span><br><span class="line">                    process[i].end.hour, process[i].end.mintes,</span><br><span class="line">                    process[i].zz, process[i].zzxs);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;系统平均周转时间\t\t\t\t\t%10.2f（分钟）\n&quot;</span>,(<span class="keyword">float</span>)sumzz/n);</span><br><span class="line">        System.out.printf(<span class="string">&quot;带权平均周转时间\t\t\t\t\t%10.2f（分钟）\n&quot;</span>,sumzzxs/n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showRun</span><span class="params">(Process process[], <span class="keyword">int</span> n, Time now)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第&quot;</span>+n+<span class="string">&quot;执行和就绪队列&quot;</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;当前时间: %02d :%02d\n&quot;</span>,now.hour,now.mintes);</span><br><span class="line">        System.out.println(<span class="string">&quot;ID号\t名字\t到达时间\t总执行时间(分钟)\t当前开始时间\t已完成时间\t剩余时间(分钟)&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;process.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (process[i].id!=<span class="number">0</span> &amp;&amp; process[i].name!=<span class="string">&quot;nothing&quot;</span>) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t%s\t%02d:%02d\t%d（分钟）\t\t\t%02d:%02d\t%d(分钟)\t\t%d（分钟）\n&quot;</span>,</span><br><span class="line">                        process[i].id, process[i].name,</span><br><span class="line">                        process[i].arrive.hour, process[i].arrive.mintes, process[i].zx,</span><br><span class="line">                        process[i].start.hour, process[i].start.mintes, process[i].have_finished,</span><br><span class="line">                        (process[i].zx - process[i].have_finished));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sure</span><span class="params">(Process input[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=input.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (input[j].flag!=<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(Process process,Process A[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (process.id==A[i].id)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">(Process A[],Time now,<span class="keyword">int</span> time,Process B[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (time&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> less;</span><br><span class="line">            A[<span class="number">0</span>].start.hour = now.hour;</span><br><span class="line">            A[<span class="number">0</span>].start.mintes = now.mintes;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        不可直接A.start = now,这只是建立索引，start与now会一同变化</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">            less = A[<span class="number">0</span>].zx - A[<span class="number">0</span>].have_finished;</span><br><span class="line">            <span class="comment">//第一次执行进程</span></span><br><span class="line">            <span class="keyword">if</span> (A[<span class="number">0</span>].have_finished == <span class="number">0</span>) &#123;</span><br><span class="line">                A[<span class="number">0</span>].first.hour = now.hour;</span><br><span class="line">                A[<span class="number">0</span>].first.mintes = now.mintes;</span><br><span class="line">                <span class="keyword">if</span> (less &gt; time) &#123;  <span class="comment">//剩余未做完&gt;大于时间片</span></span><br><span class="line">                    A[<span class="number">0</span>].start.hour = now.hour;</span><br><span class="line">                    A[<span class="number">0</span>].start.mintes = now.mintes;</span><br><span class="line">                    A[<span class="number">0</span>].have_finished += time;</span><br><span class="line">                    Time.timePlus(now, time);</span><br><span class="line">                    time = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    A[<span class="number">0</span>].have_finished = A[<span class="number">0</span>].zx;</span><br><span class="line">                    A[<span class="number">0</span>].flag = <span class="number">1</span>; <span class="comment">//表示做完了</span></span><br><span class="line">                    A[<span class="number">0</span>].end.hour = (now.hour + (<span class="keyword">int</span>) (now.mintes + less) / <span class="number">60</span>);</span><br><span class="line">                    A[<span class="number">0</span>].end.mintes = ((now.mintes + less) % <span class="number">60</span>);</span><br><span class="line">                    Time.timePlus(now, (time - less));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (less &gt; time) &#123;</span><br><span class="line">                    A[<span class="number">0</span>].start.hour = now.hour;</span><br><span class="line">                    A[<span class="number">0</span>].start.mintes = now.mintes;</span><br><span class="line">                    A[<span class="number">0</span>].have_finished += time;</span><br><span class="line">                    Time.timePlus(now, time);</span><br><span class="line">                    time = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    A[<span class="number">0</span>].have_finished = A[<span class="number">0</span>].zx;</span><br><span class="line">                    A[<span class="number">0</span>].flag = <span class="number">1</span>; <span class="comment">//表示做完了</span></span><br><span class="line">                    A[<span class="number">0</span>].end.hour = (now.hour + (<span class="keyword">int</span>) (now.mintes + less) / <span class="number">60</span>);</span><br><span class="line">                    A[<span class="number">0</span>].end.mintes = ((now.mintes + less) % <span class="number">60</span>);</span><br><span class="line">                    Time.timePlus(now, (time - less));</span><br><span class="line"><span class="comment">//                    calculate(A, now, time,B);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rr</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> Timeslice)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Process input[] = <span class="keyword">new</span> Process[n];</span><br><span class="line">        Process temp[] = <span class="keyword">new</span> Process[n];</span><br><span class="line">        Process ans[] = <span class="keyword">new</span> Process[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        init(input);</span><br><span class="line">        init(ans);</span><br><span class="line">        init(temp);</span><br><span class="line">        <span class="comment">//输入进程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;进程&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;信息输入：&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;进程id\t进程名\t优先级\t进程到达时间:\t进程执行时间&quot;</span>);</span><br><span class="line">            String s = scan.nextLine();</span><br><span class="line">            String[] sa = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            input[i].id = Integer.parseInt(sa[<span class="number">0</span>]);</span><br><span class="line">            input[i].name = sa[<span class="number">1</span>];</span><br><span class="line">            String[] time = sa[<span class="number">2</span>].split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            input[i].arrive.hour = Integer.parseInt(time[<span class="number">0</span>]);</span><br><span class="line">            input[i].arrive.mintes = Integer.parseInt(time[<span class="number">1</span>]);</span><br><span class="line">            input[i].zx = Integer.parseInt(sa[<span class="number">3</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        SortByTime(input);</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>,count_num=<span class="number">0</span>,timeset;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        count用于计算已经完成了多少个进程</span></span><br><span class="line"><span class="comment">        count_num 第几轮执行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Time now = <span class="keyword">new</span> Time();</span><br><span class="line">        now.hour = input[<span class="number">0</span>].arrive.hour;</span><br><span class="line">        now.mintes = input[<span class="number">0</span>].arrive.mintes;</span><br><span class="line">        insert(temp,input[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">while</span>(sure(ans))&#123;</span><br><span class="line"><span class="comment">//        while(count_num&lt;20)&#123;</span></span><br><span class="line">            count_num++;</span><br><span class="line">            calculate(temp, now, Timeslice,ans);</span><br><span class="line">            showRun(temp, count_num, now);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (temp[j].flag==<span class="number">1</span> &amp;&amp; count&lt;<span class="number">5</span> &amp;&amp; !find(temp[j],ans))&#123;</span><br><span class="line">                        ans[count++] = temp[j];</span><br><span class="line">                        remove(temp,temp[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;<span class="comment">//查找已经到达的程序</span></span><br><span class="line">                <span class="keyword">if</span> (now.hour * <span class="number">60</span> + now.mintes &gt; input[i].arrive.hour * <span class="number">60</span> + input[i].arrive.mintes) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!find(input[i], temp) &amp;&amp; !find(input[i],ans)) &#123;</span><br><span class="line">                        insert(temp, input[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            insert(temp, temp[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        show(ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        RoundRobin j = <span class="keyword">new</span> RoundRobin();</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入进程数目：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = s.nextInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入时间片时间：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> TimeSlice = s.nextInt();</span><br><span class="line">        j.rr(n, TimeSlice);</span><br><span class="line">        System.out.println(<span class="string">&quot;所有进程执行完毕！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5001 p1 9:40 20</span></span><br><span class="line"><span class="comment">5004 p4 10:10 10</span></span><br><span class="line"><span class="comment">5005 p5 10:05 30</span></span><br><span class="line"><span class="comment">5002 p2 9:55 15</span></span><br><span class="line"><span class="comment">5003 p3 9:45 25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2021/5/9 21:00</p><p>今天就写到这，下次补充</p><hr><h2 id="HRRF"><a href="#HRRF" class="headerlink" title="HRRF"></a>HRRF</h2><h3 id="主要思想-3"><a href="#主要思想-3" class="headerlink" title="主要思想"></a>主要思想</h3><p>主要思想就不写了，太麻烦了。。。这次是为了补充。。。具体自己可查吧</p><h3 id="具体实现-2"><a href="#具体实现-2" class="headerlink" title="具体实现"></a>具体实现</h3><h4 id="数据结构-3"><a href="#数据结构-3" class="headerlink" title="数据结构"></a>数据结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line">mport java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minute;</span><br><span class="line">    <span class="keyword">int</span> hour;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHour</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hour;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHour</span><span class="params">(<span class="keyword">int</span> hour)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hour = hour;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMinute</span><span class="params">(<span class="keyword">int</span> minute)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.minute = minute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Time <span class="title">timePlus</span><span class="params">(Time begin, <span class="keyword">int</span> time)</span> </span>&#123;</span><br><span class="line">        Time ans = <span class="keyword">new</span> Time();</span><br><span class="line">        ans.hour = (begin.hour + (<span class="keyword">int</span>) (begin.minute + time) / <span class="number">60</span>);</span><br><span class="line">        ans.minute = ((begin.minute + time) % <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">timesub</span><span class="params">(Time begin,Time end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((end.hour*<span class="number">60</span>+end.minute) - (begin.hour*<span class="number">60</span>+begin.minute));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">timecompare</span><span class="params">(Time a, Time b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((a.hour*<span class="number">60</span>+a.minute-b.hour*<span class="number">60</span>+b.minute)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Process</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Process</span>&gt;</span>&#123;</span><br><span class="line">    String name;<span class="comment">//名字</span></span><br><span class="line">    Time arrive;<span class="comment">//入井时间</span></span><br><span class="line">    <span class="keyword">int</span> zx;<span class="comment">//执行时间</span></span><br><span class="line">    Time jobTime;<span class="comment">//作业调度时间</span></span><br><span class="line">    <span class="keyword">int</span> jobWait;<span class="comment">//作业调度等待时间</span></span><br><span class="line">    Time processTime ;<span class="comment">//进程调度时间</span></span><br><span class="line">    <span class="keyword">int</span> processWait;<span class="comment">//进程调度等待时间</span></span><br><span class="line">    Time finish;<span class="comment">//完成时间</span></span><br><span class="line">    <span class="keyword">int</span> zz;<span class="comment">//周转时间</span></span><br><span class="line">    <span class="keyword">float</span> zzxs;<span class="comment">//带权周转系数</span></span><br><span class="line">    <span class="keyword">int</span> finished;<span class="comment">//标记作业完成</span></span><br><span class="line">    <span class="keyword">float</span> response;<span class="comment">//响应比</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getArrive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = String.format(<span class="string">&quot;%02d&quot;</span>, arrive.hour) + <span class="string">&quot;:&quot;</span>+String.format(<span class="string">&quot;%02d&quot;</span>, arrive.minute);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArrive</span><span class="params">(Time arrive)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arrive = arrive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getZx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> zx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZx</span><span class="params">(<span class="keyword">int</span> zx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.zx = zx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJobTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = String.format(<span class="string">&quot;%02d&quot;</span>, jobTime.hour) + <span class="string">&quot;:&quot;</span>+String.format(<span class="string">&quot;%02d&quot;</span>, jobTime.minute);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJobTime</span><span class="params">(Time jobTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jobTime = jobTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJobWait</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = String.format(<span class="string">&quot;%02d（分钟）&quot;</span>, jobWait);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJobWait</span><span class="params">(<span class="keyword">int</span> jobWait)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jobWait = jobWait;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProcessTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = String.format(<span class="string">&quot;%02d&quot;</span>, processTime.hour) + <span class="string">&quot;:&quot;</span>+String.format(<span class="string">&quot;%02d&quot;</span>, processTime.minute);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProcessTime</span><span class="params">(Time processTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.processTime = processTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProcessWait</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = String.format(<span class="string">&quot;%02d（分钟）&quot;</span>, processWait);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProcessWait</span><span class="params">(<span class="keyword">int</span> processWait)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.processWait = processWait;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFinish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = String.format(<span class="string">&quot;%02d&quot;</span>, finish.hour) + <span class="string">&quot;:&quot;</span>+String.format(<span class="string">&quot;%02d&quot;</span>, finish.minute);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFinish</span><span class="params">(Time finish)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.finish = finish;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getZz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> zz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZz</span><span class="params">(<span class="keyword">int</span> zz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.zz = zz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getZzxs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = String.format(<span class="string">&quot;%.4f&quot;</span>,zzxs);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZzxs</span><span class="params">(<span class="keyword">float</span> zzxs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.zzxs = zzxs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> finished;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFinished</span><span class="params">(<span class="keyword">int</span> finished)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.finished = finished;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getResponse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResponse</span><span class="params">(<span class="keyword">float</span> response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.response = response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Process a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.arrive.getHour()*<span class="number">60</span>+<span class="keyword">this</span>.arrive.getMinute())-(a.arrive.getHour()*<span class="number">60</span>+a.arrive.getMinute());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HRRF</span> </span>&#123;</span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> processNums;<span class="comment">//作业数</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Process&gt; ProcessList,Finished;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ProcessList = <span class="keyword">new</span> LinkedList&lt;Process&gt;();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入你要创建的作业数：&quot;</span>);</span><br><span class="line">        processNums = scan.nextInt();</span><br><span class="line">        scan.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请依次输入&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;作业名\t入井时间\t运行时间&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;processNums;i++)&#123;</span><br><span class="line">            Process p = <span class="keyword">new</span> Process();</span><br><span class="line">            String input = scan.nextLine();</span><br><span class="line">            String[] inputlist = input.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">            p.setName(inputlist[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">            Time time = <span class="keyword">new</span> Time();</span><br><span class="line">            String[] timelist = inputlist[<span class="number">1</span>].split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            time.setHour(Integer.parseInt(timelist[<span class="number">0</span>]));</span><br><span class="line">            time.setMinute(Integer.parseInt(timelist[<span class="number">1</span>]));</span><br><span class="line">            p.setArrive(time);</span><br><span class="line"></span><br><span class="line">            p.setZx(Integer.parseInt(inputlist[<span class="number">2</span>]));</span><br><span class="line"></span><br><span class="line">            Time sx = <span class="keyword">new</span> Time();</span><br><span class="line">            p.setJobTime(sx);</span><br><span class="line">            p.setProcessTime(sx);</span><br><span class="line">            p.setFinish(sx);</span><br><span class="line"></span><br><span class="line">            ProcessList.add(p);</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(ProcessList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showProcess</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> zzsum=<span class="number">0</span>,zzxssum=<span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;名字\t\t入井时间\t运行时间\t作业调度时间\t作业调度等待时间\t进程调度时间\t进程调度等待时间\t完成时间\t周转时间\t带权周转时间&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Finished.size();i++)&#123;</span><br><span class="line">            Process show = <span class="keyword">new</span> Process();</span><br><span class="line">            show = Finished.get(i);</span><br><span class="line">            System.out.println(show.getName()+<span class="string">&quot;\t&quot;</span>+show.getArrive()+<span class="string">&quot;\t&quot;</span>+show.getZx()+<span class="string">&quot;\t\t&quot;</span>+</span><br><span class="line">                    show.getJobTime()+<span class="string">&quot;\t\t\t&quot;</span>+show.getJobWait()+<span class="string">&quot;\t&quot;</span>+show.getProcessTime()+<span class="string">&quot;\t\t&quot;</span>+show.getProcessWait()+<span class="string">&quot;\t\t&quot;</span>+</span><br><span class="line">                    show.getFinish()+<span class="string">&quot;\t\t&quot;</span>+show.getZz()+<span class="string">&quot;\t\t&quot;</span>+show.getZzxs());</span><br><span class="line">            zzsum += show.getZz();</span><br><span class="line">            zzxssum += show.zzxs;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;系统平均周转时间为：\t\t\t\t\t\t\t\t\t&quot;</span>+String.format(<span class="string">&quot;%.4f&quot;</span>,zzsum/processNums));</span><br><span class="line">        System.out.println(<span class="string">&quot;系统带权平均周转时间为：\t\t\t\t\t\t\t\t&quot;</span>+String.format(<span class="string">&quot;%.4f&quot;</span>,zzxssum/processNums));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Process <span class="title">find</span><span class="params">(Time now)</span></span>&#123;</span><br><span class="line">        LinkedList&lt;Process&gt; FindList;</span><br><span class="line">        FindList = <span class="keyword">new</span> LinkedList&lt;Process&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ProcessList.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((ProcessList.get(i).getFinished()!=<span class="number">1</span>) &amp;&amp; Time.timecompare(ProcessList.get(i).arrive,now))&#123;</span><br><span class="line">                FindList.add(ProcessList.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;FindList.size();i++)&#123;</span><br><span class="line">            FindList.get(i).setResponse((<span class="number">1</span>+Time.timesub(FindList.get(i).arrive,now)/FindList.get(i).getZx()));</span><br><span class="line">        &#125;</span><br><span class="line">        Process max = <span class="keyword">new</span> Process();</span><br><span class="line">        <span class="keyword">float</span> maxX= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;FindList.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(maxX &lt; FindList.get(i).getResponse())&#123;</span><br><span class="line">                maxX = FindList.get(i).getResponse();</span><br><span class="line">                max = FindList.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Finished = <span class="keyword">new</span> LinkedList&lt;Process&gt;();</span><br><span class="line">        Time now = <span class="keyword">new</span> Time();</span><br><span class="line">        now.setHour(ProcessList.get(<span class="number">0</span>).arrive.getHour());</span><br><span class="line">        now.setMinute(ProcessList.get(<span class="number">0</span>).arrive.getMinute());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ProcessList.size();i++)&#123;</span><br><span class="line">            Process need = find(now);</span><br><span class="line">            need.setJobTime(now);</span><br><span class="line">            need.setJobWait(Time.timesub(need.arrive,now));</span><br><span class="line">            need.setProcessTime(need.jobTime);</span><br><span class="line">            need.setProcessWait(Time.timesub(need.jobTime,need.processTime));</span><br><span class="line">            now = Time.timePlus(now,need.getZx());</span><br><span class="line">            need.setFinish(now);</span><br><span class="line">            need.setZz(Time.timesub(need.arrive,need.finish));</span><br><span class="line">            need.setZzxs((<span class="keyword">float</span>)need.getZz()/need.getZx());</span><br><span class="line">            Finished.add(need);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ProcessList.size();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ProcessList.get(j).getName().equals(need.getName()))&#123;</span><br><span class="line">                    ProcessList.get(j).setFinished(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hrrf</span><span class="params">()</span></span>&#123;</span><br><span class="line">        init();</span><br><span class="line">        calculate();</span><br><span class="line">        showProcess();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HRRF h = <span class="keyword">new</span> HRRF();</span><br><span class="line">        h.hrrf();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2021/5/13 9:23</p><p>补充,银行家算法</p><h1 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h1><p>这个算法好像是不强制要求完成的，故此算法存在大问题的可能性较大（我不记得了o(<em>￣▽￣</em>)o）</p><h2 id="主要思想-4"><a href="#主要思想-4" class="headerlink" title="主要思想"></a>主要思想</h2><p>我们可以把<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a>看作是银行家，操作系统管理的资源相当于银行家管理的资金，进程向操作系统请求分配资源相当于用户向银行家贷款。</p><p>为保证资金的安全，银行家规定：</p><p>(1) 当一个顾客对资金的最大需求量不超过银行家现有的资金时就可接纳该顾客；</p><p>(2) 顾客可以分期贷款，但贷款的总数不能超过最大需求量；</p><p>(3) 当银行家现有的资金不能满足顾客尚需的贷款数额时，对顾客的贷款可推迟支付，但总能使顾客在有限的时间里得到贷款；</p><p>(4) 当顾客得到所需的全部资金后，一定能在有限的时间里归还所有的资金.</p><h2 id="Java具体实现-3"><a href="#Java具体实现-3" class="headerlink" title="Java具体实现"></a>Java具体实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.management.resource.internal.inst.FileOutputStreamRMHooks;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.NestingKind;</span><br><span class="line"><span class="keyword">import</span> javax.print.attribute.standard.Finishings;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banker</span></span>&#123;<span class="comment">//BankerOfAlgorithm  银行家算法</span></span><br><span class="line">    <span class="keyword">int</span> Max[][];</span><br><span class="line">    <span class="keyword">int</span> Allocation[][];</span><br><span class="line">    <span class="keyword">int</span> Need[][];</span><br><span class="line">    <span class="keyword">int</span> Available[];</span><br><span class="line">    <span class="keyword">int</span> Work[];</span><br><span class="line">    String name[];</span><br><span class="line">    <span class="keyword">int</span> temp[];</span><br><span class="line">    <span class="keyword">int</span> S = <span class="number">100</span>, P = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> safequeue[];</span><br><span class="line">    <span class="keyword">int</span> Flag[];</span><br><span class="line">    <span class="keyword">int</span> Request[];</span><br><span class="line">    Scanner sc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Banker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxsize = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> Max[][] = <span class="keyword">new</span> <span class="keyword">int</span>[maxsize][maxsize];</span><br><span class="line">        <span class="keyword">int</span> Allocation[][] = <span class="keyword">new</span> <span class="keyword">int</span>[maxsize][maxsize];</span><br><span class="line">        <span class="keyword">int</span> Need[][] = <span class="keyword">new</span> <span class="keyword">int</span>[maxsize][maxsize];</span><br><span class="line">        <span class="keyword">int</span> Available[] = <span class="keyword">new</span> <span class="keyword">int</span>[maxsize];</span><br><span class="line">        <span class="keyword">int</span> Work[] = <span class="keyword">new</span> <span class="keyword">int</span>[maxsize];</span><br><span class="line">        String name[] = <span class="keyword">new</span> String[maxsize];</span><br><span class="line">        <span class="keyword">int</span> temp[] = <span class="keyword">new</span> <span class="keyword">int</span>[maxsize];</span><br><span class="line">        <span class="keyword">int</span> S = <span class="number">100</span>, P = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> Flag[] = <span class="keyword">new</span> <span class="keyword">int</span>[maxsize];</span><br><span class="line">        <span class="keyword">int</span> safequeue[] = <span class="keyword">new</span> <span class="keyword">int</span>[maxsize];</span><br><span class="line">        <span class="keyword">int</span> Request[] = <span class="keyword">new</span> <span class="keyword">int</span>[maxsize];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">iffinish</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;P;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;S;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (Need[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Showdata</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i, j, k, l,temp=<span class="number">0</span>;;</span><br><span class="line">        System.out.println(<span class="string">&quot;进程名\t\t最大需求量\t尚需求量\t\t已分配量\t\t执行是否结束&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;\t\t\t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; S; i++) &#123;</span><br><span class="line">                System.out.print(name[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; P; i++) &#123;</span><br><span class="line">            temp = <span class="number">0</span>;</span><br><span class="line">            System.out.print(<span class="string">&quot;进程P[&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;]&quot;</span> + <span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; S; j++) &#123;</span><br><span class="line">                System.out.print(Max[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (l = <span class="number">0</span>; l &lt; S; l++) &#123;</span><br><span class="line">                System.out.print(Need[i][l] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                temp += Need[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; S; k++) &#123;</span><br><span class="line">                System.out.print(Allocation[i][k] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(Flag[i]==<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;finish\n&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;working\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n当前可用资源：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; S; i++) &#123;</span><br><span class="line">            System.out.print(Available[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Judgesafe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] tempwork = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">int</span> i, x, k = <span class="number">0</span>, m, apply;</span><br><span class="line">        <span class="keyword">int</span>[] Finish = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        Work = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; S; i++) &#123;</span><br><span class="line">            Work[i] = Available[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; P; i++) &#123;</span><br><span class="line">            apply = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; S; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Finish[i] == <span class="number">0</span> &amp;&amp; Need[i][j] &lt;= Work[j]) &#123;</span><br><span class="line">                    apply++;</span><br><span class="line">                    <span class="keyword">if</span> (apply == S) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (m = <span class="number">0</span>; m &lt; S; m++) &#123;</span><br><span class="line">                            tempwork[i][m] = Work[m];</span><br><span class="line">                            Work[m] = Work[m] + Allocation[i][m];</span><br><span class="line">                        &#125;</span><br><span class="line">                        Finish[i] = <span class="number">1</span>;</span><br><span class="line">                        temp[k] = i;</span><br><span class="line">                        i = -<span class="number">1</span>;</span><br><span class="line">                        k++;</span><br><span class="line">                        flag++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; P; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Finish[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;申请不成功&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;申请成功&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;分配的序列:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; P; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;P[&quot;</span>+(temp[i]+<span class="number">1</span>)+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; P - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;--&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Changedata</span><span class="params">(<span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S; i++) &#123;</span><br><span class="line">            Available[i] = Available[i] - Request[i];</span><br><span class="line">            Allocation[flag][i] = Allocation[flag][i] + Request[i];</span><br><span class="line">            Need[flag][i] = Need[flag][i] - Request[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Share</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> i, flag;</span><br><span class="line">        <span class="keyword">char</span> ch = <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入请求资源的进程：&quot;</span>);</span><br><span class="line">        flag = sc.nextInt()-<span class="number">1</span>;</span><br><span class="line">        Request = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">if</span> (flag &gt;= P) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;此进程不存在!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入此进程对各个资源的请求数量：&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; S; i++) &#123;</span><br><span class="line">                Request[i] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; S; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Request[i] &gt; Need[flag][i]) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;进程P[&quot;</span> + (flag+<span class="number">1</span>)+<span class="string">&quot;]&quot;</span> + <span class="string">&quot;申请的资源大于可用资源需要的资源!&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;分配不合理不予分配!&quot;</span>);</span><br><span class="line">                    ch = <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Request[i] &gt; Available[i]) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;进程&quot;</span> + (flag +<span class="number">1</span>)+ <span class="string">&quot;申请的资源大于可利用的资源。&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;分配不合理，不予分配!&quot;</span>);</span><br><span class="line">                    ch = <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (Judgesafe() == -<span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;进程&quot;</span> + flag + <span class="string">&quot;申请资源后，系统进入死锁状态，分配失败!&quot;</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; S; j++) &#123;</span><br><span class="line">                        Available[j] = Available[j] + Request[j];</span><br><span class="line">                        Allocation[flag][j] = Allocation[flag][j] - Request[j];</span><br><span class="line">                        Need[flag][j] = Need[flag][j] + Request[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                Changedata(flag);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(iffinish())&#123;</span><br><span class="line">                Flag[i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Banker mytext = <span class="keyword">new</span> Banker();</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> i, j, M, N, number;</span><br><span class="line">        String choice, tempstring;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入资源种类：&quot;</span>);</span><br><span class="line">        N = sc.nextInt();</span><br><span class="line">        mytext.S = N;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入进程的数量：&quot;</span>);</span><br><span class="line">        M = sc.nextInt();</span><br><span class="line">        mytext.P = M;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入资源的名称和数量：&quot;</span>);</span><br><span class="line">        mytext.name = <span class="keyword">new</span> String[<span class="number">100</span>];</span><br><span class="line">        mytext.Available = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            mytext.name[i] = sc.next();</span><br><span class="line">            mytext.Available[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;输入各进程资源最大需求量：&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;进程名\t\t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; mytext.S; i++) &#123;</span><br><span class="line">            System.out.print(mytext.name[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        sc.nextLine();</span><br><span class="line">        mytext.Max = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line">        mytext.Flag = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">            mytext.Flag[i] = <span class="number">0</span>;</span><br><span class="line">            String ss = sc.nextLine();</span><br><span class="line">            String[] sslist = ss.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">                mytext.Max[i][j] = Integer.parseInt(sslist[j+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;输入各进程资源已分配量：&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;进程名\t\t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; mytext.S; i++) &#123;</span><br><span class="line">            System.out.print(mytext.name[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        mytext.Allocation = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line">        mytext.Need = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">            String as = sc.nextLine();</span><br><span class="line">            String[] aslist = as.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">                mytext.Allocation[i][j] = Integer.parseInt(aslist[j+<span class="number">1</span>]);</span><br><span class="line">                mytext.Available[j] = mytext.Available[j] - mytext.Allocation[i][j];</span><br><span class="line">                mytext.Need[i][j] = mytext.Max[i][j] - mytext.Allocation[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            mytext.Judgesafe();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mytext.Showdata();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是否分配资源? Y/N：&quot;</span>);</span><br><span class="line">            choice = sc.next();</span><br><span class="line">            <span class="keyword">char</span> choice_char = choice.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">switch</span> (choice_char) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;N&#x27;</span>:</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    mytext.Share();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mytext.Showdata();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A 10</span></span><br><span class="line"><span class="comment">B 5</span></span><br><span class="line"><span class="comment">C 7</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">进程P[1] 7 5 3</span></span><br><span class="line"><span class="comment">进程P[2] 3 2 2</span></span><br><span class="line"><span class="comment">进程P[3] 9 0 2</span></span><br><span class="line"><span class="comment">进程P[4] 2 2 2</span></span><br><span class="line"><span class="comment">进程P[5] 4 3 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">进程P[1] 0 1 1</span></span><br><span class="line"><span class="comment">进程P[2] 2 0 0</span></span><br><span class="line"><span class="comment">进程P[3] 3 0 2</span></span><br><span class="line"><span class="comment">进程P[4] 2 1 1</span></span><br><span class="line"><span class="comment">进程P[5] 0 0 2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>以下是储存管理算法</p><h1 id="储存管算法"><a href="#储存管算法" class="headerlink" title="储存管算法"></a>储存管算法</h1><h2 id="固定分区储存管理"><a href="#固定分区储存管理" class="headerlink" title="固定分区储存管理"></a>固定分区储存管理</h2><h3 id="主要思想-5"><a href="#主要思想-5" class="headerlink" title="主要思想"></a>主要思想</h3><p>固定式分区是在处理作业之前<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E5%99%A8">存储器</a>就已经被划分成若干个分区，每个分区的大小可以相同，也可以不同。但是，一旦划分好分区后，<a href="https://baike.baidu.com/item/%E4%B8%BB%E5%AD%98%E5%82%A8%E5%99%A8">主存储器</a>中的分区的个数就固定了，且每个分区的大小固定不变。</p><h3 id="Java具体实现-4"><a href="#Java具体实现-4" class="headerlink" title="Java具体实现"></a>Java具体实现</h3><h4 id="数据结构-4"><a href="#数据结构-4" class="headerlink" title="数据结构"></a>数据结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">implements</span>  <span class="title">Comparable</span>&lt;<span class="title">Node</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; <span class="comment">//id号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size; <span class="comment">//分区长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> address; <span class="comment">//分区地址</span></span><br><span class="line">    String s; <span class="comment">//分区状态</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(<span class="keyword">int</span> address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setS</span><span class="params">(String ss)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = ss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node[ id=&quot;</span> + id + <span class="string">&quot;size=&quot;</span> + size + <span class="string">&quot;address=&quot;</span> + address + <span class="string">&quot;s=&quot;</span> + s + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getSize()-node.getSize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法实现-2"><a href="#算法实现-2" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FPSM</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nums;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Node&gt; NodeList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;*************打印区块信息**************&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;分区号\t大小(KB)\t起始(KB)\t状态&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++) &#123;</span><br><span class="line">            Node node = NodeList.get(i);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t\t%d\t\t%d\t\t%s\n&quot;</span>,node.getId(),node.getSize(),node.getAddress(),node.getS());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (NodeList.get(i).getS() != <span class="string">&quot;0&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">allocate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collections.sort(NodeList);  <span class="comment">//按分区大小排序</span></span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        show();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入作业数:&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入这&quot;</span> + (n) + <span class="string">&quot;作业的信息:&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span>[] list = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入作业&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;的大小:&quot;</span>);</span><br><span class="line">            list[i] = scan.nextInt();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (NodeList.get(j).getSize() &gt; list[i]) &#123;</span><br><span class="line">                    String ss = Integer.toString((i + <span class="number">1</span>));</span><br><span class="line">                    String s = <span class="string">&quot;JOB&quot;</span> + ss;</span><br><span class="line">                    NodeList.get(j).setS(s);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j==(nums-<span class="number">1</span>))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;JOB&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;大小超过最大分区大小，分配失败&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;各作业信息:&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;作业名\t\t作业大小&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;JOB&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;\t\t&quot;</span> + list[i] + <span class="string">&quot;KB&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">free</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要回收的作业名:&quot;</span>);</span><br><span class="line">        String name = scan.next();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (NodeList.get(i).getS().equalsIgnoreCase(name)) &#123; <span class="comment">//字符串比较需要调用函数，不然会出错</span></span><br><span class="line">                NodeList.get(i).setS(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;回收成功&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i==nums-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;回收失败，分配区中未找到该作业，请从新输入！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入系统的分区块数：&quot;</span>);</span><br><span class="line">        nums = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请依次输入：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;分区号\t大小\t起始&quot;</span>);</span><br><span class="line">        NodeList = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++) &#123;</span><br><span class="line">            NodeList.add(<span class="keyword">new</span> Node());</span><br><span class="line">        &#125;</span><br><span class="line">        scan.nextLine();</span><br><span class="line">        Node[] node = <span class="keyword">new</span> Node[nums];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++) &#123;</span><br><span class="line">            String s = scan.nextLine();</span><br><span class="line">            String[] slist = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            NodeList.get(i).setId(Integer.parseInt(slist[<span class="number">0</span>]));</span><br><span class="line">            NodeList.get(i).setSize(Integer.parseInt(slist[<span class="number">1</span>]));</span><br><span class="line">            NodeList.get(i).setAddress(Integer.parseInt(slist[<span class="number">2</span>]));</span><br><span class="line">            NodeList.get(i).setS(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fpsm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        init();</span><br><span class="line">        allocate();</span><br><span class="line">        show();</span><br><span class="line">        <span class="keyword">while</span> (find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是否还需要回收(y/n):&quot;</span>);</span><br><span class="line">            <span class="keyword">char</span> c = scan.next().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;Y&#x27;</span> || c == <span class="string">&#x27;y&#x27;</span>) &#123;</span><br><span class="line">                free();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FPSM f = <span class="keyword">new</span> FPSM();</span><br><span class="line">        f.fpsm();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 12 20</span></span><br><span class="line"><span class="comment">2 32 32</span></span><br><span class="line"><span class="comment">3 64 64</span></span><br><span class="line"><span class="comment">4 128 128</span></span><br><span class="line"><span class="comment">5 100 256</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="可变分区储存管理"><a href="#可变分区储存管理" class="headerlink" title="可变分区储存管理"></a>可变分区储存管理</h2><h3 id="主要思想-6"><a href="#主要思想-6" class="headerlink" title="主要思想"></a>主要思想</h3><p>在作业要求装入内存时，若当时内存中有足够的存储空间满足该作业的需求，那就划分出一个与作业相对地址空间同样大小的分区分配给它使用。 </p><p>前后相邻接分区的四种关系</p><ul><li>释放分区的前、后邻接分区都是已分配区，没有合并的问题存在。</li><li>释放分区的前邻接分区是空闲区，后邻接分区是已分配区。释放区应该和前邻接的空闲区合并成一个新的空闲区。</li><li>释放区的前邻接分区是已分配区，后邻接分区是空闲区。因此，释放分区应该和后邻接的空闲区合并成一个新的空闲区。</li><li>释放区的前、后邻接分区都是空闲区。因此，释放区应该和前、后两个邻接的空闲区合并成一个新的空闲区。</li></ul><p>空闲分区合并的时机</p><ul><li>一是调度到某作业时，若系统的每个空闲区尺寸都小于它的需要，但空闲区总存储量大于它的存储请求，于是进行空闲区合并，得到一个大的空闲区，满足该作业的需要。</li><li>一是只要有作业运行完归还所占用的存储区，系统就进行空闲区的合并。</li></ul><h3 id="Java具体实现-5"><a href="#Java具体实现-5" class="headerlink" title="Java具体实现"></a>Java具体实现</h3><h4 id="数据结构-5"><a href="#数据结构-5" class="headerlink" title="数据结构"></a>数据结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">implements</span>  <span class="title">Comparable</span>&lt;<span class="title">Node</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size; <span class="comment">//分区长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> address; <span class="comment">//分区地址</span></span><br><span class="line">    String flag; <span class="comment">//分区状态</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(<span class="keyword">int</span> address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(String ss)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = ss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getSize()-node.getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="算法实现-3"><a href="#算法实现-3" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VPSM</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalsize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> startaddress;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Node&gt; NodeList;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Node&gt; FreeList;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;**********可变分区管理**********&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [1] 内存分配          *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [2] 内存去配          *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [0] 退出管理          *&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;***********分配算法************&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [1] 最先分配算法       *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [2] 最优分配算法       *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [0] 最坏分配算法       *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*************主存分配情况**************&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;已分配：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;分区号\t大小(KB)\t起始(KB)\t状态&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;NodeList.size();i++)&#123;</span><br><span class="line">            Node node = NodeList.get(i);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t\t%d\t\t%d\t\t%s\n&quot;</span>,(i+<span class="number">1</span>),node.getSize(),node.getAddress(),node.getFlag());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;未分配：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;分区号\t大小(KB)\t起始(KB)\t状态&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt; FreeList.size();j++)&#123;</span><br><span class="line">            Node node = FreeList.get(j);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t\t%d\t\t%d\t\t%s\n&quot;</span>,(j+<span class="number">1</span>),node.getSize(),node.getAddress(),node.getFlag());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//分配</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FirstAllotment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入请求分配作业信息：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;作业名\t分配主存大小&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node();</span><br><span class="line">            String s = scan.nextLine();</span><br><span class="line">            String[] slist = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            size = Integer.parseInt(slist[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt; FreeList.size();j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (size &lt; FreeList.get(j).getSize()) &#123;</span><br><span class="line">                    node.setFlag(slist[<span class="number">0</span>]);</span><br><span class="line">                    node.setSize(size);</span><br><span class="line">                    node.setAddress(FreeList.get(j).getAddress());</span><br><span class="line">                    FreeList.get(j).setAddress(FreeList.get(j).getAddress() + size);</span><br><span class="line">                    FreeList.get(j).setSize(FreeList.get(j).getSize() - size);</span><br><span class="line">                    NodeList.add(node);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j == FreeList.size()-<span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;剩余储存空间不足，分配失败！&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(NodeList, <span class="keyword">new</span> Comparator&lt;Node&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Node o1, Node o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getAddress()-o2.getAddress();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;分配成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BestAllotment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入请求分配作业信息：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;作业名\t分配主存大小大小&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;length;i++) &#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node();</span><br><span class="line">            String s = scan.nextLine();</span><br><span class="line">            String[] slist = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            size = Integer.parseInt(slist[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt; FreeList.size();j++) &#123;  <span class="comment">//从空闲分区中查找</span></span><br><span class="line">                <span class="keyword">if</span> (size &lt; FreeList.get(j).getSize()) &#123;</span><br><span class="line">                    node.setFlag(slist[<span class="number">0</span>]);</span><br><span class="line">                    node.setSize(size);</span><br><span class="line">                    node.setAddress(FreeList.get(j).getAddress());</span><br><span class="line">                    FreeList.get(j).setAddress(FreeList.get(j).getAddress() + size);</span><br><span class="line">                    FreeList.get(j).setSize(FreeList.get(j).getSize() - size);</span><br><span class="line">                    NodeList.add(node);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j == FreeList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;剩余储存空间不足，分配失败！&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Collections.sort(NodeList, <span class="keyword">new</span> Comparator&lt;Node&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Node o1, Node o2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.getAddress() - o2.getAddress();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            Collections.sort(FreeList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WorstAllotment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入请求分配作业信息：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;作业名\t分配主存大小大小&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;length;i++) &#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node();</span><br><span class="line">            String s = scan.nextLine();</span><br><span class="line">            String[] slist = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            size = Integer.parseInt(slist[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=FreeList.size()-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--) &#123;  <span class="comment">//从空闲分区中查找</span></span><br><span class="line">                <span class="keyword">if</span> (size &lt; FreeList.get(j).getSize()) &#123;</span><br><span class="line">                    node.setFlag(slist[<span class="number">0</span>]);</span><br><span class="line">                    node.setSize(size);</span><br><span class="line">                    node.setAddress(FreeList.get(j).getAddress());</span><br><span class="line">                    FreeList.get(j).setAddress(FreeList.get(j).getAddress() + size);</span><br><span class="line">                    FreeList.get(j).setSize(FreeList.get(j).getSize() - size);</span><br><span class="line">                    NodeList.add(node);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j == FreeList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;剩余储存空间不足，分配失败！&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Collections.sort(NodeList, <span class="keyword">new</span> Comparator&lt;Node&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Node o1, Node o2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.getAddress() - o2.getAddress();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            Collections.sort(FreeList);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">free</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你要删除的作业名：&quot;</span>);</span><br><span class="line">        String s = scan.next();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        Node recycle = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="keyword">int</span> neighborup = -<span class="number">1</span>;<span class="comment">//记录上面相邻接块的位置，-1代表不邻接</span></span><br><span class="line">        <span class="keyword">int</span> neighbordown = -<span class="number">1</span>;<span class="comment">//记录上面相邻接块的位置，-1代表不邻接</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;NodeList.size();i++)&#123;</span><br><span class="line">            Node node = NodeList.get(i);</span><br><span class="line">            String flag = node.getFlag();</span><br><span class="line">            <span class="keyword">if</span>(flag.equalsIgnoreCase(s))&#123;</span><br><span class="line">                recycle.setSize(node.getSize());</span><br><span class="line">                recycle.setAddress(node.getAddress());</span><br><span class="line">                recycle.setFlag(node.getFlag());</span><br><span class="line">                <span class="comment">//先找到要回收的内存,保留信息</span></span><br><span class="line">                NodeList.remove(node); <span class="comment">//移除作业</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            else if(!(flag.equalsIgnoreCase(s)) &amp;&amp; (i==(NodeList.size()-1)))&#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;未找到该作业!分配失败!&quot;);</span></span><br><span class="line"><span class="comment">//                return ;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;FreeList.size(); i++) &#123;</span><br><span class="line">            Node free = FreeList.get(i);</span><br><span class="line">            <span class="comment">//上邻</span></span><br><span class="line">            <span class="keyword">if</span>(recycle.getAddress()==(free.getAddress()+free.getSize()))&#123;</span><br><span class="line">                neighborup = FreeList.indexOf(free);</span><br><span class="line">                free.setSize(free.getSize()+recycle.getSize());<span class="comment">//更新区间长度</span></span><br><span class="line">                FreeList.set(neighborup,free);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//下邻</span></span><br><span class="line">            <span class="keyword">if</span>((recycle.getAddress()+recycle.getSize())==free.getAddress())&#123;</span><br><span class="line">                neighbordown = FreeList.indexOf(free);<span class="comment">//更新两块合并后的长度</span></span><br><span class="line">                free.setAddress(recycle.getAddress());<span class="comment">//更新该空闲区间首地址</span></span><br><span class="line">                free.setSize(free.getSize()+recycle.getSize());<span class="comment">//更新该空闲区间长度</span></span><br><span class="line">                FreeList.set(neighbordown,free);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//上下邻</span></span><br><span class="line">            <span class="keyword">if</span> (neighbordown!=-<span class="number">1</span> &amp;&amp; neighborup!=-<span class="number">1</span>)&#123;</span><br><span class="line">                Node up = FreeList.get(neighborup);</span><br><span class="line">                Node down = FreeList.get(neighbordown);</span><br><span class="line"></span><br><span class="line">                up.setSize(down.getSize()-up.getSize());</span><br><span class="line">                FreeList.set(neighbordown,up);<span class="comment">//修改链表中三块合一后的最终空闲块</span></span><br><span class="line">                FreeList.remove(down);<span class="comment">//下面这块已经被上面那块合并</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (neighbordown==-<span class="number">1</span> &amp;&amp; neighborup==-<span class="number">1</span>)&#123;</span><br><span class="line">            Node addFree = <span class="keyword">new</span> Node();</span><br><span class="line">            addFree.setSize(recycle.getSize());</span><br><span class="line">            addFree.setAddress(recycle.getAddress());</span><br><span class="line">            addFree.setFlag(<span class="string">&quot;空闲&quot;</span>);</span><br><span class="line">            FreeList.addLast(addFree);</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(FreeList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入内存大小：&quot;</span>);</span><br><span class="line">        totalsize = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入起始地址大小：&quot;</span>);</span><br><span class="line">        startaddress = scan.nextInt();</span><br><span class="line">        <span class="comment">//初始空闲化分区</span></span><br><span class="line">        NodeList = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line">        FreeList = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line">        Node start = <span class="keyword">new</span> Node();</span><br><span class="line">        start.setSize(totalsize);</span><br><span class="line">        start.setAddress(startaddress);</span><br><span class="line">        start.setFlag(<span class="string">&quot;空闲&quot;</span>);</span><br><span class="line">        FreeList.add(start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">vpsm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        init();</span><br><span class="line">        show();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入要进行的管理选项：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> FuncChoic = scan.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (FuncChoic == <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入分配方式选项：&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> AllocWay = scan.nextInt();</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入你要分配的个数：&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> nums = scan.nextInt();</span><br><span class="line">                length = nums;</span><br><span class="line">                <span class="keyword">switch</span> (AllocWay) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        FirstAllotment();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        BestAllotment();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        WorstAllotment();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        System.out.println(<span class="string">&quot;选择的分配方式有误&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FuncChoic == <span class="number">2</span>) &#123;</span><br><span class="line">                free();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FuncChoic == <span class="number">0</span>) &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入有误！！请从新输入&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VPSM f = <span class="keyword">new</span> VPSM();</span><br><span class="line">        f.vpsm();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">256</span></span><br><span class="line"><span class="comment">40</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">JOB_A 15</span></span><br><span class="line"><span class="comment">JOB_B 50</span></span><br><span class="line"><span class="comment">JOB_C 10</span></span><br><span class="line"><span class="comment">JOB_D 25</span></span><br><span class="line"><span class="comment">JOB_E 14</span></span><br><span class="line"><span class="comment">JOB_F 32</span></span><br><span class="line"><span class="comment">done</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>实验老师要求是页式、段式、段页式储存管理选一个，我选了短时储存管理，故只有一个啦</p><h2 id="段式储存管理"><a href="#段式储存管理" class="headerlink" title="段式储存管理"></a>段式储存管理</h2><h3 id="主要思想-7"><a href="#主要思想-7" class="headerlink" title="主要思想"></a>主要思想</h3><p>了进行段式管理，每道程序在系统中都有一个段（映象）表来存放该道程序各段装入主存的状况信息。段表中的每一项（对应表中的每一行）描述该道程序一个段的基本状况，由若干个字段提供。段名字段用于存放段的名称，段名一般是有其逻辑意义的，也可以转换成用段号指明。由于段号从0开始顺序编号，正好与段表中的<a href="https://baike.baidu.com/item/%E8%A1%8C%E5%8F%B7">行号</a>对应，如2段必是段表中的第3行，这样，段表中就可不设段号（名）字段。装入位字段用来指示该段是否已经调入主存，“1”表示已装入，“0”表示未装入。在程序的执行过程中，各段的装入位随该段是否活跃而动态变化。当装入位为“1”时，地址字段用于表示该段装入主存中起始（绝对）地址，当装入位为“0”时，则无效（有时机器用它表示该段在<a href="https://baike.baidu.com/item/%E8%BE%85%E5%AD%98">辅存</a>中的起始地址）。段长字段指明该段的大小，一般以字数或字节数为单位，取决于所用的<a href="https://baike.baidu.com/item/%E7%BC%96%E5%9D%80">编址</a>方式。段长字段是用来判断所访问的地址是否越出段界的界限保护检查用的。访问方式字段用来标记该段允许的访问方式，如只读、可写、只能执行等，以提供段的访问方式保护。除此之外，段表中还可以根据需要设置其它的字段。段表本身也是一个段，一般常驻在主存中，也可以存在辅存中，需要时再调入主存。假设系统在主存中最多可同时有N道程序，可设N个段表<a href="https://baike.baidu.com/item/%E5%9F%BA%E5%9D%80%E5%AF%84%E5%AD%98%E5%99%A8/2164353">基址寄存器</a>。对应于每道程序，由基号（程序号）指明使用哪个段表<a href="https://baike.baidu.com/item/%E5%9F%BA%E5%9D%80%E5%AF%84%E5%AD%98%E5%99%A8/2164353">基址寄存器</a>。段表基址寄存器中的段表基址字段指向该道程序的段表在主存中的起始地址。段表长度字段指明该道程序所用段表的行数，即程序的段数。</p><h3 id="Java具体实现-6"><a href="#Java具体实现-6" class="headerlink" title="Java具体实现"></a>Java具体实现</h3><h4 id="数据结构-6"><a href="#数据结构-6" class="headerlink" title="数据结构"></a>数据结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">implements</span>  <span class="title">Comparable</span>&lt;<span class="title">Node</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size; <span class="comment">//分区长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> address; <span class="comment">//分区地址</span></span><br><span class="line">    String flag; <span class="comment">//分区状态</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(<span class="keyword">int</span> address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(String ss)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = ss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getSize()-node.getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法实现-4"><a href="#算法实现-4" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SSM</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalsize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> startaddress;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Node&gt; NodeList;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Node&gt; FreeList;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;**********段式储存管理**********&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [1] 内存分配          *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [2] 内存去配          *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [0] 退出管理          *&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;***********分配算法************&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [1] 最先分配算法       *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [2] 最优分配算法       *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [0] 最坏分配算法       *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*************主存分配情况**************&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;已分配：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;分区号\t大小(KB)\t起始(KB)\t状态&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;NodeList.size();i++)&#123;</span><br><span class="line">            Node node = NodeList.get(i);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t\t%d\t\t%d\t\t%s\n&quot;</span>,(i+<span class="number">1</span>),node.getSize(),node.getAddress(),node.getFlag());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;未分配：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;分区号\t大小(KB)\t起始(KB)\t状态&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt; FreeList.size();j++)&#123;</span><br><span class="line">            Node node = FreeList.get(j);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t\t%d\t\t%d\t\t%s\n&quot;</span>,(j+<span class="number">1</span>),node.getSize(),node.getAddress(),node.getFlag());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowSegmentTable</span><span class="params">(String n)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;******打印&quot;</span>+n+<span class="string">&quot;段表*****&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;段号\t段长（KB）\t基址（KB）&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;NodeList.size();i++)&#123;</span><br><span class="line">            Node node = NodeList.get(i);</span><br><span class="line">            String line = node.getFlag();</span><br><span class="line">            String ns = line.substring(<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">            String ID = line.substring(<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(ns.equals(n))&#123;</span><br><span class="line">                System.out.println(ID+<span class="string">&quot;\t&quot;</span>+node.getSize()+<span class="string">&quot;\t\t\t&quot;</span>+node.getAddress());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//分配</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FirstAllotment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入作业名：&quot;</span>);</span><br><span class="line">        String name = scan.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入&quot;</span>+name+<span class="string">&quot;请求分配的内存大小（单位：KB）：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> allSize = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入分成几段：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> nums = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums;i++)&#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node();</span><br><span class="line">            System.out.println(<span class="string">&quot;剩余&quot;</span>+allSize+<span class="string">&quot;K的内存,请输入第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;段内存大小（单位：KB）：&quot;</span>);</span><br><span class="line">            size = scan.nextInt();</span><br><span class="line">            String flag = name+<span class="string">&quot;(&quot;</span>+Integer.toString(i)+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt; FreeList.size();j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (size &lt; FreeList.get(j).getSize()) &#123;</span><br><span class="line">                    node.setFlag(flag);</span><br><span class="line">                    node.setSize(size);</span><br><span class="line">                    node.setAddress(FreeList.get(j).getAddress());</span><br><span class="line">                    FreeList.get(j).setAddress(FreeList.get(j).getAddress() + size);</span><br><span class="line">                    FreeList.get(j).setSize(FreeList.get(j).getSize() - size);</span><br><span class="line">                    NodeList.add(node);</span><br><span class="line">                    allSize -= size;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j == FreeList.size()-<span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;剩余储存空间不足，分配失败！&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            show();</span><br><span class="line">            Collections.sort(NodeList, <span class="keyword">new</span> Comparator&lt;Node&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Node o1, Node o2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.getAddress()-o2.getAddress();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;分配成功&quot;</span>);</span><br><span class="line">        ShowSegmentTable(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BestAllotment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入作业名：&quot;</span>);</span><br><span class="line">        String name = scan.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入&quot;</span>+name+<span class="string">&quot;请求分配的内存大小（单位：KB）：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> allSize = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入分成几段：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> nums = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums;i++) &#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node();</span><br><span class="line">            System.out.println(<span class="string">&quot;剩余&quot;</span>+allSize+<span class="string">&quot;K的内存,请输入第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;段内存大小（单位：KB）：&quot;</span>);</span><br><span class="line">            size = scan.nextInt();</span><br><span class="line">            String flag = name+<span class="string">&quot;(&quot;</span>+Integer.toString(i)+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt; FreeList.size();j++) &#123;  <span class="comment">//从空闲分区中查找</span></span><br><span class="line">                <span class="keyword">if</span> (size &lt; FreeList.get(j).getSize()) &#123;</span><br><span class="line">                    node.setFlag(flag);</span><br><span class="line">                    node.setSize(size);</span><br><span class="line">                    node.setAddress(FreeList.get(j).getAddress());</span><br><span class="line">                    FreeList.get(j).setAddress(FreeList.get(j).getAddress() + size);</span><br><span class="line">                    FreeList.get(j).setSize(FreeList.get(j).getSize() - size);</span><br><span class="line">                    NodeList.add(node);</span><br><span class="line">                    allSize -= size;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j == FreeList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;剩余储存空间不足，分配失败！&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            show();</span><br><span class="line">            Collections.sort(NodeList, <span class="keyword">new</span> Comparator&lt;Node&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Node o1, Node o2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.getAddress() - o2.getAddress();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            Collections.sort(FreeList);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;分配成功&quot;</span>);</span><br><span class="line">        ShowSegmentTable(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WorstAllotment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入作业名：&quot;</span>);</span><br><span class="line">        String name = scan.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入&quot;</span>+name+<span class="string">&quot;请求分配的内存大小（单位：KB）：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> allSize = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入分成几段：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> nums = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums;i++) &#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node();</span><br><span class="line">            System.out.println(<span class="string">&quot;剩余&quot;</span>+allSize+<span class="string">&quot;K的内存,请输入第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;段内存大小（单位：KB）：&quot;</span>);</span><br><span class="line">            size = scan.nextInt();</span><br><span class="line">            String flag = name+<span class="string">&quot;(&quot;</span>+Integer.toString(i)+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=FreeList.size()-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--) &#123;  <span class="comment">//从空闲分区中查找</span></span><br><span class="line">                <span class="keyword">if</span> (size &lt; FreeList.get(j).getSize()) &#123;</span><br><span class="line">                    node.setFlag(flag);</span><br><span class="line">                    node.setSize(size);</span><br><span class="line">                    node.setAddress(FreeList.get(j).getAddress());</span><br><span class="line">                    FreeList.get(j).setAddress(FreeList.get(j).getAddress() + size);</span><br><span class="line">                    FreeList.get(j).setSize(FreeList.get(j).getSize() - size);</span><br><span class="line">                    NodeList.add(node);</span><br><span class="line">                    allSize -= size;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j == FreeList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;剩余储存空间不足，分配失败！&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            show();</span><br><span class="line">            Collections.sort(NodeList, <span class="keyword">new</span> Comparator&lt;Node&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Node o1, Node o2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.getAddress() - o2.getAddress();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            Collections.sort(FreeList);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;分配成功&quot;</span>);</span><br><span class="line">        ShowSegmentTable(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//去配</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sure</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; NodeList.size();i++)&#123;</span><br><span class="line">            Node node = NodeList.get(i);</span><br><span class="line">            String line = node.getFlag();</span><br><span class="line">            String ns = line.substring(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">            <span class="keyword">if</span> (ns.equals(name))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">free</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你要删除的作业名：&quot;</span>);</span><br><span class="line">        String name = scan.next();</span><br><span class="line">        Node recycle = <span class="keyword">new</span> Node();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(sure(name)) &#123;</span><br><span class="line">            <span class="comment">//每次free前要初始化邻接状态</span></span><br><span class="line">            <span class="keyword">int</span> neighborup = -<span class="number">1</span>;<span class="comment">//记录上面相邻接块的位置，-1代表不邻接</span></span><br><span class="line">            <span class="keyword">int</span> neighbordown = -<span class="number">1</span>;<span class="comment">//记录上面相邻接块的位置，-1代表不邻接</span></span><br><span class="line">            <span class="comment">//查找要释放的作业</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NodeList.size(); i++) &#123;</span><br><span class="line">                Node node = NodeList.get(i);</span><br><span class="line">                String line = node.getFlag();</span><br><span class="line">                String ns = line.substring(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">                <span class="keyword">if</span> (ns.equals(name)) &#123;</span><br><span class="line">                    recycle.setSize(node.getSize());</span><br><span class="line">                    recycle.setAddress(node.getAddress());</span><br><span class="line">                    recycle.setFlag(node.getFlag());</span><br><span class="line">                    <span class="comment">//先找到要回收的内存,保留信息</span></span><br><span class="line">                    NodeList.remove(node); <span class="comment">//移除作业</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(ns.equals(name)) &amp;&amp; (i == (NodeList.size() - <span class="number">1</span>))) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;未找到该作业!去配失败!&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//去配作业</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; FreeList.size(); i++) &#123;</span><br><span class="line">                Node free = FreeList.get(i);</span><br><span class="line">                <span class="comment">//上邻</span></span><br><span class="line">                <span class="keyword">if</span> (recycle.getAddress() == (free.getAddress() + free.getSize())) &#123;</span><br><span class="line">                    neighborup = FreeList.indexOf(free);</span><br><span class="line">                    free.setSize(free.getSize() + recycle.getSize());<span class="comment">//更新区间长度</span></span><br><span class="line">                    FreeList.set(neighborup, free);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//下邻</span></span><br><span class="line">                <span class="keyword">if</span> ((recycle.getAddress() + recycle.getSize()) == free.getAddress()) &#123;</span><br><span class="line">                    neighbordown = FreeList.indexOf(free);<span class="comment">//更新两块合并后的长度</span></span><br><span class="line">                    free.setAddress(recycle.getAddress());<span class="comment">//更新该空闲区间首地址</span></span><br><span class="line">                    free.setSize(free.getSize() + recycle.getSize());<span class="comment">//更新该空闲区间长度</span></span><br><span class="line">                    FreeList.set(neighbordown, free);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//上下邻</span></span><br><span class="line">                <span class="keyword">if</span> (neighbordown != -<span class="number">1</span> &amp;&amp; neighborup != -<span class="number">1</span>) &#123;</span><br><span class="line">                    Node up = FreeList.get(neighborup);</span><br><span class="line">                    Node down = FreeList.get(neighbordown);</span><br><span class="line"></span><br><span class="line">                    up.setSize(down.getSize() + up.getSize()-recycle.getSize());</span><br><span class="line">                    FreeList.set(neighborup, up);<span class="comment">//修改链表中三块合一后的最终空闲块</span></span><br><span class="line">                    FreeList.remove(down);<span class="comment">//下面这块已经被上面那块合并</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (neighbordown == -<span class="number">1</span> &amp;&amp; neighborup == -<span class="number">1</span>) &#123;</span><br><span class="line">                Node addFree = <span class="keyword">new</span> Node();</span><br><span class="line">                addFree.setSize(recycle.getSize());</span><br><span class="line">                addFree.setAddress(recycle.getAddress());</span><br><span class="line">                addFree.setFlag(<span class="string">&quot;空闲&quot;</span>);</span><br><span class="line">                FreeList.addLast(addFree);</span><br><span class="line">            &#125;</span><br><span class="line">            Collections.sort(FreeList);</span><br><span class="line">            System.out.println(<span class="string">&quot;回收&quot;</span>+name+<span class="string">&quot;的段&quot;</span>+recycle.getFlag()+<span class="string">&quot;成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入初始内存大小：&quot;</span>);</span><br><span class="line">        totalsize = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入起始地址大小：&quot;</span>);</span><br><span class="line">        startaddress = scan.nextInt();</span><br><span class="line">        <span class="comment">//初始空闲化分区</span></span><br><span class="line">        NodeList = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line">        FreeList = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line">        Node start = <span class="keyword">new</span> Node();</span><br><span class="line">        start.setSize(totalsize);</span><br><span class="line">        start.setAddress(startaddress);</span><br><span class="line">        start.setFlag(<span class="string">&quot;空闲&quot;</span>);</span><br><span class="line">        FreeList.add(start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ssm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        init();</span><br><span class="line">        show();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入要进行的管理选项：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> FuncChoic = scan.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (FuncChoic == <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入分配方式选项：&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> AllocWay = scan.nextInt();</span><br><span class="line">                <span class="keyword">switch</span> (AllocWay) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        FirstAllotment();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        BestAllotment();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        WorstAllotment();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        System.out.println(<span class="string">&quot;选择的分配方式有误&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FuncChoic == <span class="number">2</span>) &#123;</span><br><span class="line">                free();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FuncChoic == <span class="number">0</span>) &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入有误！！请从新输入&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SSM f = <span class="keyword">new</span> SSM();</span><br><span class="line">        f.ssm();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">256</span></span><br><span class="line"><span class="comment">40</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">JOB_A</span></span><br><span class="line"><span class="comment">50</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">30</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">JOB_C</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">30</span></span><br><span class="line"><span class="comment">35</span></span><br><span class="line"><span class="comment">35</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h2><h3 id="主要思想-8"><a href="#主要思想-8" class="headerlink" title="主要思想"></a>主要思想</h3><p>这个较难，一两句话讲不清</p><p>参考链接</p><p><a href="https://www.jianshu.com/p/18285ecffbfb">https://www.jianshu.com/p/18285ecffbfb</a></p><h3 id="Java具体实现-7"><a href="#Java具体实现-7" class="headerlink" title="Java具体实现"></a>Java具体实现</h3><h4 id="算法实现-5"><a href="#算法实现-5" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PRA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;<span class="comment">//物理块数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> F;<span class="comment">//未能找到的次数 缺页率=F/length</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//作业名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length; <span class="comment">//作业长度</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt;list = <span class="keyword">null</span>; <span class="comment">//作业页面顺序</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer,Integer&gt;map = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] showlist;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowProcess</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;作业名：&quot;</span>+name);</span><br><span class="line">        System.out.println(<span class="string">&quot;作业调度过程&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;   \t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            System.out.print((i+<span class="number">1</span>)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;   \t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            System.out.print(list.get(i)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;块%d\t&quot;</span>,(j+<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(showlist[j][i]==-<span class="number">1</span>)&#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot; &quot;</span>+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.print(showlist[j][i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;**********请求分页式储存管理**********&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*         [1] FIFO分配            *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*         [2] LRU(LFU)分配        *&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;*         [3] OPT分配        *&quot;);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;*         [0] 退出                *&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FIFO</span><span class="params">()</span></span>&#123;</span><br><span class="line">        map.clear();</span><br><span class="line">        F = <span class="number">0</span>;</span><br><span class="line">        Queue&lt;Integer&gt; q=<span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> k=list.get(i);<span class="comment">//待处理元素</span></span><br><span class="line">            <span class="keyword">if</span> (!map.containsValue(k))&#123;</span><br><span class="line">                F++;<span class="comment">//不能直接找到次数加1</span></span><br><span class="line">                <span class="keyword">if</span> (map.size()&lt;n)&#123;<span class="comment">//如果没有装满</span></span><br><span class="line">                    <span class="keyword">int</span> temp=map.size();</span><br><span class="line">                    map.put(temp, k);</span><br><span class="line">                    q.offer(temp);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp=q.poll();<span class="comment">//排除的元素位置</span></span><br><span class="line">                    map.remove(temp);</span><br><span class="line">                    map.put(temp,k);</span><br><span class="line">                    q.offer(temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>; s&lt;n;s++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(map.get(s)!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                    showlist[s][i] = map.get(s);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    showlist[s][i] = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ShowProcess();</span><br><span class="line">        System.out.printf(<span class="string">&quot;缺页中断率为:%02.2f\n&quot;</span>,(F*<span class="number">1.0</span>/length)*<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LRU</span><span class="params">()</span></span>&#123;</span><br><span class="line">        map.clear();</span><br><span class="line">        F = <span class="number">0</span>;</span><br><span class="line">        List&lt;Integer&gt; linkedlist = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> k=list.get(i);<span class="comment">//待处理元素</span></span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(k))&#123;</span><br><span class="line">                F++;<span class="comment">//不能直接找到次数加1</span></span><br><span class="line">                <span class="keyword">if</span> (map.size()&lt;n)&#123;<span class="comment">//如果没有装满</span></span><br><span class="line">                    <span class="keyword">int</span> temp=map.size();</span><br><span class="line">                    map.put(k,temp);</span><br><span class="line">                    linkedlist.add(k);<span class="comment">//添加位置</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp=linkedlist.get(<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">int</span> c=map.get(temp);<span class="comment">//位置</span></span><br><span class="line">                    map.remove(temp);</span><br><span class="line">                    map.put(k,c);</span><br><span class="line">                    linkedlist.remove(<span class="number">0</span>);</span><br><span class="line">                    linkedlist.add(k);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span><span class="comment">//如果包含这个值，把这个值拿走并在后面压入</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> d=linkedlist.indexOf(k);<span class="comment">//查找存在位置</span></span><br><span class="line">                linkedlist.remove(d);</span><br><span class="line">                linkedlist.add(k);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>; s&lt;n;s++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(map.get(s)!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                    showlist[s][i] = map.get(s);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    showlist[s][i] = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ShowProcess();</span><br><span class="line">        System.out.printf(<span class="string">&quot;缺页中断率为:%02.2f\n&quot;</span>,(F*<span class="number">1.0</span>/length)*<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OPT</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> k=list.get(i);<span class="comment">//待处理元素</span></span><br><span class="line">            <span class="keyword">if</span> (!map.containsValue(k))&#123;</span><br><span class="line">                F++;<span class="comment">//不能直接找到次数加1</span></span><br><span class="line">                <span class="keyword">if</span> (map.size()&lt;n)&#123;<span class="comment">//如果没有装满</span></span><br><span class="line">                    <span class="keyword">int</span> temp=map.size();</span><br><span class="line">                    map.put(temp, k);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">//如果装满了</span></span><br><span class="line">                    <span class="keyword">int</span> index=<span class="number">0</span>;<span class="comment">//把哪个位置的淘汰出去</span></span><br><span class="line">                    <span class="keyword">int</span> min=<span class="number">0</span>;<span class="comment">//初始最长长度</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;n;t++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span> (j=i+<span class="number">1</span>;j&lt;length;j++)&#123;<span class="comment">//看后面哪一个出现的最晚</span></span><br><span class="line">                            <span class="keyword">if</span> (list.get(j)==map.get(t))&#123;<span class="comment">//第一次找到</span></span><br><span class="line">                                <span class="keyword">if</span> (j-i&gt;min)&#123;</span><br><span class="line">                                    index=t;<span class="comment">//更新值</span></span><br><span class="line">                                    min=j-i;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (j==length)&#123;<span class="comment">//如果到最后</span></span><br><span class="line">                            index=t;</span><br><span class="line">                            min=j-i;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    map.remove(index);</span><br><span class="line">                    map.put(index,k);<span class="comment">//修改表内元素</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>; s&lt;n;s++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(map.get(s)!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                    showlist[s][i] = map.get(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ShowProcess();</span><br><span class="line">        System.out.printf(<span class="string">&quot;缺页中断率为:%02.2f\n&quot;</span>,(F*<span class="number">1.0</span>/length)*<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pra</span><span class="params">()</span></span>&#123;</span><br><span class="line">        map=<span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();<span class="comment">//存储每一个内储页框所存的内容</span></span><br><span class="line">        map.clear();</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入物理块数：&quot;</span>);</span><br><span class="line">            n = scan.nextInt();</span><br><span class="line">            menu();</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入选项：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> choice = scan.nextInt();</span><br><span class="line">            scan.nextLine();<span class="comment">//读走回车</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入作业名：&quot;</span>);</span><br><span class="line">            name = scan.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入作业的页面长度&quot;</span>);</span><br><span class="line">            length = scan.nextInt();</span><br><span class="line">            scan.nextLine();<span class="comment">//读走回车</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入作业的页面顺序&quot;</span>);</span><br><span class="line">            String str = scan.nextLine();</span><br><span class="line">            String[] sList = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">                list.add(Integer.parseInt(sList[i]));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//showlist初始化</span></span><br><span class="line">            showlist = <span class="keyword">new</span> <span class="keyword">int</span>[n][length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                    showlist[j][i] = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    FIFO();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    LRU();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//                case 3:</span></span><br><span class="line"><span class="comment">//                    OPT();</span></span><br><span class="line"><span class="comment">//                    break;</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入的选项有误请从新输入&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PRA pra = <span class="keyword">new</span> PRA();</span><br><span class="line">        pra.pra();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JOB_1</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">7 0 1 2 0 3 0 4 2 3 0 3 2 1 2 0 1 7 0 1</span></span><br><span class="line"><span class="comment">JOB_2</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">7 0 1 2 0 3 0 4 2 3 0 3 2 1 2 0 1 7 0 1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>这个算法中，showProcess函数存在错误，并非正确显示，可以忽略，如需输出，可自行再修改</p><h1 id="磁盘臂调度算法"><a href="#磁盘臂调度算法" class="headerlink" title="磁盘臂调度算法"></a>磁盘臂调度算法</h1><h3 id="主要思想-9"><a href="#主要思想-9" class="headerlink" title="主要思想"></a>主要思想</h3><p>思想太长了，我好懒不想写；参见别人的说法，连接如下 <a href="https://blog.csdn.net/Zhxin606a/article/details/89577836">https://blog.csdn.net/Zhxin606a/article/details/89577836</a></p><h2 id="Java具体实现-8"><a href="#Java具体实现-8" class="headerlink" title="Java具体实现"></a>Java具体实现</h2><h3 id="数据结构-没有特殊的数据结构，用数组即可"><a href="#数据结构-没有特殊的数据结构，用数组即可" class="headerlink" title="数据结构 没有特殊的数据结构，用数组即可"></a>数据结构 没有特殊的数据结构，用数组即可</h3><h3 id="算法实现-6"><a href="#算法实现-6" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.geom.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DSASA</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length; <span class="comment">//访问序列长度</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; acessSque = <span class="keyword">null</span>; <span class="comment">//访问顺序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> now; <span class="comment">//正在访问页面</span></span><br><span class="line">    <span class="comment">/** 调用画图函数 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawGraphics</span><span class="params">(<span class="keyword">int</span>[] x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] y = <span class="keyword">new</span> <span class="keyword">int</span>[x.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.length; i++) &#123;</span><br><span class="line">            y[i] = (i + <span class="number">1</span>) * <span class="number">60</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Draw d = <span class="keyword">new</span> Draw();</span><br><span class="line">        d.setX(x);</span><br><span class="line">        d.setY(y);</span><br><span class="line">        d.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入访问序列长度：&quot;</span>);</span><br><span class="line">        length = scan.nextInt();</span><br><span class="line">        scan.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入访问柱面顺序：&quot;</span>);</span><br><span class="line">        acessSque = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();;</span><br><span class="line">        acessSque.clear();</span><br><span class="line">        String s = scan.nextLine();</span><br><span class="line">        String[] slist = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length;i++)&#123;</span><br><span class="line">            acessSque.add(Integer.parseInt(slist[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入正在访问的页面：&quot;</span>);</span><br><span class="line">        now = scan.nextInt();</span><br><span class="line">        scan.nextLine();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FCFS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***********FCFS磁盘臂调度过程***********&quot;</span>);</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span>[] moveSque = <span class="keyword">new</span> <span class="keyword">int</span>[length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> movesum = <span class="number">0</span>;</span><br><span class="line">        moveSque[<span class="number">0</span>] = now;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>) &#123;</span><br><span class="line">                movesum += Math.abs(acessSque.get(i) - now);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                movesum += Math.abs(acessSque.get(i)-acessSque.get(i-<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            moveSque[i+<span class="number">1</span>] = acessSque.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;移动顺序为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; moveSque.length;i++)&#123;</span><br><span class="line">            System.out.print(moveSque[i]+ <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n移动柱面为：&quot;</span>+movesum);</span><br><span class="line">        drawGraphics(moveSque);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SSTF</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***********SSTF磁盘臂调度过程***********&quot;</span>);</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span>[] moveSque = <span class="keyword">new</span> <span class="keyword">int</span>[length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> movesum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> min;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        moveSque[<span class="number">0</span>] = now;</span><br><span class="line">        Collections.sort(acessSque);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length;i++)&#123;</span><br><span class="line">            min = Math.abs((acessSque.get(<span class="number">0</span>)-moveSque[i]));</span><br><span class="line">            x = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt; acessSque.size();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Math.abs((acessSque.get(j)-moveSque[i]))&lt;= min)&#123;</span><br><span class="line">                    min = Math.abs(acessSque.get(j)-moveSque[i]);</span><br><span class="line">                    x = acessSque.get(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            moveSque[i+<span class="number">1</span>] = x;</span><br><span class="line">            acessSque.remove(acessSque.indexOf(x));</span><br><span class="line">            movesum += Math.abs(moveSque[i]-moveSque[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;最短优先的顺序为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; moveSque.length;i++)&#123;</span><br><span class="line">            System.out.print(moveSque[i]+ <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n移动柱面为：&quot;</span>+movesum);</span><br><span class="line">        drawGraphics(moveSque);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SCAN</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***********电梯调度***********&quot;</span>);</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span>[] moveSque_out_to_in = <span class="keyword">new</span> <span class="keyword">int</span>[length+<span class="number">1</span>];  <span class="comment">//由外向里</span></span><br><span class="line">        <span class="keyword">int</span>[] moveSque_in_to_out = <span class="keyword">new</span> <span class="keyword">int</span>[length+<span class="number">1</span>];  <span class="comment">//由里向外</span></span><br><span class="line">        <span class="keyword">int</span> movesum_out = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> movesum_in = <span class="number">0</span>;</span><br><span class="line">        moveSque_out_to_in[<span class="number">0</span>] = now;</span><br><span class="line">        moveSque_in_to_out[<span class="number">0</span>] = now;</span><br><span class="line">        Collections.sort(acessSque);</span><br><span class="line">        <span class="keyword">int</span> locats=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(acessSque.get(i)&lt;=now &amp;&amp; acessSque.get(i+<span class="number">1</span>)&gt;now)&#123;</span><br><span class="line">                locats = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(locats!=<span class="number">0</span>) &#123;  <span class="comment">//开始位置在中间</span></span><br><span class="line"></span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = locats; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">                moveSque_in_to_out[count++] = acessSque.get(k);</span><br><span class="line">                movesum_in += Math.abs(moveSque_in_to_out[count-<span class="number">1</span>]-moveSque_in_to_out[count-<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = locats+<span class="number">1</span>; k &lt; length; k++) &#123;</span><br><span class="line">                moveSque_in_to_out[count++] = acessSque.get(k);</span><br><span class="line">                movesum_in += Math.abs(moveSque_in_to_out[count-<span class="number">1</span>]-moveSque_in_to_out[count-<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=locats+<span class="number">1</span>;k&lt;length;k++)&#123;</span><br><span class="line">                moveSque_out_to_in[count++] = acessSque.get(k);</span><br><span class="line">                movesum_out += Math.abs(moveSque_out_to_in[count-<span class="number">1</span>]-moveSque_out_to_in[count-<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=locats;k &gt;= <span class="number">0</span>; k--)&#123;</span><br><span class="line">                moveSque_out_to_in[count++] = acessSque.get(k);</span><br><span class="line">                movesum_out += Math.abs(moveSque_out_to_in[count-<span class="number">1</span>]-moveSque_out_to_in[count-<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (acessSque.get(length-<span class="number">1</span>) &lt;= now)&#123;</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">                    moveSque_out_to_in[count++] = acessSque.get(i);</span><br><span class="line">                    movesum_out += Math.abs(moveSque_out_to_in[count-<span class="number">1</span>]-moveSque_out_to_in[count-<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                    moveSque_in_to_out[count++] = acessSque.get(i);</span><br><span class="line">                    movesum_out += Math.abs(moveSque_out_to_in[count-<span class="number">1</span>]-moveSque_out_to_in[count-<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;由里向外移动顺序为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; moveSque_in_to_out.length;i++)&#123;</span><br><span class="line">            System.out.print(moveSque_in_to_out[i]+ <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n移动柱面为：&quot;</span>+movesum_in);</span><br><span class="line">        drawGraphics(moveSque_in_to_out);</span><br><span class="line">        System.out.println(<span class="string">&quot;由外向里移动顺序为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; moveSque_out_to_in.length;i++)&#123;</span><br><span class="line">            System.out.print(moveSque_out_to_in[i]+ <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n移动柱面为：&quot;</span>+movesum_out);</span><br><span class="line">        drawGraphics(moveSque_out_to_in);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dsasa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FCFS();SSTF();SCAN();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DSASA dsasa = <span class="keyword">new</span> DSASA();</span><br><span class="line">        dsasa.dsasa();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Draw</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getx() &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span>[] x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] gety() &#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">int</span>[] y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setSize(<span class="number">1000</span>,<span class="number">800</span>);</span><br><span class="line">        setDefaultCloseOperation(DISPOSE_ON_CLOSE);</span><br><span class="line">        setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">        Graphics2D g2 = (Graphics2D)g;  <span class="comment">//g是Graphics对象</span></span><br><span class="line">        g2.setStroke(<span class="keyword">new</span> BasicStroke(<span class="number">3.0f</span>));</span><br><span class="line">        g2.setColor(Color.blue);</span><br><span class="line">        g2.drawLine(<span class="number">50</span>, y[<span class="number">0</span>], <span class="number">950</span>, y[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="comment">//            g.setColor(Color.RED);</span></span><br><span class="line">            g2.drawString(<span class="string">&quot;&quot;</span> + x[i], x[i]*<span class="number">5</span>, y[i]);</span><br><span class="line"><span class="comment">//            g.setColor(Color.BLUE);</span></span><br><span class="line">            g2.drawLine(x[i]*<span class="number">5</span>, y[i], x[i+<span class="number">1</span>]*<span class="number">5</span>, y[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        g.setColor(Color.RED);</span></span><br><span class="line">        g.drawString(<span class="string">&quot;&quot;</span> + x[x.length-<span class="number">1</span>], x[x.length-<span class="number">1</span>]*<span class="number">5</span>, y[y.length-<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">98 183 37 122 14 124 65 67</span></span><br><span class="line"><span class="comment">53</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="磁盘空间管理-位视图法"><a href="#磁盘空间管理-位视图法" class="headerlink" title="磁盘空间管理 位视图法"></a>磁盘空间管理 位视图法</h1><h2 id="主要思想-10"><a href="#主要思想-10" class="headerlink" title="主要思想"></a>主要思想</h2><h2 id="Java具体实现-9"><a href="#Java具体实现-9" class="headerlink" title="Java具体实现"></a>Java具体实现</h2><h3 id="数据结构-7"><a href="#数据结构-7" class="headerlink" title="数据结构"></a>数据结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: whk</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@time</span>: 2021/5/22 17:35</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> size;<span class="comment">//需要分配空间的大小</span></span><br><span class="line">    <span class="keyword">int</span>[] a; <span class="comment">//块号</span></span><br><span class="line"><span class="comment">//    int[] zihao;//字号</span></span><br><span class="line"><span class="comment">//    int[] weihao;//位号</span></span><br><span class="line">    <span class="keyword">int</span>[] Cylinder; <span class="comment">//柱面号</span></span><br><span class="line">    <span class="keyword">int</span>[] headers;<span class="comment">//磁头号</span></span><br><span class="line">    <span class="keyword">int</span>[] Sector;<span class="comment">//扇区号</span></span><br><span class="line">    String name;<span class="comment">//作业名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> newSize)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size=newSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getA</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setA</span><span class="params">(<span class="keyword">int</span> newA,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a[i] = newA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public int getZihao(int i)&#123;</span></span><br><span class="line"><span class="comment">//        return zihao[i];</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    public void setZihao(int newZihao,int i)&#123;</span></span><br><span class="line"><span class="comment">//        this.zihao[i] = newZihao;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    public int getWeihao(int i)&#123;</span></span><br><span class="line"><span class="comment">//        return weihao[i];</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    public void setWeihao(int newWeihao,int i)&#123;</span></span><br><span class="line"><span class="comment">//        this.weihao[i] = newWeihao;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCylinder</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Cylinder[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCylinder</span><span class="params">(<span class="keyword">int</span> newCylinder,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Cylinder[i] = newCylinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeaders</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> headers[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeaders</span><span class="params">(<span class="keyword">int</span> newheaders,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.headers[i] = newheaders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSector</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Sector[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSector</span><span class="params">(<span class="keyword">int</span> newSector,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Sector[i] = newSector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String newName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = newName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法实现-7"><a href="#算法实现-7" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DSMA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> fucun;<span class="comment">//辅存空间大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> zichang;<span class="comment">//字长</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> kuaichang;<span class="comment">//块长</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> Headnums;<span class="comment">//磁道数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> SectorsNums; <span class="comment">//扇区数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] fucunspace;<span class="comment">//辅存空间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//辅助变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Node&gt; Nodelist;</span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Nodelist = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入辅存空间大小（单位：K）和字长（32 or 64）和块长（单位：K）：&quot;</span>);</span><br><span class="line">        String s = scan.nextLine();</span><br><span class="line">        String[] slist = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        fucun = Integer.parseInt(slist[<span class="number">0</span>]);</span><br><span class="line">        zichang = Integer.parseInt(slist[<span class="number">1</span>]);</span><br><span class="line">        kuaichang = Integer.parseInt(slist[<span class="number">2</span>]);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入该辅存硬盘的的磁道数（磁头数）、每磁道扇区数: &quot;</span>);</span><br><span class="line">        String s2 = scan.nextLine();</span><br><span class="line">        String[] s2list = s2.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        Headnums = Integer.parseInt(s2list[<span class="number">0</span>]);</span><br><span class="line">        SectorsNums = Integer.parseInt(s2list[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化辅存空间表,随机初始化</span></span><br><span class="line">        x= (<span class="keyword">int</span>) Math.ceil(fucun/zichang);</span><br><span class="line">        fucunspace = <span class="keyword">new</span> <span class="keyword">int</span>[x+<span class="number">1</span>][zichang];</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=x;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;zichang;j++)&#123;</span><br><span class="line">                fucunspace[i][j] = r.nextInt(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowMemorySpace</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span>: whk</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@time</span>: 2021/5/22 17:35</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;********************************************打印内存空间分配情况*****************************************&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;zichang;i++)&#123;</span><br><span class="line">            System.out.print((i+<span class="number">1</span>) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        x= (<span class="keyword">int</span>) Math.ceil(fucun/zichang);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=x;i++)&#123;</span><br><span class="line">            System.out.print((i+<span class="number">1</span>)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;zichang;j++)&#123;</span><br><span class="line">                System.out.print(fucunspace[i][j]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(fucunspace[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;系统剩余空块数：&quot;</span>+(fucun-count));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowMemoryInfo</span><span class="params">(String names)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> names</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span>: whk</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@time</span>: 2021/5/22 17:33</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Node temp = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; Nodelist.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Nodelist.get(i).getName().equals(names))&#123;</span><br><span class="line">                temp = Nodelist.get(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!Nodelist.get(i).getName().equals(names) &amp;&amp; (i+<span class="number">1</span>)== Nodelist.size())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;该作业无储存信息&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;**********打印&quot;</span>+temp.getName()+<span class="string">&quot;作业在辅助中的信息************&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;记录\t\t块号\t\t柱面号\t磁头号\t扇区号&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp.getSize();i++)&#123;</span><br><span class="line">            System.out.println((i+<span class="number">1</span>)+<span class="string">&quot;\t\t&quot;</span>+temp.getA(i)+<span class="string">&quot;\t\t&quot;</span>+temp.getCylinder(i)+<span class="string">&quot;\t\t&quot;</span>+temp.getHeaders(i)+<span class="string">&quot;\t\t&quot;</span>+temp.getSector(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span>: whk</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@time</span>: 2021/5/22 17:34</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;***********辅存空间管理************&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*         [1] 空间分配           *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*         [2] 空间去配           *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*         [0] 退出管理           *&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] find() &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span>: int[]</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span>: whk</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@time</span>: 2021/5/22 17:34</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span>[] loac = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; zichang; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fucunspace[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">                    fucunspace[i][j] = <span class="number">1</span>;</span><br><span class="line">                    loac[<span class="number">0</span>] = i;</span><br><span class="line">                    loac[<span class="number">1</span>] = j;</span><br><span class="line">                    <span class="keyword">return</span> loac;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Allocat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span>: whk</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@time</span>: 2021/5/22 17:34</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入申请空间的作业名字和需要分配的辅存空间的大小：&quot;</span>);</span><br><span class="line">        String s3 = scan.nextLine();</span><br><span class="line">        String[] s3list = s3.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(Integer.parseInt(s3list[<span class="number">1</span>])&lt;fucun &amp;&amp; Integer.parseInt(s3list[<span class="number">1</span>])&lt;count) &#123;</span><br><span class="line">            <span class="comment">//保证不会越界</span></span><br><span class="line">            Node node = <span class="keyword">new</span> Node();</span><br><span class="line">            node.setName(s3list[<span class="number">0</span>]);</span><br><span class="line">            node.setSize(Integer.parseInt(s3list[<span class="number">1</span>]));</span><br><span class="line">            node.a = <span class="keyword">new</span> <span class="keyword">int</span>[node.getSize()];</span><br><span class="line"><span class="comment">//            node.zihao = new int[node.getSize()];</span></span><br><span class="line">            node.Cylinder = <span class="keyword">new</span> <span class="keyword">int</span>[node.getSize()];</span><br><span class="line">            node.headers = <span class="keyword">new</span> <span class="keyword">int</span>[node.getSize()];</span><br><span class="line">            node.Sector = <span class="keyword">new</span> <span class="keyword">int</span>[node.getSize()];</span><br><span class="line">            x = (<span class="keyword">int</span>) Math.ceil(fucun / zichang);</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; node.getSize(); k++) &#123;</span><br><span class="line">                <span class="keyword">int</span>[] list = find();</span><br><span class="line"><span class="comment">//                System.out.println(list[0]+&quot; &quot;+list[1]);</span></span><br><span class="line">                <span class="keyword">if</span> (list[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                    temp = list[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (list[<span class="number">0</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    temp = list[<span class="number">0</span>] * zichang + list[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> d = SectorsNums*Headnums;</span><br><span class="line">                node.setA(temp, k);</span><br><span class="line">                node.setCylinder(temp/d, k);</span><br><span class="line">                node.setHeaders((temp%d)/SectorsNums, k);</span><br><span class="line">                node.setSector(temp % d % SectorsNums, k);</span><br><span class="line">            &#125;</span><br><span class="line">            Nodelist.add(node);</span><br><span class="line">            System.out.println(<span class="string">&quot;内存分配成功！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> node.getName();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;申请内存空间大于当前可用内存空间&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Free</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span>: whk</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@time</span>: 2021/5/22 17:34</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.print(<span class="string">&quot;当前分配的作业：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Node node : Nodelist) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Nodelist.indexOf(node)==Nodelist.size()-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(node.getName());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(node.getName() + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你要回收的作业名：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String names = scan.nextLine();</span><br><span class="line">        Node freenode = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Nodelist.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (Nodelist.get(i).getName().equals(names))&#123;</span><br><span class="line"><span class="comment">//                System.out.println(&quot;查找成功。。。。。&quot;);</span></span><br><span class="line">                freenode = Nodelist.get(i);</span><br><span class="line">                Nodelist.remove(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt; freenode.getSize();k++) &#123;</span><br><span class="line">            <span class="keyword">int</span> s = freenode.getA(k);</span><br><span class="line">            <span class="keyword">int</span> i,j;</span><br><span class="line">            <span class="keyword">if</span> (s &lt;zichang)&#123;</span><br><span class="line">                i = <span class="number">0</span>;</span><br><span class="line">                j = s;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                i = s/zichang;</span><br><span class="line">                j = s- i*zichang;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            System.out.println(i+&quot; &quot;+j);</span></span><br><span class="line">            fucunspace[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;回收成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> freenode.getName();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dsma</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span>: whk</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@time</span>: 2021/5/22 17:34</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        init();</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化储存空间.....&quot;</span>);</span><br><span class="line">        ShowMemorySpace();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            menu();</span><br><span class="line">            ShowMemorySpace();</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入选项&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> choice = scan.nextInt();</span><br><span class="line">            scan.nextLine();</span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    String name = Allocat();</span><br><span class="line">                    ShowMemorySpace();</span><br><span class="line">                    ShowMemoryInfo(name);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    ShowMemoryInfo(Free());</span><br><span class="line">                    ShowMemorySpace();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    System.exit(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入的选项有误,请重新输入&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DSMA d = <span class="keyword">new</span> DSMA();</span><br><span class="line">        d.dsma();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1000 64 1</span></span><br><span class="line"><span class="comment">8 96</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">JOB_1 50</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">JOB_5 30</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><hr><p>这个算法应该是最后一个算法了，不知道后面的操作系统会不会有算法了，按照实验指南来说的话，前面是还有几个算法直接跳过了，如果还有的话我就再补充吧</p><p>2021年5月22日17:46</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此文写的是操作系统的算法（java版）&lt;/p&gt;
&lt;h1 id=&quot;读前须知&quot;&gt;&lt;a href=&quot;#读前须知&quot; class=&quot;headerlink&quot; title=&quot;读前须知&quot;&gt;&lt;/a&gt;读前须知&lt;/h1&gt;&lt;p&gt;1、文中算法，都是为了完成作业而写的，存在较多BUG, 算法最后带一个</summary>
      
    
    
    
    <category term="OS" scheme="https://www.whkblog.work/categories/OS/"/>
    
    
    <category term="操作系统算法" scheme="https://www.whkblog.work/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="https://www.whkblog.work/2021/04/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>https://www.whkblog.work/2021/04/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2021-04-17T08:38:33.000Z</published>
    <updated>2021-06-27T07:14:19.444Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../blog/images/jsjwl.jfif" alt="begin"></p><p>写在最前，这个只是个人的计网知识总结，内容不是全面，可供参考</p><h1 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章  概述"></a>第一章  概述</h1><h2 id="1、单工、半双工、全双工基本概念，串行和并行通信的概念"><a href="#1、单工、半双工、全双工基本概念，串行和并行通信的概念" class="headerlink" title="1、单工、半双工、全双工基本概念，串行和并行通信的概念"></a><strong>1</strong>、单工、半双工、全双工基本概念，串行和并行通信的概念</h2><p>单工：只有一个信道，传输方向只能单向；</p><p>半双工：只有一个信道，传输方向为双向，但同一时刻，只能单向传输；</p><p>全双工：双信道，同时可以双向数据传输；</p><p>串行通信：一组数据在一条线路上一位一位的传送；</p><p>并行通信：一组数据在多条线路上同时传送。</p><h2 id="2、协议的三要素"><a href="#2、协议的三要素" class="headerlink" title="2、协议的三要素"></a><strong>2</strong>、协议的三要素</h2><p>  网络协议规定了通信双方具体的通信规则，协议三要素：语法、语义、同步。</p><h2 id="3、比较电路交换和分组交换（分组交换的核心思想）报文交换"><a href="#3、比较电路交换和分组交换（分组交换的核心思想）报文交换" class="headerlink" title="3、比较电路交换和分组交换（分组交换的核心思想）报文交换"></a><strong>3</strong>、比较电路交换和分组交换（分组交换的核心思想）报文交换</h2><p>交换即按照某种方式动态的分配传输线路的资源。</p><table><thead><tr><th><strong>交换方式</strong></th><th><strong>优点（本质/</strong> <strong>核心思想）</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td>电路交换</td><td>（1）资源独占  （2）提供面向连接的服务  （3）通信相对可靠</td><td>（1）成本高  （2）资源利用率低</td></tr><tr><td>分组交换*</td><td>（1）分组  （2）存储转发  （3）资源共享  （4）灵活性高，适合计算机之间的通信</td><td>（1）可靠性不高  （2）可能出现延迟和拥塞</td></tr><tr><td>报文交换</td><td>不分组的分组交换</td><td></td></tr></tbody></table><h2 id="4、比较面向连接和无连接服务"><a href="#4、比较面向连接和无连接服务" class="headerlink" title="4、比较面向连接和无连接服务"></a><strong>4</strong>、比较面向连接和无连接服务</h2><table><thead><tr><th><strong>服务方式</strong></th><th><strong>面向连接</strong></th><th><strong>无连接</strong></th></tr></thead><tbody><tr><td>数据传输</td><td>建立连接、数据通信、释放连接</td><td>无需连接，直接通信</td></tr><tr><td>可靠性</td><td>可靠</td><td>不可靠，但速度快（尽最大努力服务）</td></tr><tr><td>传输层相应协议</td><td>TCP，电路交换，虚电路</td><td>UDP，IP，Ethernet</td></tr></tbody></table><h2 id="5、比较带宽、吞吐量和传播速度"><a href="#5、比较带宽、吞吐量和传播速度" class="headerlink" title="5、比较带宽、吞吐量和传播速度"></a><strong>5</strong>、比较带宽、吞吐量和传播速度</h2><p>带宽：分成物理带宽和网络带宽，物理带宽是一段链路所能传输的频率的范围，单位是hz，网络带宽是指网络可通过的最高数据传输速率（bit/s、bps）；</p><p>1Mbps=1000Kbps=10^6b/s</p><p>吞吐量：网络实际通过的数据传输速率；</p><p>传播速度：信号在介质上的传播速率（m/s）；</p><h2 id="6、详细说明分组交换网的延迟有哪些，分别是由什么原因造成的。（参考书和课件）"><a href="#6、详细说明分组交换网的延迟有哪些，分别是由什么原因造成的。（参考书和课件）" class="headerlink" title="6、详细说明分组交换网的延迟有哪些，分别是由什么原因造成的。（参考书和课件）"></a><strong>6</strong>、详细说明分组交换网的延迟有哪些，分别是由什么原因造成的。（参考书和课件）</h2><table><thead><tr><th><strong>延迟类型</strong></th><th><strong>定义</strong></th><th><strong>原因</strong></th></tr></thead><tbody><tr><td>传输延迟（发送延迟）</td><td>数据从结点发送到链路上所消耗的时间</td><td>（1）网络带宽；（2）数据大小；  （3）链路特性；（4）网络特性</td></tr><tr><td>传播延迟</td><td>信号从一个结点发送到另一个结点在链路上传播所消耗的时间</td><td>（1）传播介质；（2）链路长度</td></tr><tr><td>结点处理延迟  （排队延迟和处理延迟）</td><td>路由器上排队等待、数据处理和转发至输出链路等所消耗的时间</td><td>（1）网络拥塞程度；（2）转发表规模；  （3）路由器性能</td></tr></tbody></table><h2 id="7、ping、tracert、ipconfig、nslookup、netstat的作用"><a href="#7、ping、tracert、ipconfig、nslookup、netstat的作用" class="headerlink" title="7、ping、tracert、ipconfig、nslookup、netstat的作用"></a><strong>7</strong>、ping、tracert、ipconfig、nslookup、netstat的作用</h2><p>ping和tracert均用以验证简单TCP/IP网络的连通性。</p><p>ping：默认测试3次，发送ICMP请求数据包，并等待接收方的ICMP应答包，显示RTT（Round-trip time，往返时延）和TTL（Time to live，生存时间）；</p><p>tracert：通过TTL的递增对路由进行跟踪，测试并显示每个结点的往返时延3次。</p><h2 id="8、什么是因特网"><a href="#8、什么是因特网" class="headerlink" title="8、什么是因特网"></a><strong>8</strong>、什么是因特网</h2><p>  因特网是网络的网络，它是将全球异构的网络互联起来的网络。因特网由许多终端设备、通信介质和中间设备组成，在TCP/IP协议簇的基础上通过各种应用程序进行通信。</p><h2 id="9双绞线的制作方法（T568B和T568A）"><a href="#9双绞线的制作方法（T568B和T568A）" class="headerlink" title="9双绞线的制作方法（T568B和T568A）"></a><strong>9</strong>双绞线的制作方法（T568B和T568A）</h2><p>T568B：半橙橙半绿蓝半蓝绿半棕棕</p><p>T568A：在T568B基础上，橙色和绿色线对（半色和全色）交换位置。半绿绿半橙蓝半蓝橙半棕棕</p><h2 id="10、直通线和交叉线的应用"><a href="#10、直通线和交叉线的应用" class="headerlink" title="10、直通线和交叉线的应用"></a><strong>10</strong>、直通线和交叉线的应用</h2><p>直通线：两端均为T568B，一般用于不同设备之间；</p><p>交叉线：一端为T568B、一端为T568A，一般用于相同或相近设备之间。</p><h2 id="11、比较双绞线和光纤"><a href="#11、比较双绞线和光纤" class="headerlink" title="11、比较双绞线和光纤"></a><strong>11</strong>、比较双绞线和光纤</h2><table><thead><tr><th><strong>类型</strong></th><th><strong>双绞线</strong></th><th><strong>光纤</strong></th></tr></thead><tbody><tr><td>传输距离</td><td>理论上不超过100m（衰减）</td><td>传输距离长</td></tr><tr><td>抗干扰性</td><td>（1）线对之间会产生干扰（串扰）  （2）线遇到不连续阻抗（线弯曲）时信号会反射（回波损耗）</td><td>抗干扰性强，衰减小</td></tr><tr><td>价格</td><td>便宜</td><td>日益下降</td></tr></tbody></table><h2 id="12、比较单模光纤和多模光纤"><a href="#12、比较单模光纤和多模光纤" class="headerlink" title="12、比较单模光纤和多模光纤"></a><strong>12</strong>、比较单模光纤和多模光纤</h2><table><thead><tr><th><strong>类型</strong></th><th><strong>多模光纤</strong></th><th><strong>单模光纤</strong></th></tr></thead><tbody><tr><td>核心直径</td><td>大</td><td>小</td></tr><tr><td>传输模式</td><td>多路径或多模式</td><td>单一无散射模式</td></tr><tr><td>光源</td><td>LED</td><td>激光</td></tr><tr><td>带宽</td><td>低</td><td>高</td></tr><tr><td>传输距离</td><td>短（一般小于100m）</td><td>长（可达50km）</td></tr></tbody></table><h2 id="13、网络为什么要分层，如何分层，分层之后如何发送和接收数据，分层的理解。（参考书）"><a href="#13、网络为什么要分层，如何分层，分层之后如何发送和接收数据，分层的理解。（参考书）" class="headerlink" title="13、网络为什么要分层，如何分层，分层之后如何发送和接收数据，分层的理解。（参考书）"></a><strong>13</strong>、网络为什么要分层，如何分层，分层之后如何发送和接收数据，分层的理解。（参考书）</h2><p>分层的原因：简单、容易学习、便于讨论。模块化的设计（参考模型）便于讨论，同时也简化了维护和升级，具体表现在某个层次的服务对系统的其他层次透明，且某个层次的改变只需改变与其相邻层次的接口。</p><table><thead><tr><th><strong>OSI</strong>体系结构（官方标准）</th><th><strong>TCP/IP</strong>体系结构（因特网标准）</th><th><strong>各分层作用</strong></th><th><strong>PDU</strong>（协议数据单元）</th><th></th></tr></thead><tbody><tr><td>应用层</td><td>应用层</td><td>负责各种网络应用、进程与进程之间的通信</td><td>消息（message）</td><td></td></tr><tr><td>表示层</td><td></td><td></td><td></td><td></td></tr><tr><td>会话层</td><td></td><td></td><td></td><td></td></tr><tr><td>传输层</td><td>传输层</td><td>负责端到端数据的传输控制</td><td>报文段（segment）</td><td></td></tr><tr><td>网络层</td><td>网络层（网际层）</td><td>负责选路和不同网段数据的转发</td><td>分组（packet）</td><td></td></tr><tr><td>数据链路层</td><td>网络接口层</td><td>数据链路层</td><td>数据在一段链路上相邻结点间的传输</td><td>帧（frame）</td></tr><tr><td>物理层</td><td>物理层</td><td>负责信号物理通信的规则</td><td>比特流（bit torrent）</td><td></td></tr></tbody></table><p>数据的发送与接收：发送端将数据进行层层封装（应用层、传输层、网络层和数据链路层均在上一层的基础上加一首部，同时数据链路层在分组最后加一CRC冗余校验码尾部），接收端则按层次结构由下向上层层解封，获得原始数据。</p><p>协议分层：协议是两个对等实体进行通信的规则的集合，其下层为上层提供服务且对上层透明，对某层协议而言，收发双方使用的协议是相同的，即协议是水平的；而各层协议间下层对上层提供的服务的接口（服务访问点，SAP），服务是垂直的。</p><h2 id="14、计算机网络通信的分层模型中包含哪些地址信息，分别在哪一层上？"><a href="#14、计算机网络通信的分层模型中包含哪些地址信息，分别在哪一层上？" class="headerlink" title="14、计算机网络通信的分层模型中包含哪些地址信息，分别在哪一层上？"></a><strong>14</strong>、计算机网络通信的分层模型中包含哪些地址信息，分别在哪一层上？</h2><table><thead><tr><th><strong>地址</strong></th><th><strong>作用</strong></th><th><strong>所在分层</strong></th><th></th></tr></thead><tbody><tr><td>端口（port）</td><td>源端口</td><td>传输层向应用层提供的地址，以区分不同应用程序的数据</td><td>传输层</td></tr><tr><td>目的端口</td><td></td><td></td><td></td></tr><tr><td>IP地址</td><td>源IP地址</td><td>网络层提供的地址，以区分不同网络间的收发双方</td><td>网络层</td></tr><tr><td>目的IP地址</td><td></td><td></td><td></td></tr><tr><td>MAC地址</td><td>源MAC地址</td><td>数据链路层的地址，以区分同一网络内的收发双方</td><td>数据链路层</td></tr><tr><td>目的MAC地址</td><td></td><td></td><td></td></tr></tbody></table><h1 id="第二章-应用层"><a href="#第二章-应用层" class="headerlink" title="第二章 应用层"></a>第二章 应用层</h1><h2 id="1、网络应用的两种模式（C-S，P2P）"><a href="#1、网络应用的两种模式（C-S，P2P）" class="headerlink" title="1、网络应用的两种模式（C/S，P2P）"></a><strong>1</strong>、网络应用的两种模式（C/S，P2P）</h2><p>C/S：客户——服务器模式，客户向服务器发送请求，服务器响应并提供服务，双方IP地址不能随意改变；</p><p>P2P：对等模式，任意的主机既是客户端，又是服务器。</p><h2 id="2、套接字的概念"><a href="#2、套接字的概念" class="headerlink" title="2、套接字的概念"></a><strong>2</strong>、套接字的概念</h2><p>套接字=IP地址+端口号，用以唯一确定某台主机的某个进程。</p><p>IP地址：IPv4为32位、IPv6为128位，用以唯一确定某台主机在因特网上的位置；</p><p>端口号：16位，用以唯一确定某台主机的某个通信进程。</p><h2 id="3、常见网络应用的端口号"><a href="#3、常见网络应用的端口号" class="headerlink" title="3、常见网络应用的端口号"></a><strong>3</strong>、常见网络应用的端口号</h2><p>端口号为两个字节（16位），范围为0——65535，其中0——1023为公认的保留使用的端口，具有固定的服务进程，1024——65535为用户可以使用的端口号。</p><p>以下是常用端口号（参见C:\Windows\System32\drivers\etc\services）：</p><table><thead><tr><th><strong>协议</strong></th><th><strong>端口号</strong></th><th><strong>传输层</strong></th><th><strong>定义</strong></th></tr></thead><tbody><tr><td>ftp-data</td><td>20</td><td>Tcp</td><td>FTP，data</td></tr><tr><td>ftp</td><td>21</td><td>Tcp</td><td>FTP，control</td></tr><tr><td>ssh</td><td>22</td><td>Tcp</td><td>SSH Remote  Login Protocol</td></tr><tr><td>telnet</td><td>23</td><td>Tcp</td><td></td></tr><tr><td>smtp</td><td>25</td><td>Tcp</td><td>Simple  Mail Transfer</td></tr><tr><td>Dns</td><td>53</td><td>Tcp</td><td>Domain  Name Server</td></tr><tr><td>Udp</td><td></td><td></td><td></td></tr><tr><td>http</td><td>80</td><td>tcp</td><td>World  Wide Web</td></tr><tr><td>pop3</td><td>110</td><td>tcp</td><td>Post  Office Protocol  Version 3</td></tr><tr><td>Imap</td><td>143</td><td>tcp</td><td>Internet  Message Access Protocol</td></tr><tr><td>https</td><td>443</td><td>tcp</td><td>HTTP  over TLS/SSL</td></tr><tr><td>udp</td><td></td><td></td><td></td></tr></tbody></table><h2 id="4、DNS-的查询方式-递归查询，迭代查询，反向查询"><a href="#4、DNS-的查询方式-递归查询，迭代查询，反向查询" class="headerlink" title="4、DNS 的查询方式-递归查询，迭代查询，反向查询"></a><strong>4</strong>、DNS 的查询方式-递归查询，迭代查询，反向查询</h2><table><thead><tr><th><strong>查询方式</strong></th><th><strong>递归查询</strong></th><th><strong>迭代查询</strong></th><th><strong>反向查询</strong></th></tr></thead><tbody><tr><td>查询模式</td><td>正向查询</td><td>反向查询</td><td></td></tr><tr><td>区别</td><td>当根域名服务器不能解析时，其会直接向目标域名的授权域名服务器查询，并将结果返回给发送请求的本地域名服务器。</td><td>当根域名服务器不能解析时，其会直接返回目标域名的授权域名服务器地址给发送请求的本地域名服务器，让请求方自行查询。</td><td>通过IP地址获得相应的域名地址</td></tr></tbody></table><h2 id="5、URL的概念"><a href="#5、URL的概念" class="headerlink" title="5、URL的概念"></a><strong>5</strong>、URL的概念</h2><p>  URL（uniform resource locator），统一资源定位符，用以在整个因特网内唯一标识网上的各种文档和对象，格式为：&lt;URL的访问方式&gt;://&lt;主机地址&gt;:&lt;端口号&gt;/&lt;路径&gt;。</p><h2 id="6、HTTP协议的概述，比较http1-0和http1-1"><a href="#6、HTTP协议的概述，比较http1-0和http1-1" class="headerlink" title="6、HTTP协议的概述，比较http1.0和http1.1"></a><strong>6</strong>、HTTP协议的概述，比较http1.0和http1.1</h2><p>HTTP（hyper-text transfer protocol），超文本传送协议，应用层协议之一，也是因特网中最重要的协议之一，通常用于进行web页面的传输，采用C/S模式工作，使用TCP作为传输层协议，默认使用80端口，具体包括HTTP1.0和HTTP1.1两类。</p><p> http1.0：非持续连接，使用多条TCP连接获取对象，在完整收到每个对象后才发送下一个对象的请求；</p><p>http1.1：持续连接，在同一条TCP连接上同时发送多个页面链接的请求，并依次接收。</p><h2 id="7、FTP的基本概念"><a href="#7、FTP的基本概念" class="headerlink" title="7、FTP的基本概念"></a>7、FTP的基本概念</h2><p>  FTP（file transfer protocol），文件传输协议，应用层协议之一，采用C/S模式工作，使用TCP作为传输层协议，FTP属于维护状态的协议，默认使用数据端口为20，控制端口为21。使用两条连接的好处在于使FTP的控制更容易，编程更方便，且使整个传输过程中连接都不断开，更有助于状态的维护。同时，当FTP传输一个文件结束后，控制连接并不断开，如果要下载一个新的文件，仅需控制连接重新协商建立新的数据连接。</p><h2 id="8、了解电子邮件相关的协议，smtp，pop，mime，imap"><a href="#8、了解电子邮件相关的协议，smtp，pop，mime，imap" class="headerlink" title="8、了解电子邮件相关的协议，smtp，pop，mime，imap"></a><strong>8</strong>、了解电子邮件相关的协议，smtp，pop，mime，imap</h2><p>smtp（simple mail transfer protocol），简单邮件传输协议，应用层协议之一，使用TCP作为传输层协议，默认端口为25，使用命令/响应代码（命令：7位ASCII码、响应：状态码和短语）完成邮件传输的控制交互，使用持续连接完成邮件发送，且只能发送文本文件（只能使用ASCII码的限制），另外，SMTP下发送邮件不需要认证（导致垃圾邮件泛滥）；</p><p>pop（post office protocol），邮局协议，使用TCP作为传输层协议，默认端口为110，用于从邮件服务器接收邮件，现主流使用pop3；</p><p>mime（multipurpose internet email extension），多功能internet邮件扩展，为了突破smtp只能发送文本文件的限制，smtp使用扩展mime将非文本文件采用base64或quoted printable编码（适用于当所传输的数据中只有少量的非ASCII码，例如：汉字）成文本文件；</p><p>imap（internet message access protocol），internet邮件访问协议，使用TCP作为传输层协议，默认端口为143，向客户提供在线（邮件保留在服务器并管理）、离线（邮件保留在客户本地并管理）、分离（邮件一部分在服务器，一部分在本地）三种操作模式，并允许客户只读取邮件的某一部分（使客户快速了解邮件关键信息），兼具pop3和webmail的优点，现主流使用imap4。</p><h2 id="9-DNS中RR的类型"><a href="#9-DNS中RR的类型" class="headerlink" title="9.DNS中RR的类型"></a><strong>9.DNS</strong>中RR的类型</h2><table><thead><tr><th><strong>type</strong></th><th><strong>Value</strong></th></tr></thead><tbody><tr><td>A</td><td>域名对应的IP地址</td></tr><tr><td>NS</td><td>域名对应的权威域名服务器名称</td></tr><tr><td>CNAME</td><td>域名对应的别名</td></tr><tr><td>MX</td><td>域名对应的邮件服务器名称</td></tr><tr><td>PTR</td><td>Name对应的名字（反向查询）</td></tr></tbody></table><h2 id="10-电子邮件系统的组成"><a href="#10-电子邮件系统的组成" class="headerlink" title="10.电子邮件系统的组成"></a>10.电子邮件系统的组成</h2><p>用户代理：电子邮件客户端软件</p><p>邮件服务器：提供邮件服务的主机</p><p>邮件发送和接收协议</p><h2 id="11-常用-cmd-指令"><a href="#11-常用-cmd-指令" class="headerlink" title="11. 常用 cmd 指令"></a><strong>11.</strong> <strong>常用</strong> <strong>cmd</strong> <strong>指令</strong></h2><p>nslookup：域名查询，查询internet域名信息</p><p>ftp：传送文件</p><p>telnet：远程控制，使用方法</p><p>ping：可以检查网络是否连通</p><p>tracert：用于确定 IP 数据包访问目标所采取的路径</p><p>netstat：查看在内核中访问网络及相关信息的程序</p><p>ipconfig：可用于显示当前的TCP/IP配置的设置值</p><p>arp：可查看局域网内IP与MAC地址的对应，静态配置记录，情况记录等</p><h1 id="第三章-传输层"><a href="#第三章-传输层" class="headerlink" title="第三章 传输层"></a>第三章 传输层</h1><h2 id="1、比较传输层和网络层"><a href="#1、比较传输层和网络层" class="headerlink" title="1、比较传输层和网络层"></a><strong>1</strong>、比较传输层和网络层</h2><p>传输层负责端到端之间的数据传输的控制。传输层依赖于网络层的服务，传输层向应用层提供服务。网络层主要为主机之间如何选路而到达目的端提供服务，而传输层加强了网络层的服务，在数据能到达对方的前提下，对数据传输进行控制，为进程间的通信提供服务。</p><h2 id="2、比较UDP和TCP"><a href="#2、比较UDP和TCP" class="headerlink" title="2、比较UDP和TCP"></a><strong>2</strong>、比较UDP和TCP</h2><table><thead><tr><th align="left"><strong>传输服务</strong></th><th align="center">UDP</th><th align="center">TCP</th></tr></thead><tbody><tr><td align="left"><strong>可靠性</strong></td><td align="center">不可靠</td><td align="center">可靠</td></tr><tr><td align="left"><strong>设计理念</strong></td><td align="center">尽力而为，可以乱序甚至丢失</td><td align="center">必须保证数据正确、按序到达接收端。采用（1）序号机制；（2）确认机制；（3）缓存机制；（4）重传机制；（5）滑动窗口机制</td></tr><tr><td align="left"><strong>面向连接</strong></td><td align="center">否</td><td align="center">是</td></tr><tr><td align="left"><strong>流量控制</strong></td><td align="center">否</td><td align="center">是</td></tr><tr><td align="left"><strong>拥塞控制</strong></td><td align="center">否</td><td align="center">是</td></tr><tr><td align="left"><strong>“三次握手”</strong></td><td align="center">否</td><td align="center">是</td></tr><tr><td align="left"><strong>协议首部</strong></td><td align="center">0                         15            16                         31                  源端口            目的端口                  长度（包括首部和数据）            校验和                  应用层数据</td><td align="center">0                         15            16                         31                  源端口            目的端口                  序号                  确认号                  首部长度            保留            U    R    G            A    C    K            P    S    H            R    S    T            S    Y    N            F    I    N            窗口                  检验和            紧急指针                  选项（长度可变）            填充                  应用层数据</td></tr></tbody></table><h2 id="3、可靠传输协议的机制"><a href="#3、可靠传输协议的机制" class="headerlink" title="3、可靠传输协议的机制"></a><strong>3</strong>、可靠传输协议的机制</h2><p>可靠传输协议保证数据正确按序的到达对方。其中包括以下机制：</p><p>\1.   查错机制：用于检查数据是否传输出错的校验算法，如校验和,cRC循环冗余检验码等.</p><p>\2.   序号确认机制:序号用于重复分组的检查和防止乱序.确认用于反馈是否正确收到.</p><p>\3.   重传机制:出错的包重传,使用缓存提高重传效率.</p><p>\4.   超时定时器机制:用于判断数据是否丢失,超时就认为丢失,丢失就重传.</p><p>可靠传输协议可以分成两大类:停止等待协议和滑动窗口协议.</p><p>停止等待协议：SW（stop and wait），发送方每发送一个报文，必须等待接收方确认后才能发送下一个报文。</p><p>rdt1.0：在信道完全可靠地前提下（数据不会出错和乱序），无需做其他处理即可实现停等协议；</p><p>rdt2.0：在信道可能出错的前提下（数据乱序但不会丢失），使用ACK/NAK机制，发送方建有数据缓存，当收到ACK后发送下一分组，收到NAK则重传；</p><p>rdt2.1： 在信道可能出错的前提下做了进一步的改进，发送方对每个分组0/1循环编号，接收方将对每个收到的分组进行确认，回复数据所编的序号；如遇到重复分组，接收方丢弃并对分组再次确认（仍回复所编序号即可）；如遇到数据错误，则回复上一次正确的确认序号；</p><p>rdt3.0：在信道中数据可能乱序甚至出错的前提下，发送方在rdt2.1的基础上，进一步通过“超时”机制发现数据丢失（超时不一定数据丢失，此时编号机制仍能控制传输）。</p><h2 id="4、滑动窗口协议-GBN和SR"><a href="#4、滑动窗口协议-GBN和SR" class="headerlink" title="4、滑动窗口协议:GBN和SR   \"></a><strong>4</strong>、滑动窗口协议:GBN和SR   \</h2><p>GBN（go back n-steps）和SR（selected repeat）均属于滑动窗口协议。滑动窗口协议允许发送方在没有收到接收方的ACK的前提下发送多个数据包，因此有以下三点改变：（1）发送方需要使用发送窗口来限制没有收到ACK情况下最多发送的数据量；（2）发送方和接收方均增加缓存；（3）分组序号必须增大。</p><table><thead><tr><th><strong>发送类型</strong></th><th>GBN</th><th>SR</th><th></th></tr></thead><tbody><tr><td><strong>发送方</strong></td><td>连续发送至窗口满，然后等待，收到接收方确认后窗口向后移动。某个分组出错或丢失则重传该分组即其后面所以已发送但未收到确认的分组。</td><td>某个分组出错或丢失仅重传该分组。</td><td></td></tr><tr><td><strong>接收方</strong></td><td>对按序到达的分组确认，对乱序或错误的分组丢弃，并发送最后一次正确收到的分组的确认。</td><td>增加接收缓存（接收窗口），若收到的分组在乱序则缓存该分组，等到按序后再一起提交整个缓存（因此接收缓存一般等于发送窗口大小）。</td><td></td></tr><tr><td><strong>累积确认</strong></td><td>某一分组的确认意味着之前所有分组均正确。</td><td></td><td></td></tr><tr><td>是</td><td>否</td><td></td><td></td></tr><tr><td><strong>窗口大小</strong></td><td>序号个数-1</td><td>序号个数/2</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="5、掌握TCP的首部字段"><a href="#5、掌握TCP的首部字段" class="headerlink" title="5、掌握TCP的首部字段"></a><strong>5</strong>、掌握TCP的首部字段</h2><table><thead><tr><th>0</th><th></th><th>15</th><th>16</th><th></th><th>31</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>源端口</td><td>目的端口</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>序号</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>确认号</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>首部长度</td><td>保留</td><td>URG</td><td>ACK</td><td>PSH</td><td>RST</td><td>SYN</td><td>FIN</td><td>窗口</td><td></td><td></td><td></td><td></td></tr><tr><td>检验和</td><td>紧急指针</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>选项（长度可变）</td><td>填充</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>应用层数据</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>源端口号、目的端口号：各占2字节，端口是传输层向应用层提供服务的接口；</p><p>序号：占4字节，TCP连接下数据流中的每一个字节都编上一个号，序号字段的值指的是本报文段所发送的数据的第一个字节的编号；</p><p>确认号：占4个字节，是期望收到对方的写一个报文段的第一个字节的序号（下一报文段序号字段），当有数据发送给对方时顺便确认，当没有数据发送给对方时单独发一确认报文；</p><p>首部长度：占4位，表示TCP首部的字节数，该字段限制了TCP首部最大值为60字节；</p><p>保留：占6位，保留为今后扩展使用，目前全部置为0；</p><p>特殊标记：各占1位，（1）URG——紧急标记，值为1时，紧急指针字段有效，通知本报文段有紧急数据，应尽快传送，紧急数据的优先级要高；（2）ACK——确认标记，值为1时，确认号字段有效，正常情况下只有第一次握手时ACK=0；（3）PSH——推送字段，值为1时，接收方在收到该报文段的数据就尽快将其交付给应用进程，而不再等到整个缓存填满；（4）RST——复位标记，值为1时，表明TCP连接中出现严重差错（主机崩溃等），必须强行释放连接，属于单方面强行断开连接；（5）SYN——同步标记，值为1时，表示是一个连接请求报文，正常情况下只有第一次握手和第二次握手时SYN=1，其余时SYN=0；（6）FIN——终止标记，值为1时，表示发送方的报文段数据已发送完毕，请求对方释放该连接，当接收方确认后，发送方将释放发送缓存；</p><p>窗口：占2字节，窗口字段是流量控制的关键，用来控制对方发送窗口的大小（单位为字节），接收方根据自身的窗口大小确定自己的接收窗口大小，然后通知发送方以确定对方窗口大小的上限；</p><p>检验和：占2字节，检验范围包括首部和数据两个部分，在计算检验和时，要在报文段前加12个字节的伪首部（TCP、UDP检验时均需增加伪首部字段）；</p><p>紧急指针：占2字节，紧急指针指出本报文段中紧急数据的最后一个字节的序号；</p><p>选项：长度可变，4位以内，目前仅规定了最大报文段长度MSS（maximum segment size），用以告知对方自己所能接收的报文段的数据字段的最大长度；</p><p>填充：将选项字段填充至4个字节，从而保证首部长度字段的有效性和计算检验和的有效性。</p><h2 id="6、掌握TCP的序号和确认机制"><a href="#6、掌握TCP的序号和确认机制" class="headerlink" title="6、掌握TCP的序号和确认机制"></a><strong>6</strong>、掌握TCP的序号和确认机制</h2><p>序号：TCP首部的序号基于字节。建立连接之初，发送方随机生成初始序号，之后收发双方的每个字节都对应一个编号，而TCP首部中的序号是该报文段中第一个字节的编号；</p><p>确认：TCP首部的确认号是期望对方发送的下一个数据的第一个字节的编号，即对方下一个报文段的序号。如果某个报文段没有携带任何数据，对方不需要对该报文做确认，即对方确认号不变，但对于特殊报文，如SYN=1的报文（建立连接），FIN=0的报文（断开连接），对方必须做确认，因此确认号将加1。</p><p>TCP属于累积确认，乱序到达数据会缓存。</p><h2 id="7、掌握TCP三次握手和断开连接的详细过程"><a href="#7、掌握TCP三次握手和断开连接的详细过程" class="headerlink" title="7、掌握TCP三次握手和断开连接的详细过程"></a><strong>7</strong>、掌握TCP三次握手和断开连接的详细过程</h2><table><thead><tr><th><strong>过程</strong>  <strong>（</strong>A<strong>、</strong>B<strong>双方）</strong></th><th><strong>三次握手</strong></th><th><strong>四次挥手断开连接</strong></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td><strong>正常断开</strong></td><td><strong>异常断开</strong></td><td></td><td></td><td></td></tr><tr><td>A-&gt;B</td><td>第1次</td><td>A随机初始化自己的序号SN(A)，确认号置0，初始化窗口大小，SYN=1请求建立连接。</td><td>第1次</td><td>A：确认号为SN。(B)’+1，ACK=1，FIN=1请求断开连接。</td><td>A：确认号为SN。(B)’+1，ACK=1，RST=1请求异常中断。</td></tr><tr><td>B-&gt;A</td><td>第2次</td><td>B随机初始化自己的序号SN(B)，确认号为SN(A)+1，初始化窗口大小，ACK=1表示B对A的确认，SYN=1请求建立连接。</td><td>第2次</td><td>B：确认号为SN(A)’+1，ACK=1。</td><td>B：确认号为SN(A)’+1，ACK=1。</td></tr><tr><td></td><td>第3次</td><td>B：序号和序列号均与上一次相同，ACK=1，FIN=1请求断开连接。</td><td></td><td></td><td></td></tr><tr><td>A-&gt;B</td><td>第3次</td><td>确认号为SN(B)+1，ACK=1表示A对B的确认，SYN=0。</td><td>第4次</td><td>A：确认号为SN(B)’+1，ACK=1。</td><td></td></tr></tbody></table><h2 id="8、TCP的流量控制方法"><a href="#8、TCP的流量控制方法" class="headerlink" title="8、TCP的流量控制方法"></a><strong>8</strong>、TCP的流量控制方法</h2><p>首部定义了窗口大小：接收方明确通过首部窗口字段发送接收窗口大小，从而限制发送方发送窗口的最大值，而发送方保证发送窗口大小不超过对方发送的接收窗口的大小；</p><h2 id="9、掌握TCP的拥塞控制思想"><a href="#9、掌握TCP的拥塞控制思想" class="headerlink" title="9、掌握TCP的拥塞控制思想"></a><strong>9</strong>、掌握TCP的拥塞控制思想</h2><p>第一、使用拥塞窗口cwnd控制发送窗口大小，发送窗口上限值=MIN（rwnd，cwnd）；第二、分组超时则认为拥塞，反之收到确认则认为网络未拥塞；第三、拥塞则少发（cwnd减小），未拥塞则多发（cwnd增大）；第四、网络未知的情况下，cwnd从最小开始，收到确认后cwnd逐渐增大；第五、为提高效率，开始增加速度快，到了一定阶段后增速变慢。</p><p>慢启动阶段：窗口初始值（假设为1）指数规律增长（2、4、8……），至慢开始门限ssthrest（假设为16），当指数增长结果大于ssthrest时，增长至ssthrest；</p><p>拥塞避免阶段：从ssthrest（16）起，以线性规律增长N（17、18、19……），直至发生超时（重回慢启动）；</p><p>重回慢启动：重回窗口初始值，慢开始门限ssthrest为N值减半（N/2）。</p><h1 id="第四章-网络层"><a href="#第四章-网络层" class="headerlink" title="第四章 网络层"></a>第四章 网络层</h1><h2 id="1、网络层的作用"><a href="#1、网络层的作用" class="headerlink" title="1、网络层的作用"></a><strong>1</strong>、网络层的作用</h2><p>负责将各种不同的网络互联，负责将数据段封装成数据包，关注于分组从一个节点到另一个节点的选路</p><h2 id="2、比较数据报网络和虚电路网络（网络层）"><a href="#2、比较数据报网络和虚电路网络（网络层）" class="headerlink" title="2、比较数据报网络和虚电路网络（网络层）"></a><strong>2</strong>、比较数据报网络和虚电路网络（网络层）</h2><p>数据报网络和虚电路网络均为分组交换网络。</p><table><thead><tr><th><strong>分组交换方式</strong></th><th><strong>数据报网络</strong></th><th><strong>虚电路网络</strong></th></tr></thead><tbody><tr><td>路由模式</td><td>源端向目的端发送分组，远端仅根据目标端选择下一条路，分组会在下一结点选择最优的下一条路，同一文件的不同分组可能沿不同的路传输</td><td>远端与目的端间首先建立一条虚拟链路，结点根据分组标签确定所走的虚电路，同一文件的不同分组沿同一条虚电路传输</td></tr><tr><td>可靠性</td><td>不强，可能形成环路</td><td>较好</td></tr><tr><td>路由器工作量</td><td>相对较小</td><td>较高，需要维护每条虚电路的状态</td></tr><tr><td>QoS（服务质量保证）</td><td>不易实现</td><td>容易实现</td></tr><tr><td>使用范围</td><td>因特网</td><td>ATM、帧中继网络</td></tr><tr><td>特点</td><td>灵活，简单</td><td>复杂</td></tr></tbody></table><table><thead><tr><th></th><th>数据报网络（因特网模型）</th><th>虚电路网络</th></tr></thead><tbody><tr><td>是否先建立连接</td><td>在网络层无连接建立</td><td>发送分组前建立一条虚拟电路</td></tr><tr><td>选路</td><td>一般分组使用目标IP进行路由选择</td><td>每个分组携有标签，由标签决定下一跳</td></tr><tr><td>各分组的路径</td><td>同一文件的不同分组可能走不同路径</td><td>在建立连接阶段确定固定路由，所有数据走同一路径</td></tr><tr><td>优点</td><td>灵活，适应性强，网络成本低</td><td>可靠，容易提供Qos，转发速度快</td></tr></tbody></table><h2 id="3、IP地址的发展"><a href="#3、IP地址的发展" class="headerlink" title="3、IP地址的发展"></a><strong>3、</strong>IP地址的发展</h2><p>全分类IP地址→子网掩码→无类别域间路由</p><h2 id="4、全分类的IP地址"><a href="#4、全分类的IP地址" class="headerlink" title="4、全分类的IP地址"></a>4、全分类的IP地址</h2><table><thead><tr><th></th><th>网络号位数</th><th>主机号位数</th><th>网络个数</th><th>主机个数</th><th>地址范围</th></tr></thead><tbody><tr><td>A类</td><td>8</td><td>24</td><td>27-2</td><td>224-2</td><td>1.0.0.0-126.255.255.255</td></tr><tr><td>B类</td><td>16</td><td>16</td><td>214</td><td>216-2</td><td>128.0.0.0-191.255.255.255</td></tr><tr><td>C类</td><td>32</td><td>8</td><td>221</td><td>28-2</td><td>192.0.0.0-223.255.255.255</td></tr><tr><td>D类</td><td></td><td></td><td></td><td></td><td>224.0.0.0-239.255.255.255</td></tr></tbody></table><h2 id="5、有哪些特殊的IP地址"><a href="#5、有哪些特殊的IP地址" class="headerlink" title="5、有哪些特殊的IP地址"></a><strong>5</strong>、有哪些特殊的<strong>IP</strong>地址</h2><p>（1）广播地址：主机号全1的地址；</p><p>（2）网络地址：主机号全0的地址；</p><p>（3）内网地址（私有地址）：10.0.0.0—10.255.255.255,172.16.0.0—172.31.255.255, 192.168.0.0——192.168.255.255（内部网络使用的地址，不能用于公网）；</p><p>（4）链路本地地址：169.254.0.0——169.254.255.255（无IP地址时由操作系统临时分配的IP地址）；</p><p>（5）本地环回地址：127.0.0.0——127.255.255.255  </p><p>（6）本地链路广播地址：255.255.255.255    </p><h2 id="6、IP网络和物理网络的概念"><a href="#6、IP网络和物理网络的概念" class="headerlink" title="6、IP网络和物理网络的概念"></a><strong>6、</strong>IP网络和物理网络的概念</h2><p>IP网络：IP地址分为网络部分和主机部分，网络部分相同的地址属于同一个IP网络；</p><p>物理网络：不经过路由器就可以直接到达的主机唯一同一个物理网络。位于同一物理网络的主机可以直接根据链路层的物理地址寻址；</p><p>IP地址和物理网络的关系是多对一的，即多个IP网络可以用于同一物理网络，但一个IP网络不可以用于多个物理网络。路由器用于转发不同IP网络的分组。</p><h2 id="7、定长掩码的划分和vlsm的划分"><a href="#7、定长掩码的划分和vlsm的划分" class="headerlink" title="7、定长掩码的划分和vlsm的划分"></a><strong>7、定长掩码的划分和</strong>vlsm的划分</h2><p>子网掩码的作用：划分子网，便于管理，提高IP地址利用率</p><p>定长掩码（FLSM，fix length subnet mask）：一连串长度不变的数字，通过子网划分确定一个本地区域网路的边界。</p><p>（1）确定子网数；</p><p>（2）确定每个子网的IP数；</p><p>（3）确定子网掩码；</p><p>（4）确定每个子网的IP。</p><p>由于子网定长，而子网内主机数较少，造成IP地址的浪费，当子网数过多或者单个子网内所需IP数过多时，甚至无法完成子网的划分。</p><p>变长掩码（VLSM，variable length subnet mask）：根据不同网段中不同的主机数使用不同长度的子网掩码，即可在某一子网（如/27）中进一步划分出若干个子网（如/30）来。</p><p>注意：子网之间通信需要路由器，子网是主机号中划分的，若出现多条路由同时匹配时采用掩码最长前缀匹配原则选择路径。</p><h2 id="8、CIDR地址的表示和路由汇总"><a href="#8、CIDR地址的表示和路由汇总" class="headerlink" title="8、CIDR地址的表示和路由汇总"></a><strong>8、</strong>CIDR地址的表示和路由汇总</h2><p>CIDR（classless inter-domain routing，无类别域间选路）：取消IP地址的分类限制，以改善IP地址的分配方式，缓解IP地址的危机。CIDR利用层次网络和路由汇总减小路由器中路由表的规模，提高转发速度。</p><p>CIDR地址的IP地址有前缀和掩码决定，如10.12.1.1/12其网络号为255.240.0.0，CIDR地址进行路由匹配时采用最长前缀匹配原则。。</p><p><strong>路由汇总</strong>：将连续的多个网络地址汇总为一个网络地址，与层次物理网络结合，能极大的减少路由器上路由表的规模。将多个网络（可以使匪类网络）汇总成一个CIDR地址块，形成“超网”，属于不精确汇总（所以属于汇总后的地址块都属于汇总前的地址块称为精确汇总，否则称不精确汇总），不精确汇总可能导致错误的路由。</p><h2 id="9、掌握IP-协议的首部（分片的方法）"><a href="#9、掌握IP-协议的首部（分片的方法）" class="headerlink" title="9、掌握IP**协议的首部（分片的方法）"></a><strong>9、掌握</strong>IP**协议的首部（分片的方法）</h2><p>IP协议是无连接、不可靠的协议，包括IPv4和IPv6两个版本。其中，IPv4包括20个字节的固定首部和长度可变的可选首部。</p><table><thead><tr><th>0</th><th></th><th>15</th><th>16</th><th></th><th>31</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>版本</td><td>首部长度</td><td>服务类型</td><td>总长度</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>标识</td><td>标志</td><td>片偏移</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>生存时间</td><td>协议</td><td>首部检验和</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>源地址</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>目的地址</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>可选字段（长度可变）</td><td>填充</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>数据部分</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>版本：占4位，表示IP协议版本，IPv4版本值为4；</p><p>首部长度：占4位，表示首部的单位长度（每单位4字节），故首部最大长度为60字节；</p><p>服务类型：占1字节，</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>优先级</td><td>D</td><td>T</td><td>R</td><td>C</td><td>未用</td><td></td><td></td></tr><tr><td>设置数据包的重要性。值越大数据越重要。</td><td>延迟。1：期待低延迟。</td><td>流量。1：期待高流量。</td><td>可靠性。1：期待高可靠性。</td><td>成本。1：期待最小成本。</td><td></td><td></td><td></td></tr></tbody></table><p>总长度：占2字节，表示首部和数据的总长度（单位为字节），故数据报的最大分组长度为65535字节（含IP首部），最大数据长度为65515字节（假设首部20字节），但总长度不允许超过MTU（maximum transmission unit，最大传送单元），否则将其<strong>分片</strong>；</p><p>标识：占2字节，分组超过MTU时会进行分片，同一分组的不同分片标识相同；</p><p>标志：占3位，包括DF、MF两个标志。DF=1表示该分组不允许分片，MF=1表示该分组后面还有分片；</p><p><strong>片偏移：占13</strong>位，指出该分片在原分组的位置，以8个字节为单位；</p><p>​                                              </p><p>生存时间：占1字节，TTL，表示数据报在网络中的寿命，其单位为秒（实际单位为跳），分组没经过一个路由器就TTL就减1，当路由器收到TTL=0的分组时会将其丢弃，TTL能有效的避免该分组在网络上无限循环的转发；</p><p>协议：占1字节，指出数据报携带的数据使用上层的何种协议，从而帮助目的主机的网络层将数据部分上交给哪个处理过程；</p><p>首部校验和：占2字节，字段只检验数据报的首部，不包括数据部分；</p><p>源地址、目的地址：各占4字节，表示发送接收方的IP地址，一般路由器不会改变分组的源IP地址和目的IP地址；</p><p>可选字段：小于4字节，主要用于网络测试和调试，实际一般不用；</p><p>填充：将可选字段填充至4字节。</p><h2 id="10、ICMP的基本工作原理"><a href="#10、ICMP的基本工作原理" class="headerlink" title="10、ICMP的基本工作原理"></a><strong>10、</strong>ICMP<strong>的基本工作原理</strong></h2><p>ICMP：internet控制报文协议（internet control message protocol），用于因特网的传输控制和差错报告，主要用于分组传输过程中的异常报告，包括：（1）目标地址不可达，（2）网络拥塞，（3）TTL到期，（4）IP分组检验和失败；  </p><p>ICMP首部：</p><table><thead><tr><th>0</th><th></th><th>15</th><th>16</th><th></th><th>31</th><th></th></tr></thead><tbody><tr><td>类型（不同差错）</td><td>代码</td><td>检验和</td><td></td><td></td><td></td><td></td></tr><tr><td>（取决于类型）</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>数据部分</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>ICMP封装：</p><table><thead><tr><th>IP首部</th><th>ICMP首部</th><th>出错分组首部</th><th>出错分组数据前8字节</th><th>出错分组数据其余字节</th></tr></thead><tbody><tr><td></td><td>出错分组</td><td></td><td></td><td></td></tr><tr><td>ICMP差错报告报文</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>  注意：（1）对出错的ICMP差错报告报文不再发送ICMP差错报告报文；（2）对某一分片后的分组，仅发送第一个分片的ICMP差错报告报文，后续分片不再发送；（3）组播地址数据不发送ICMP差错报告报文；（4）对特殊地址（如127.0.0.0或0.0.0.0）的数据不发送ICMP差错报告报文。（4）ping使用了ICMP的回送请求与回送响应报文。（5）tracert使用了ICMP的控制协议与TTL</p><h2 id="11、NAT的分类和作用"><a href="#11、NAT的分类和作用" class="headerlink" title="11、NAT的分类和作用"></a><strong>11、</strong>NAT的分类和作用</h2><p>NAT（network address translate），网络地址转换，用于IP地址的转换。</p><table><thead><tr><th>NAT的分类</th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>定义</strong></td><td><strong>缺点</strong></td><td><strong>比较</strong></td></tr><tr><td>静态NAT</td><td>将内网数据报的源IP地址一对一的转换成外网的IP地址</td><td>无法缓解IP地址危机</td><td>静态NAT内网IP与外网IP是一一对应的，而动态NAT的地址转换是临时的。</td></tr><tr><td>动态NAT池</td><td>将外网合法的IP地址形成可用的NAT池。内网IP需要上网时，从NAT中去一个可用的IP地址</td><td>无法所以内网IP同时上网</td><td></td></tr><tr><td>端口NAT（PAT）</td><td>服务器根据TCP/UDP端口号映射</td><td></td><td></td></tr></tbody></table><p>NAT的作用：（1）解决多个用户使用一个公网IP上网的问题，缓解了IP地址危机；（2）实现内部IP地址影藏及服务器负载均衡。</p><h2 id="12、DHCP的基本工作原理"><a href="#12、DHCP的基本工作原理" class="headerlink" title="12、DHCP的基本工作原理"></a><strong>12</strong>、DHCP的基本工作原理</h2><p>DHCP（dynamic host configuration protocol），动态主机设置协议，采用C/S模式，使用UDP协议工作，服务器端口号为67，客户端端口为68，用于主机自动获得IP地址、子网掩码、网关地址、DNS服务器地址、租用期的相关信息。</p><table><thead><tr><th><strong>客户端</strong></th><th><strong>端口号</strong></th><th><strong>工作过程</strong></th><th><strong>端口号</strong></th><th><strong>服务器</strong></th><th></th></tr></thead><tbody><tr><td></td><td>服务器被动打开UDP端口67，等待客户端发来的报文</td><td>67</td><td>服务器</td><td></td><td></td></tr><tr><td>客户端</td><td>68</td><td>DHCPDISCOVER</td><td>客户通过UDP端口68广播DHCP发现报文</td><td>67</td><td>服务器</td></tr><tr><td>客户端</td><td>68</td><td>DHCPOFFER</td><td>服务器发送广播报文声明可以提供IP地址</td><td>67</td><td>服务器</td></tr><tr><td>客户端</td><td>68</td><td>DHCPREQUEST</td><td>客户广播请求IP地址</td><td>67</td><td>服务器</td></tr><tr><td>客户端</td><td>68</td><td>DHCPACK</td><td>服务器广播发送IP地址、网关等，客户允许租用期内使用IP</td><td>67</td><td>服务器</td></tr><tr><td>客户端</td><td>68</td><td>DHCPREQUEST</td><td>租用期即将到期，发送续约请求。如果服务器同意则继续使用该IP，否则返回第2步重新申请</td><td>67</td><td>服务器</td></tr></tbody></table><p>DHCP中继代理：广播DHCPREQUEST请求，中继代理单播向其他网络的DHCP服务器，获取IP地址。</p><h2 id="13、路由的概念及分类"><a href="#13、路由的概念及分类" class="headerlink" title="13、路由的概念及分类"></a><strong>1</strong>3、路由的概念及分类</h2><p>概念：根据目标网络选择最“好”路径</p><p>分类：从路由获取方式可分为：直连路由、静态路由、动态路由</p><p>从路由匹配数量可分为：目标路由、特定主机路由、默认路由</p><h2 id="14、比较距离向量路由算法和链路状态路由算法"><a href="#14、比较距离向量路由算法和链路状态路由算法" class="headerlink" title="14、比较距离向量路由算法和链路状态路由算法"></a><strong>14</strong>、比较距离向量路由算法和链路状态路由算法</h2><p>距离向量路由算法和链路状态路由算法均属于动态路由协议（让路由器通过交换信息自动获得路由信息）。</p><table><thead><tr><th><strong>算法</strong></th><th>距离向量算法（DV算法）（RIP）</th><th>链路状态路由算法（LS算法）（OSPF）</th></tr></thead><tbody><tr><td><strong>原理</strong></td><td>（1）周期性向邻居通告自己的路由信息；  （2）根据邻居通告使用加法更新自己的距离向量表；  （3）路由表改变时，继续通告邻居；  （4）网络中所有路由表没有改变时，算法终止</td><td>（1）将自己的链路状态洪泛到网络上的所有路由器；  （2）每个路由器最终会知道整个网络的拓扑结构；  （3）使用Dijstra算法最短路径算法计算自己与其他路由器最短路径，更新路由表；  （4）链路状态变化时，继续洪泛</td></tr><tr><td><strong>特点</strong></td><td>好消息传的快，坏消息传的慢（形成路由环路）</td><td>可能产生路由震荡</td></tr><tr><td><strong>范围</strong></td><td>邻居之间</td><td>整个网络</td></tr><tr><td><strong>收敛时间</strong></td><td>不稳定</td><td>稳定</td></tr><tr><td><strong>健壮性</strong></td><td>不好</td><td>好</td></tr><tr><td><strong>例子</strong></td><td>RIP、BGP</td><td>OSPF</td></tr></tbody></table><h2 id="15、掌握RIP的工作原理和配置方法"><a href="#15、掌握RIP的工作原理和配置方法" class="headerlink" title="15、掌握RIP的工作原理和配置方法"></a>15、掌握RIP的工作原理和配置方法</h2><p>RIP使用距离向量路由算法，使用UDP进行传输（端口为520），按固定的时间间隔交换路由信息（30s）。RIP将距离定义为“跳数”，每经过一个路由器跳数加1，规定最大值为15（16即相当于不可达）。使用毒性逆转（即向某条路由对应的出接口通告该路由为无穷大路由）等方法缓解环路影响</p><p>RIP包括RIP1和RIP2。RIP1通过广播通告路由信息，不支持验证和CIDR，RIP2通过组播通告路由信息，支持验证和CIDR。</p><p>配置方法略。</p><h2 id="16、IGP和EGP的分类"><a href="#16、IGP和EGP的分类" class="headerlink" title="16、IGP和EGP的分类"></a><strong>16</strong>、IGP和EGP的分类</h2><p>为解决路由信息过多，更新缓慢的问题，使用自治系统（AS，由一个管理部门管理的具有相同路由策略的网络系统）管理网络系统。同一AS内的路由器使用相同的路由协议称IGP（内部网关协议），如RIP、OSPF；AS之间的路由器使用的路由协议称为EGP（外部网关协议），如BGP。其中网关路由器同时运行IGP和EGP。</p><h2 id="17、OSPF路由协议"><a href="#17、OSPF路由协议" class="headerlink" title="17、OSPF路由协议"></a><strong>17</strong>、OSPF路由协议</h2><p>使用链路状态路由算法，无路由自环，支持区域划分适用于大规模网络，支持CIDR、VLSM，支持验证，使用组播方式发送协议报文，基于IP，为停等协议，自身可实现可靠传输，收敛速度快，链路代价为108/网络带宽</p><p>OSPF使用路由器标识（32位无符号整数，整个自治系统唯一）唯一确定OSPF路由器</p><p>OSPF划分区域来减少洪范范围，其中ABR负责区域之间的信息传递，它使用距离矢量算法</p><p>OSPF支持的网络拓扑结构：广播式多点接入网络、点到点网络、点到多点网络等</p><p>在全连通网络中，选取DR（村长）和BDR，DR负责通告路由</p><h2 id="18、BGP协议防止路由发生的方法"><a href="#18、BGP协议防止路由发生的方法" class="headerlink" title="18、BGP协议防止路由发生的方法"></a><strong>18</strong>、BGP协议防止路由发生的方法</h2><p>路由信息中携带丰富的路由属性，AS-PATH属性记录BGP路由所经过的自治系统号，当某个BGP路由器收到一条包括自己所在自治系统的路由时丢弃</p><h2 id="19、组播IP地址范围"><a href="#19、组播IP地址范围" class="headerlink" title="19、组播IP地址范围"></a><strong>19</strong>、组播IP地址范围</h2><p>224.0.0.0 - 239.255.255.255 </p><h2 id="20、IGMP，RPF转发机制和PIM-SM"><a href="#20、IGMP，RPF转发机制和PIM-SM" class="headerlink" title="20、IGMP，RPF转发机制和PIM-SM"></a><strong>20</strong>、IGMP，RPF转发机制和PIM-SM</h2><p>IGMP：组成员管理协议（Internet Group Management Protocol），主机通过IGMP协议通知本地路由器希望加入并接收某个特定组的信息，路由器通过IGMP周期性查询局域网内某个组是否还存在。</p><p>RPF转发机制：逆向路径转发（Reverse Path Forwarding），以防止组播报文在网络转发中形成环路。组播接收到报文后必须根据源和目的地址确定上游（指向组播源或汇集点）和下游（远离组播源或汇集点），RPF转发机制就是讲组播报文从上游向下游转发。</p><p>PIM-SM：协议无关稀疏式组播，目前组播的标准协议，适用于组成员分布较广的情况，采用共享式和信源树相结合的方式。PIM-SM使用拉的方式，组播信息发送到被拉入网络中的接收站点。</p><h2 id="21、IPv6的基本概念"><a href="#21、IPv6的基本概念" class="headerlink" title="21、IPv6的基本概念"></a><strong>21</strong>、IPv6的基本概念</h2><p>IPv6报文结构：</p><table><thead><tr><th>IPv6首部</th><th>扩展首部1</th><th>……</th><th>扩展首部n</th><th>数据部分</th></tr></thead><tbody><tr><td></td><td>选项</td><td></td><td></td><td></td></tr><tr><td></td><td>有效载荷</td><td></td><td></td><td></td></tr></tbody></table><p>IPv6首部：</p><table><thead><tr><th>0</th><th></th><th>15</th><th>16</th><th></th><th>31</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>版本</td><td>通信量类</td><td>流标号</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>有效载荷长度</td><td>下一个首部</td><td>跳数限制</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>源地址（128位）</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>目的地址（128位）</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>数据</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>版本：占4位，指明协议版本号；</p><p>通信量类：占1字节，区分不同IPv6数据报或类别；</p><p>流标号：占20位，属于同一“流”（从特定源到目的的一系列数据报）的数据报具有同样的流标号，流所经过的路由器保证指明的服务质量；</p><p>有效载荷长度：占2字节，除首部外的数据长度（包括扩展首部），故最大长度为64KB；</p><p>下一个首部：占1字节，相当于IPv4中的协议字段；</p><p>跳数限制：占1字节，远端在数据发出时设置跳数限制，路由器每转发一次跳数减1，跳数为1时将被丢弃；</p><p>源地址、目的地址：各占4字节。</p><h2 id="22、IPV6针对IPV4改进"><a href="#22、IPV6针对IPV4改进" class="headerlink" title="22、IPV6针对IPV4改进"></a><strong>2</strong>2<strong>、IPV6</strong>针对<strong>IPV4</strong>改进</h2><p>增加IP地址范围，尽可能减少路由器的额外工作，提高路由器转发分组的速度，更好的实现路由汇总，更好实现Qos提高协议的灵活性，增加了移动性和安全性。</p><h1 id="第五章-数据链路层"><a href="#第五章-数据链路层" class="headerlink" title="第五章 数据链路层"></a>第五章 数据链路层</h1><h2 id="1、比较数据链路层和传输层"><a href="#1、比较数据链路层和传输层" class="headerlink" title="1、比较数据链路层和传输层"></a><strong>1</strong>、比较数据链路层和传输层</h2><p>数据链路层：负责一段链路的两端之间的通信，由网卡负责数据链路层的协议。</p><table><thead><tr><th><strong>服务层</strong></th><th>传输层</th><th>数据链路层</th></tr></thead><tbody><tr><td><strong>通信</strong></td><td>收发双方主机到主机</td><td>一段链路端到端</td></tr><tr><td><strong>范围</strong></td><td>整个网络（可以跨越局域网）</td><td>同一局域网内</td></tr><tr><td><strong>服务对象</strong></td><td>应用层，端口</td><td>物理层，MAC地址</td></tr></tbody></table><h2 id="2、网卡的作用"><a href="#2、网卡的作用" class="headerlink" title="2、网卡的作用"></a>2、网卡的作用</h2><p>（1）数据的封装与解封：发送时将收到的上层分组加上首部和尾部形成以太网的帧并通过物理层发出（封装），接收时则将收到的分组剥去首部和尾部形成分组并送交上层（解封）；</p><p>（2）链路管理：实现CSMA/CD（Carrier Sense Multiple Access with Collision Detection），带冲突检测的<a href="http://baike.baidu.com/view/543300.htm">载波监听多路访问</a>；</p><p>（3）编码与译码：实现曼彻斯特编码与译码。</p><h2 id="3、比较IP地址和MAC地址"><a href="#3、比较IP地址和MAC地址" class="headerlink" title="3、比较IP地址和MAC地址"></a><strong>3</strong>、比较IP地址和MAC地址</h2><table><thead><tr><th><strong>地址类型</strong></th><th>IP地址</th><th>MAC地址</th></tr></thead><tbody><tr><td><strong>定义</strong></td><td>因特网上不同网络间能够通信的唯一地址</td><td>局域网中固化在硬件上的地址</td></tr><tr><td><strong>目的</strong></td><td>不同网段间的通信</td><td>同一网段内结点间通信</td></tr><tr><td><strong>长度</strong></td><td>IPv4：32位（4字节），IPv6：128位（16字节）</td><td>48位（6字节）</td></tr><tr><td><strong>范围</strong></td><td>因特网（广域网）</td><td>局域网</td></tr><tr><td><strong>所在TCP**</strong>层**</td><td>网络层</td><td>数据链路层</td></tr><tr><td><strong>获取对方地址方式</strong></td><td>DNS</td><td>ARP</td></tr></tbody></table><h2 id="4、CRC冗余检验的计算方法，奇偶校验可以纠错"><a href="#4、CRC冗余检验的计算方法，奇偶校验可以纠错" class="headerlink" title="4、CRC冗余检验的计算方法，奇偶校验可以纠错"></a><strong>4</strong>、CRC冗余检验的计算方法，奇偶校验可以纠错</h2><p>CRC冗余检验：待校验码除以一个约定好的除数，若能除尽（余数为0）则校验正确，反之出错，CRC冗余校验查错率高，能纠错。</p><p>CRC冗余检验具体做法：（1）数据比特流看成二进制数据作为被除数D；（2）选择一个n位的二进制数作为除数G（随机生成多项式+1，如x5+x2+1，即100101）；（3）发送方采用异或方式D除以G得到余数R，即为CRC冗余校验码。</p><p>奇偶校验：通过在数据后添加1位，保证新的数据中1有奇数个。一维奇偶校验能查错，二维奇偶校验能纠错（1位）。</p><h2 id="5、FDMA，TDMA，CDMA"><a href="#5、FDMA，TDMA，CDMA" class="headerlink" title="5、FDMA，TDMA，CDMA"></a><strong>5、</strong>FDMA，TDMA，CDMA</h2><p>FDMA、TDMA、CDMA均属于信道分割技术。</p><p>FDMA：frequency division multiple access，频分复用。信道按频率分割成若干频段，每个站点分得固定的频段，该站点不用时相应频段被闲置浪费；频分复用使用不同频率的载波将信号调制到不同频段上。</p><p>TDMA：time division multiple access，时分复用。信道根据时间分成多个固定长度的时间片，每个用户允许在不同的时间片上传输信息，某个时间片上无用户传送信息则导致信道浪费。TDMA分成同步时分复用和异步时分复用（统计时分复用）</p><p>CDMA：code division multiple access，码分复用，大部分用于无线通信场合，用户共享相同频道，每个用户用自己的码片序列对数据编码，允许多用户共存和发送信号，对相互的干扰极小。</p><h2 id="6、CSMA-CD的工作原理"><a href="#6、CSMA-CD的工作原理" class="headerlink" title="6、CSMA/CD的工作原理"></a><strong>6</strong>、CSMA/CD的工作原理</h2><p>CSMA/CD（Carrier Sense Multiple Access with Collision Detection），带冲突检测的<a href="http://baike.baidu.com/view/543300.htm">载波监听多路访问</a>，其核心思想包括：</p><p>（1）先听后讲：信道空闲则讲，反之等待；</p><p>（2）边听边讲：发送信号时不断检测是否碰撞；</p><p>（3）碰撞即停；</p><p>（4）退避重传：二进制指数退避算法重传；</p><p>（5）多次碰撞，放弃发送：最多16次。</p><p>二进制指数退避算法：（1）确定基本退避时间，一般为争用期2τ（端到端的往返时延）；（2）定义重传次数k（k≤10）；（3）从整数集合{0,1,…,2k-1}中随机取一数记为r，则重传时退避时延为r*2τ；（4）重传16次仍不成功则丢弃该帧，并向高层报告。</p><p>最短帧长的概念和计算方法。</p><h2 id="7、ARP的工作原理"><a href="#7、ARP的工作原理" class="headerlink" title="7、ARP的工作原理"></a><strong>7</strong>、ARP的工作原理</h2><p>ARP：通过IP地址获得MAC地址。</p><p>工作原理：（1）发送方A向接收方B发送数据前，查看本地的ARP缓存表，若没有则广播发送ARP请求包；（2）局域网内主机和网关均将A的Mac地址记入ARP缓存表，但不响应；（3）接收方若在局域网内，B收到广播请求后向A单播发送响应ARP报文；（4）接收方若不在局域网内，则向网关获取B的MAC地址，网关ARP缓存表中有则直接回复响应，若没有则继续发送ARP请求报文。 </p><h2 id="8、最短帧长的作用和计算方法"><a href="#8、最短帧长的作用和计算方法" class="headerlink" title="8、最短帧长的作用和计算方法"></a><strong>8</strong>、最短帧长的作用和计算方法</h2><p>传统的以太网的最短帧长为64字节，从而确保碰撞帧的检测，小于64字节的帧被认为是碰撞帧，因此，实际发送数据小于64字节时会被自动填充。</p><p>最短帧长=带宽×争用期</p><h2 id="9、各种网络设备的作用"><a href="#9、各种网络设备的作用" class="headerlink" title="9、各种网络设备的作用"></a><strong>9、各种网络设备的作用</strong></h2><table><thead><tr><th><strong>设备</strong></th><th><strong>所在服务层</strong></th><th><strong>作用</strong>/ <strong>工作方式</strong></th><th><strong>碰撞域</strong></th><th><strong>广播域</strong></th><th><strong>CSMA/CD</strong></th><th><strong>解决环路问题</strong></th><th><strong>以太网类型</strong></th></tr></thead><tbody><tr><td>中继器（Repeater）</td><td>物理层</td><td>用于信号的调整、复制、放大</td><td></td><td></td><td></td><td></td><td>共享式以太网</td></tr><tr><td>集线器（Hub）</td><td>物理层</td><td>多端口中继器。通过广播实现单播</td><td>连接到集线器的主机或集线器的级联都属于一个碰撞域</td><td>不隔离广播域</td><td>不使用</td><td></td><td></td></tr><tr><td>网桥（Bridge）</td><td>数据链路层</td><td>根据帧的MAC地址决定转发出口，MAC地址和端口的对应存在缓存中（端口和MAC地址时一对多的关系，有生存时间）</td><td>隔离碰撞域</td><td>不隔离广播域</td><td>使用CSMA/CD</td><td>生成树协议（spanning tree）：（1）将环路变为生成树结构；（2）确定根网桥；（3）确定根端口（指向根网桥的最短路径的出口）；（4）每个网段确定一个指定端口（非指定端口阻塞时无法转发帧）</td><td></td></tr><tr><td>二层交换机（2-layer Switch）</td><td>数据链路层</td><td>多端口网桥，帧转发基于硬件根据目标MAC地址决定转发出口，可连接不同带宽的以太网，MAC地址和端口的对应存在缓存中。采用源地址学习机制，广播未知帧和广播帧，单播已知帧</td><td>隔离碰撞域</td><td>不隔离广播域（未划分VLAN）</td><td>半双工模式下使用CSMA/CD</td><td></td><td>交换式以太网</td></tr><tr><td>路由器（Router）</td><td>网络层</td><td>基于软件转发分组（速度较慢），用于连接异构的网络。根据IP地址查找路由表，决定转发路径，未知分组直接丢弃，不会广播</td><td>隔离碰撞域</td><td>隔离广播域</td><td></td><td></td><td></td></tr><tr><td>三层交换机（3-layer Switch）</td><td>路由模式/交换模式</td><td>路由模式下和路由器一样实现IP层转发，交换模式下与二层交换机相同。与路由器相比，三层交换机交个便宜，转发基于硬件（速度快），但只限于同种局域网段（路由器可以连接异构的网络）</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="10、网桥和二层交换机的工作原理"><a href="#10、网桥和二层交换机的工作原理" class="headerlink" title="10、网桥和二层交换机的工作原理"></a><strong>10</strong>、网桥和二层交换机的工作原理</h2><p>源地址学习机制，已知帧单播，未知帧广播。</p><h2 id="11、碰撞域（冲突域）和广播域的判断"><a href="#11、碰撞域（冲突域）和广播域的判断" class="headerlink" title="11、碰撞域（冲突域）和广播域的判断"></a><strong>11</strong>、碰撞域（冲突域）和广播域的判断</h2><p>一个CSMA/CD网络即是一个碰撞域，基于物理层。网络设备中中继器（Repeater）和集线器（Hub）不能隔离碰撞域，网桥、二层交换机、路由器和三层交换机可以隔离碰撞域。</p><p>广播域(Broadcast Domain)是指网段上收听送往所在网段的所有广播的所有设备的集合，基于数据链路层。只有路由器和三层交换机可以隔离广播域。</p><p>交换机上有多少个端口连到了网络，就有多少个碰撞域；路由器上有多少个端口连到了网络，就有多少个广播域。</p><h2 id="12、T568A和T568B的接线顺序"><a href="#12、T568A和T568B的接线顺序" class="headerlink" title="12、T568A和T568B的接线顺序"></a><strong>12、T568A</strong>和T568B的接线顺序</h2><p>T568A：半绿、绿、半橙、蓝、半蓝、橙、半棕、棕</p><p>T568B：半橙、橙、半绿、蓝、半蓝、绿、半棕、棕</p><h2 id="13、直通线和交叉线"><a href="#13、直通线和交叉线" class="headerlink" title="13、直通线和交叉线"></a><strong>13、</strong>直通线和交叉线</h2><p>直通线两端都使用T568B连线，一般用于不同设备</p><p>交叉线一段使用T568B连线，一段用T568A连线，一般用于相同或相近的设备</p><h2 id="14、MAC地址的基本特点"><a href="#14、MAC地址的基本特点" class="headerlink" title="14、MAC地址的基本特点"></a><strong>14、MAC</strong>地址的基本特点</h2><p>单播MAC地址：固化在网卡上，十六进制表示：AC-DE-48-D0-00-80，二进制表示：第八位必须为0.</p><p>广播MAC地址：FF-FF-FF-FF-FF-FF</p><p>组播MAC地址：组播MAC地址通过组播IP地址后23位映射而成</p><h2 id="15、多模光纤和单模光纤"><a href="#15、多模光纤和单模光纤" class="headerlink" title="15、多模光纤和单模光纤"></a><strong>15、</strong>多模光纤和单模光纤</h2><table><thead><tr><th></th><th>多模光纤</th><th>单模光纤</th></tr></thead><tbody><tr><td>核心直径</td><td>大</td><td>小</td></tr><tr><td>光传播模式</td><td>以多路径或多模式传播</td><td>以一种模式无散射传播</td></tr><tr><td>带宽</td><td>低</td><td>高</td></tr><tr><td>光源</td><td>LED光源</td><td>激光光源</td></tr><tr><td>适合距离</td><td>短距离</td><td>长距离</td></tr></tbody></table><h2 id="16、以太网的两大标准"><a href="#16、以太网的两大标准" class="headerlink" title="16、以太网的两大标准"></a><strong>16、</strong>以太网的两大标准</h2><p>商业标准Ethernet V2、官方标准802.3（增加了LLC子层）</p><h2 id="17、以太网帧的结构"><a href="#17、以太网帧的结构" class="headerlink" title="17、以太网帧的结构"></a><strong>17、</strong>以太网帧的结构</h2><p>网络层</p><p>  数据  </p><p>数据链路层</p><table><thead><tr><th>目的地址</th><th align="center">源MAC地址</th><th>类型</th><th>数据</th><th>FCS（CRC）</th></tr></thead><tbody><tr><td></td><td align="center"></td><td></td><td></td><td></td></tr></tbody></table><p>物理层</p><table><thead><tr><th>前导符</th><th>10110010…………………………………………………………………………………………………….10101011</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>前导符：用于收发双方同步</p><h2 id="18、以太网的特性"><a href="#18、以太网的特性" class="headerlink" title="18、以太网的特性"></a>18、以太网的特性</h2><p>以太网提供无连接不可靠的服务。</p><p>以太网对于出错的帧(CRC校验失败)直接丢弃，不重传。</p><p>共享式（半双工）以太网使用CSMA/CD协议处理碰撞。</p><p>以太网最短帧长定为64字节(或者以太网的最小数据定为46字节），小于64字节的帧被认为是碰撞帧，实际发送数据小于46字节时会自动填充。对于碰撞帧最多重传16次。</p><p>传统10M以太网帧间间隔为9.6 s。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;../blog/images/jsjwl.jfif&quot; alt=&quot;begin&quot;&gt;&lt;/p&gt;
&lt;p&gt;写在最前，这个只是个人的计网知识总结，内容不是全面，可供参考&lt;/p&gt;
&lt;h1 id=&quot;第一章-概述&quot;&gt;&lt;a href=&quot;#第一章-概述&quot; class=&quot;head</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://www.whkblog.work/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="期末复习" scheme="https://www.whkblog.work/tags/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>马克思主义原理概论知识点总结</title>
    <link href="https://www.whkblog.work/2021/01/08/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%8E%9F%E7%90%86%E6%A6%82%E8%AE%BA%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>https://www.whkblog.work/2021/01/08/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%8E%9F%E7%90%86%E6%A6%82%E8%AE%BA%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</id>
    <published>2021-01-08T13:07:31.000Z</published>
    <updated>2021-01-12T08:43:19.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="◆-绪论"><a href="#◆-绪论" class="headerlink" title="◆ 绪论"></a>◆ 绪论</h1><h2 id="一：马克思主义来源与创新"><a href="#一：马克思主义来源与创新" class="headerlink" title="一：马克思主义来源与创新"></a>一：马克思主义来源与创新</h2><p>　　来源：德国古典哲学，英国古典政治经济学，英法空想社会主义<br>　　创新：马克思恩格斯批判地继承了前人的成果，创立了唯物史观和剩余价值学说，实现了人类思想史上的伟大革命。他们在这一时期创立的马克思主义，对人类先进思想已经提出的种种问题作了分析批判，对资本主义时代发展提出的理论课题作了科学的论述。马克思主义哲学为认识历史和时代问题提供了一种崭新的世界观和方法论原则。马克思主义政治经济学通过对资本主义生产方式的内在矛盾、运行机制和发展规律的深刻分析，揭示了资本主义剥削的秘密和它被社会主义必然代替的历史命运。科学社会主义在唯物史观和剩余价值论两大发现的基础上，阐明了由资本主义社会转变为社会主义、共产主义社会的客观规律，阐明了无产阶级获得彻底解放的历史条件和无产阶级的历史使命，使社会主义由空想成为科学。</p><h2 id="二：马克思主义最根本的世界观和方法论是什么（马克思主义最根本的理论特征）"><a href="#二：马克思主义最根本的世界观和方法论是什么（马克思主义最根本的理论特征）" class="headerlink" title="二：马克思主义最根本的世界观和方法论是什么（马克思主义最根本的理论特征）"></a>二：马克思主义最根本的世界观和方法论是什么（马克思主义最根本的理论特征）</h2><p>　　辩证唯物主义与历史唯物主义是马克思主义最根本的世界观和方法论</p><h2 id="三：马克思主义最鲜明的政治立场是什么"><a href="#三：马克思主义最鲜明的政治立场是什么" class="headerlink" title="三：马克思主义最鲜明的政治立场是什么"></a>三：马克思主义最鲜明的政治立场是什么</h2><p>　　马克思政党的一切理论和奋斗都应致力于实现以劳动人民为主体的最广大人民的根本利益，这是马克思主义最鲜明的政治立场</p><h2 id="四：马克思主义最重要的理论品质"><a href="#四：马克思主义最重要的理论品质" class="headerlink" title="四：马克思主义最重要的理论品质"></a>四：马克思主义最重要的理论品质</h2><p>　　坚持一切从实际出发，理论联系实际，实事求是，在实践中检验真理和发展真理，是马克思主义最重要的理论品质</p><h2 id="五：马克思主义最崇高的社会理想"><a href="#五：马克思主义最崇高的社会理想" class="headerlink" title="五：马克思主义最崇高的社会理想"></a>五：马克思主义最崇高的社会理想</h2><p>　　实现物质财富极大丰富、人民精神境界极大提高、每个人自由而全面发展的共产主义社会，是马克思主义最崇高的社会理想</p><h2 id="六：对待马克思主义的态度"><a href="#六：对待马克思主义的态度" class="headerlink" title="六：对待马克思主义的态度"></a>六：对待马克思主义的态度</h2><p>　　必须坚持马克思主义不动摇，这是就马克思主义的基本原理、基本观点和基本方法而言的。随着时代的发展和历史条件的变化，要求我们在坚持马克思主义基本原理的基础上，不断地在实践中丰富和发展马克思主义。我们一定要适应实践的发展，以实践来检验一切，用发展着的马克思主义指导新的实践。我们必须坚持解放思想、实事求是、与时俱进，从理论和实践的结合上不断研究新情况、解决新问题，做到自觉地把思想认识从那些不合时宜的观念、做法和体制的束缚中解放出来，从对马克思主义的错误的和教条式的理解中解放出来，从主观主义和形而上学的桎梏中解放出来，不断有所发现、有所创造、有所前进。</p><h1 id="◆-第一章"><a href="#◆-第一章" class="headerlink" title="◆ 第一章"></a>◆ 第一章</h1><h2 id="一：近代哲学的基本问题"><a href="#一：近代哲学的基本问题" class="headerlink" title="一：近代哲学的基本问题"></a>一：近代哲学的基本问题</h2><p>　　全部哲学，特别是近代哲学的重大的基本问题，是思维和存在的关系问题</p><h2 id="二：马克思主义物质的定义"><a href="#二：马克思主义物质的定义" class="headerlink" title="二：马克思主义物质的定义"></a>二：马克思主义物质的定义</h2><p>　　物质是标志客观实在的哲学范畴，这种客观实在是人通过感觉感知的，它不依赖于我们的感觉而存在，为我们的感觉所复写、摄影、反映——列宁</p><h2 id="三：马克思主义物质观理论意义"><a href="#三：马克思主义物质观理论意义" class="headerlink" title="三：马克思主义物质观理论意义"></a>三：马克思主义物质观理论意义</h2><p>　　第一：坚持了物质的客观实在性原则，坚持了唯物主义一元论，同唯心主义一元论和二元论划清了界限。第二：坚持了能动的反映论和可知论，有力的批判了不可知论。第三：体现了唯物论和辩证法的统一。第四：体现了唯物主义自然观与唯物主义历史论的统一，为彻底的唯物主义奠定了理论基础。</p><h2 id="四：联系特征"><a href="#四：联系特征" class="headerlink" title="四：联系特征"></a>四：联系特征</h2><p>　　首先，联系具有客观性。其次，联系具有普遍性。最后，联系具有多样性。</p><h2 id="五：发展的知识点"><a href="#五：发展的知识点" class="headerlink" title="五：发展的知识点"></a>五：发展的知识点</h2><p>　　实质：是新事物的产生和旧事物的灭亡。<br>　　新旧事物：新事物是指合乎历史前进方向、具有远大前途的东西；<br>　　旧事物是指丧失历史必然性，日趋灭亡的东西<br>　　为什么新事物是不可战胜的？<br>　　①新事物符合事物发展的必然趋势，具有强大的生命力和远大的发展前途，而旧事物丧失了存在的必然性，失去了生命力和发展前途，因而必然被新事物所代替。② 新事物优越于旧事物。新事物否定了旧事物中腐朽过时的东西，吸收并发展了旧事物中积极的因素，添加了旧事物中不能容纳的新的内容。③ 在社会领域中，新事物符合广大人民群众的根本利益和要求，因而得到广大人民群众的拥护和支持，它必然战胜旧事物。</p><h2 id="六：矛盾的同一性，斗争性"><a href="#六：矛盾的同一性，斗争性" class="headerlink" title="六：矛盾的同一性，斗争性"></a>六：矛盾的同一性，斗争性</h2><p>　　矛盾的同一性：是指矛盾者双方相互依存、相互贯通的性质和趋势。<br>　　矛盾的斗争性：是矛盾者的对立面之间相互排斥、相互分离的性质和趋势。</p><h2 id="七：矛盾的普遍性，特殊性"><a href="#七：矛盾的普遍性，特殊性" class="headerlink" title="七：矛盾的普遍性，特殊性"></a>七：矛盾的普遍性，特殊性</h2><p>　　矛盾的普遍性：矛盾存在于一切事物中，存在于一切事物发展过程的始终，旧的矛盾解决了，新的矛盾又产生，事物始终在矛盾中运动。<br>　　矛盾的特殊性：一是不同事物的矛盾各有其特点；二是同一事物的矛盾在不同发展过程和发展阶段各有不同特点；三是构成事物的诸多矛盾以及每一矛盾的不同方向各有不同的性质。</p><h2 id="八：量变，质变"><a href="#八：量变，质变" class="headerlink" title="八：量变，质变"></a>八：量变，质变</h2><p>　　量变：事物数量的增减和次序的变动，是保持事物的质的相对稳定性的不显著变化，体现了事物渐进过程的连续性。<br>　　质变：事物性质的根本变化，是事物由一种质态向另一种质态的飞跃，体现了事物渐进过程和连续性的中断。<br>　　量变和质变的辩证关系：1）量变是质变的必要准备<br>　　2）质变是量变的必然结果<br>　　3）量变和质变是相互渗透的</p><h2 id="九：肯定，否定"><a href="#九：肯定，否定" class="headerlink" title="九：肯定，否定"></a>九：肯定，否定</h2><p>　　肯定：维持现成事物存在的因素 否定：促成现成事物灭亡的因素</p><h2 id="十：意识的作用"><a href="#十：意识的作用" class="headerlink" title="十：意识的作用"></a>十：意识的作用</h2><p>　　第一，意识是能动的，具有目的性和计划性。第二，意识活动具有创造性。第三，意识具有指导实践改造客观世界的作用。第四，意识还具有指导、控制人的行为和生理活动的作用。</p><h2 id="十一：主观能动性与客观规律的辩证统一"><a href="#十一：主观能动性与客观规律的辩证统一" class="headerlink" title="十一：主观能动性与客观规律的辩证统一"></a>十一：主观能动性与客观规律的辩证统一</h2><p>　　首先，必须尊重客观规律。其次，在尊重客观规律的基础上，要充分发挥主观能动性。</p><h1 id="◆-第二章"><a href="#◆-第二章" class="headerlink" title="◆ 第二章"></a>◆ 第二章</h1><h2 id="一：实践在认识中的决定作用"><a href="#一：实践在认识中的决定作用" class="headerlink" title="一：实践在认识中的决定作用"></a>一：实践在认识中的决定作用</h2><p>　　第一，实践产生了认识的需要。第二，实践为认识提供了可能。第三，实践使认识得以产生和发展。第四，实践是检验认识的真理性的唯一标准。</p><h2 id="二：马克思主义认识的本质是什么"><a href="#二：马克思主义认识的本质是什么" class="headerlink" title="二：马克思主义认识的本质是什么"></a>二：马克思主义认识的本质是什么</h2><p>　　认识是主体在实践基础上对客体的能动反映，这是辩证唯物主义认识论对认识本质的科学回答。</p><h2 id="三：运动的基本规律"><a href="#三：运动的基本规律" class="headerlink" title="三：运动的基本规律"></a>三：运动的基本规律</h2><p>　　运动是一个辩证发展过程：从实践到认识；从认识到实践；实践、认识、再实践、再认识，认识运动不断反复和无限发展。</p><h2 id="四：感性认识理性认识辩证关系"><a href="#四：感性认识理性认识辩证关系" class="headerlink" title="四：感性认识理性认识辩证关系"></a>四：感性认识理性认识辩证关系</h2><p>　　首先，理性认识依赖于感性认识，理性认识必须以感性认识为基础。坚持理性认识对感性认识的依赖关系，就是坚持了认识论的唯物论。其次，感性认识有待于发展和深化为理论认识。只有使感性认识上升到到理性认识，才能把握事物的本质，满足实践的需要。坚持了这一点，就是坚持了认识论的辩证法。最后，感性认识和理性认识相互渗透，相互包含，二者的区分是相对的，人们不应当也不可能把它们截然分开。</p><h2 id="五：认识发展的总过程"><a href="#五：认识发展的总过程" class="headerlink" title="五：认识发展的总过程"></a>五：认识发展的总过程</h2><p>　　从实践到认识，再从认识到实践如此实践、认识、再实践、再认识，循环往复以至无穷，一步步地深化和提高，这就是认识发展的总过程。</p><h2 id="六：真理的客观性、绝对性和相对性"><a href="#六：真理的客观性、绝对性和相对性" class="headerlink" title="六：真理的客观性、绝对性和相对性"></a>六：真理的客观性、绝对性和相对性</h2><p>　　客观性：真理具有客观性，凡真理都是客观真理。首先，真理的内容是客观的。其次，检验真理的标准也是客观的<br>　　绝对性：即具有绝对性的真理，是指真理的无条件性，无限性。<br>　　相对性：即具有相对性的真理，是指真理的有条件性，有限性。</p><h2 id="七：实践作为检验认识真理性的标准的确定性和不确定性"><a href="#七：实践作为检验认识真理性的标准的确定性和不确定性" class="headerlink" title="七：实践作为检验认识真理性的标准的确定性和不确定性"></a>七：实践作为检验认识真理性的标准的确定性和不确定性</h2><p>　　实践作为检验认识真理性的标准的确定性即绝对性，是指实践作为检验认识真理性的标准的唯一性，即离开了实践，再也没有另外的标准。<br>　　实践作为检验认识真理性的标准的不确定性即相对性，是指实践对认识真理性的检验的条件性。即任何实践都受到一定具体条件的制约，因而都具有一定的局限。</p><h1 id="◆-第三章"><a href="#◆-第三章" class="headerlink" title="◆ 第三章"></a>◆ 第三章</h1><h2 id="一：社会存在与社会意识及其辨证关系"><a href="#一：社会存在与社会意识及其辨证关系" class="headerlink" title="一：社会存在与社会意识及其辨证关系"></a>一：社会存在与社会意识及其辨证关系</h2><p>　　社会存在:也称社会物质生活条件，是社会生活的物质方面，主要是指物质生活资料的生产及生产方式，也包括地理环境和人口因素。<br>　　社会意识：社会生活的精神方面，是社会存在的反映。<br>　　辨证关系：社会存在和社会意识是辨证统一的。①社会存在决定社会意识，社会存在的性质决定社会意识的性质，社会存在的变化决定社会意识的变化。②社会意识是社会存在的反映，并反作用于社会存在，错误的社会意识会阻碍社会存在的发展，正确的社会意识会促进社会存在的发展。</p><h2 id="二：生产力与生产关系矛盾运动的规律（生产关系一定要适应生产力状况规律）"><a href="#二：生产力与生产关系矛盾运动的规律（生产关系一定要适应生产力状况规律）" class="headerlink" title="二：生产力与生产关系矛盾运动的规律（生产关系一定要适应生产力状况规律）"></a>二：生产力与生产关系矛盾运动的规律（生产关系一定要适应生产力状况规律）</h2><p>　　①生产力决定生产关系，生产力的状况决定生产关系的性质，生产力的发展决定生产关系的变革。②第二，生产关系对生产力具有能动的反作用。即当生产关系适合生产力发展时，它对生产力发展起推动作用；当生产关系不适合生产力发展时，它会阻碍生产力的发展。</p><h2 id="三：经济基础与上层建筑的矛盾运动规律"><a href="#三：经济基础与上层建筑的矛盾运动规律" class="headerlink" title="三：经济基础与上层建筑的矛盾运动规律"></a>三：经济基础与上层建筑的矛盾运动规律</h2><p>　　经济基础与上层建筑是辨证统一的：①经济基础决定上层建筑。②上层建筑对经济基础具有反作用。当上层建筑适合经济基础状况时，它会促进经济基础的巩固和完善;当上层建筑不适合经济基础状况时，它会阻碍经济基础的发展和变革。</p><h2 id="四：人民群众在创造历史过程中的决定性作用"><a href="#四：人民群众在创造历史过程中的决定性作用" class="headerlink" title="四：人民群众在创造历史过程中的决定性作用"></a>四：人民群众在创造历史过程中的决定性作用</h2><p>　　⑴人民群众从质上说是指一切对社会历史发展起推动作用的人们，从量上说是指社会人口的绝大多数。人民群众的最稳定的主体部分始终是从事物质资料生产的劳动群众及其知识分子。<br>　　⑵在社会历史发展过程中，人民群众起着决定性的作用。<br>　　①人民群众是历史的主体，是历史的创造者。②人民群众的社会物质财富的创造者。③人民群众是社会精神财富的创造者。④人民群众是社会变革的决定力量</p><h1 id="◆-第四章"><a href="#◆-第四章" class="headerlink" title="◆ 第四章"></a>◆ 第四章</h1><h2 id="一：资本的原始积累"><a href="#一：资本的原始积累" class="headerlink" title="一：资本的原始积累"></a>一：资本的原始积累</h2><p>　　⑴所谓资本原始积累，就是生产者与生产资料相分离，货币资本迅速集中于少数人手中的历史过程。<br>　　⑵资本原始积累主要是通过两个途径进行的：一是用暴力手段剥夺农民的土地；二是用暴力手段掠夺货币财富。</p><h2 id="二：商品的二因素和生产商品的劳动二重性"><a href="#二：商品的二因素和生产商品的劳动二重性" class="headerlink" title="二：商品的二因素和生产商品的劳动二重性"></a>二：商品的二因素和生产商品的劳动二重性</h2><p>　　⑴商品是用来交换的能满足人们某种需要的劳动产品，具有使用价值和价值两个因素，是使用价值和价值的矛盾统一体。<br>　　⑵ 商品是劳动产品，生产商品的劳动可区分为具体劳动和抽象劳动。</p><h2 id="三：价值量与价值规律"><a href="#三：价值量与价值规律" class="headerlink" title="三：价值量与价值规律"></a>三：价值量与价值规律</h2><p>　　⑴ 价值量是由生产商品所耗费的劳动量决定的，而劳动量则按照劳动时间来计量。决定商品价值量的，不是生产商品的个别劳动时间，而只能是社会必要劳动时间。“社会必要劳动时间是在现有的社会正常的生产条件下，在社会平均的劳动熟练程度和劳动强度下制造某种使用价值所需要的劳动时间。”<br>　　⑵ 商品的价值量由生产商品的社会必要劳动时间决定，商品交换以价值量为基础，按照等价交换的原则进行，形成价值规律。<br>　　⑶ 价值规律的表现形式是，商品的价格围绕商品的价值自发波动。<br>　　⑷ 价值规律的作用表现在：第一，自发地调节生产资料和劳动力在社会各生产部门之间的分配比例。第二，自发地刺激社会生产力的发展。第三，自发地调节社会收入的分配。</p><h2 id="四：私有制基础上商品经济的基本矛盾"><a href="#四：私有制基础上商品经济的基本矛盾" class="headerlink" title="四：私有制基础上商品经济的基本矛盾"></a>四：私有制基础上商品经济的基本矛盾</h2><p>　　⑴ 在私有制为基础的商品经济中，商品生产者的劳动具有两重性：既是具有社会性质的社会劳动，又是具有私人性质的私人劳动。<br>　　⑵ 私人劳动和社会劳动的矛盾构成私有制商品经济的基本矛盾。</p><h2 id="五：劳动力成为商品的基本条件"><a href="#五：劳动力成为商品的基本条件" class="headerlink" title="五：劳动力成为商品的基本条件"></a>五：劳动力成为商品的基本条件</h2><p>　　劳动力成为商品，要具备两个基本条件：第一，劳动者是自由人，能够把自己的劳动力当作自己的商品来支配；第二，劳动者没有别的商品可以出卖，自由得一无所有，没有任何实现自己的劳动力所必需的物质条件。</p><h2 id="六：劳动力商品的特点"><a href="#六：劳动力商品的特点" class="headerlink" title="六：劳动力商品的特点"></a>六：劳动力商品的特点</h2><p>　　劳动力商品在使用价值上有一个很大的特点，就是它的使用价值是价值的源泉，它在消费过程中能够创造新的价值，而且这个新的价值比劳动力本身的价值更大。</p><h2 id="七：剩余价值的生产过程和资本的不同部分在剩余价值生产中的作用"><a href="#七：剩余价值的生产过程和资本的不同部分在剩余价值生产中的作用" class="headerlink" title="七：剩余价值的生产过程和资本的不同部分在剩余价值生产中的作用"></a>七：剩余价值的生产过程和资本的不同部分在剩余价值生产中的作用</h2><p>　　⑴ 雇佣工人的劳动分为两部分：一部分是必要劳动，用于再生产劳动力的价值；另一部分是剩余劳动，用于无偿地为资本家生产剩余价值。因此，剩余价值是雇佣工人所创造的并被资本家无偿占有的超过劳动力价值的那部分价值，它是雇佣工人剩余劳动的凝结，体现了资本家与雇佣工人之间剥削与被剥削的关系。<br>　　⑵ 不变资本是以生产资料形态存在的资本。可变资本是用来购买劳动力的那部分资本。</p><h2 id="八：生产剩余价值的两种基本方法"><a href="#八：生产剩余价值的两种基本方法" class="headerlink" title="八：生产剩余价值的两种基本方法"></a>八：生产剩余价值的两种基本方法</h2><p>　　资本家提高对工人的剥削程度的方法是多种多样的，最基本的方法有两种，即绝对剩余价值的生产和相对剩余价值的生产。绝对剩余价值是指在必要劳动时间不变的条件下，由于延长劳动日的长度而生产的剩余价值。相对剩余价值是指在工作日长度不变的条件下，通过缩短必要劳动时间而相对延长剩余劳动时间生产的剩余价值。</p><h2 id="九：资本积累"><a href="#九：资本积累" class="headerlink" title="九：资本积累"></a>九：资本积累</h2><p>　　⑴ 把剩余价值转化为资本，或者说，剩余价值的资本化，就是资本积累。<br>　　⑵ 由资本的技术构成决定并反映技术构成变化的资本价值构成，叫做资本的有机构成。通常用c∶v来表示。<br>　　⑶ 所谓相对过剩人口，就是劳动力供给超过了资本对它的需要。</p><h2 id="十：资本的循环周转与再生产"><a href="#十：资本的循环周转与再生产" class="headerlink" title="十：资本的循环周转与再生产"></a>十：资本的循环周转与再生产</h2><p>　　⑴ 资本循环是资本从一种形式出发，经过一系列形式的变化，又回到原来出发点的运动。<br>　　⑵ 产业资本在循环过程中要经历三个不同的阶段：第一个阶段是购买阶段，即生产资料与劳动力的购买阶段。在这一阶段，产业资本执行的是货币资本的职能。第二个阶段是生产阶段，即生产资料与劳动力按比例结合在一起从事资本主义生产的阶段。执行的是生产资本的职能。第三个阶段是售卖阶段，即商品资本向货币资本的转化阶段。在此阶段产业资本所执行的是商品资本的职能。<br>　　⑶ 社会再生产的核心问题是社会总产品的实现问题，即社会总产品的价值补偿和实物补偿问题。<br>　　⑷ 在现实的资本主义经济生活中，资本家并不是把剩余价值看作可变资本的产物，而是把它看作全部垫付资本的产物或增加额，剩余价值便取得了利润的形态。</p><h2 id="十一：资本主义基本矛盾"><a href="#十一：资本主义基本矛盾" class="headerlink" title="十一：资本主义基本矛盾"></a>十一：资本主义基本矛盾</h2><p>　　生产资料资本主义私人占有和生产社会化之间的矛盾，是资本主义的基本矛盾。</p><h2 id="十二：经济危机"><a href="#十二：经济危机" class="headerlink" title="十二：经济危机"></a>十二：经济危机</h2><p>　　实质：经济危机的实质或本质是旧的生产力产能过剩与供给过剩，有效需求饱和与不足<br>　　根源：资本主义经济危机爆发的根本原因是资本主义的基本矛盾<br>　　周期性：资本主义经济危机具有周期性，这是由资本主义基本矛盾运动的阶段性决定的。当资本主义基本矛盾达到尖锐化程度时，社会生产结构严重失调，引发了经济危机。</p><h2 id="十三：资本主义政治制度及其本质"><a href="#十三：资本主义政治制度及其本质" class="headerlink" title="十三：资本主义政治制度及其本质"></a>十三：资本主义政治制度及其本质</h2><p>　　本质：作为资产阶级政治统治工具的阶级本质</p><h1 id="◆-第五章"><a href="#◆-第五章" class="headerlink" title="◆ 第五章"></a>◆ 第五章</h1><h2 id="一：垄断"><a href="#一：垄断" class="headerlink" title="一：垄断"></a>一：垄断</h2><p>　　⑴ 所谓垄断，是指少数资本主义大企业，为了获得高额利润，通过相互协议或联合，对一个或几个部门商品的生产、销售和价格，进行操纵和控制。<br>　　⑵ 垄断的产生有以下原因：第一，当生产集中发展到相当高的程度，极少数企业就会联合起来，操纵和控制本部门的生产和销售，实行垄断，以获得高额利润。第二，企业规模巨大，形成对竞争的限制，也会产生垄断。第三，激烈的竞争给竞争各方带来的损失越来越严重，为了避免两败俱伤，企业之间会达成妥协，联合起来，实行垄断。<br>　　⑶垄断条件下竞争的特点<br>　　第一，垄断没有消除产生竞争的经济条件。第二，垄断必须通过竞争来维持。第三，社会生产是复杂多样的，任何垄断组织都不可能把包罗万象的社会生产都包下来。</p><h2 id="二：金融资本与金融寡头"><a href="#二：金融资本与金融寡头" class="headerlink" title="二：金融资本与金融寡头"></a>二：金融资本与金融寡头</h2><p>　　金融资本是由工业垄断资本和银行垄断资本融合在一起而形成的一种垄断资本。<br>　　金融寡头是指操纵国民经济命脉，并在实际上控制国家政权的少数垄断资本家或垄断资本家集团。</p><h2 id="三：国家垄断资本主义的形成及作用"><a href="#三：国家垄断资本主义的形成及作用" class="headerlink" title="三：国家垄断资本主义的形成及作用"></a>三：国家垄断资本主义的形成及作用</h2><p>　　⑴ 国家垄断资本主义是垄断资本主义的新发展，它对资本主义经济的发展产生了积极的作用。首先，国家垄断资本主义的出现在一定程度上有利于社会生产力的发展。再次，通过国家的收入再分配手段，使劳动人民生活水平有所改善和提高。最后，在国家垄断资本主义的参与和干预下，各主要资本主义国家的农业、工业、商业、通讯及交通运输业的现代化水平迅速提高，社会生产和社会生活的面貌改观，加快了这些国家国民经济的现代化进程。<br>　　⑵ 国家垄断资本主义在本质上是资产阶级国家力量同垄断组织力量结合在一起的垄断资本主义。</p><h2 id="四：垄断资本主义的实质"><a href="#四：垄断资本主义的实质" class="headerlink" title="四：垄断资本主义的实质"></a>四：垄断资本主义的实质</h2><p>　　帝国主义的实质，即垄断资本凭借垄断地位，获取高额垄断利润。</p><h2 id="五：经济全球化"><a href="#五：经济全球化" class="headerlink" title="五：经济全球化"></a>五：经济全球化</h2><p>　　⑴ 表现：一是生产的全球化。二是贸易的全球化。三是金融的全球化。四是企业经营的全球化。<br>　　⑵ 后果：经济全球化是一个充满矛盾的进程，它在产生积极效应的同时，也会产生消极的后果。主要表现是：其一，发达国家与发展中国家之间的差距扩大。其二，在经济增长中忽视社会进步，环境恶化与经济全球化有可能同时发生。其三，各国特别是相对落后国家原有的体制、政府领导能力、社会设施、政策体系、价值观念和文化都面临着全球化的冲击，国家内部和国际社会都出现不同程度的治理危机。其四，经济全球化使各国的产业结构调整变成一种全球行为，它既为一国经济竞争力的提高提供了条件，同时也存在着对别国形成依赖的危险。</p><h2 id="六：当代资本主义新变化的实质"><a href="#六：当代资本主义新变化的实质" class="headerlink" title="六：当代资本主义新变化的实质"></a>六：当代资本主义新变化的实质</h2><p>　　首先，当代资本主义发生的变化从根本上说是人类社会发展一般规律和资本主义经济规律作用的结果。其次，当代资本主义发生的变化是在资本主义制度基本框架内的变化，并不意味着资本主义生产关系的根本性质发生了变化。<br>　　七：资本主义的历史地位———过渡的资本主义<br>　　八：资本主义为社会主义所代替的历史必然性<br>　　（一）资本主义的内在矛盾决定了资本主义必然被社会主义所代替<br>　　（二）从资本主义向社会主义过渡是一个长期的历史过程</p><h1 id="◆-第六章"><a href="#◆-第六章" class="headerlink" title="◆ 第六章"></a>◆ 第六章</h1><h2 id="一：无产阶级革命"><a href="#一：无产阶级革命" class="headerlink" title="一：无产阶级革命"></a>一：无产阶级革命</h2><p>　　⑴ 性质：无产阶级革命是迄今人类历史上最广泛、最彻底、最深刻的革命，是不同于以往一切革命的最新类型的革命。这是因为：第一，无产阶级革命是彻底消灭一切私有制、代之以生产资料公有制的革命。第二，无产阶级革命是要彻底消灭一切阶级和阶级统治的革命。第三，无产阶级革命是为绝大多数人谋利益的运动。<br>　　⑵ 从理论上说，无产阶级革命有暴力的与和平的两种形式。</p><h2 id="二：东欧剧变、苏联解体教训"><a href="#二：东欧剧变、苏联解体教训" class="headerlink" title="二：东欧剧变、苏联解体教训"></a>二：东欧剧变、苏联解体教训</h2><p>　　最深刻的教训是：放弃了社会主义道路，放弃了无产阶级专政，放弃了*<strong>的领导地位，放弃了马克思列宁主义，结果使得已经相当严重的经济、政治、社会、**</strong>进一步激化，最终酿成了制度剧变、国家解体的历史悲剧。</p><h2 id="三：社会主义的本质"><a href="#三：社会主义的本质" class="headerlink" title="三：社会主义的本质"></a>三：社会主义的本质</h2><p>　　社会主义的本质，是解放生产力，发展生产力，消灭剥削，消除两极分化，最终达到共同富裕。</p><h2 id="四：必须充分认识经济文化相对落后的国家社会主义建设的艰巨性和长期性"><a href="#四：必须充分认识经济文化相对落后的国家社会主义建设的艰巨性和长期性" class="headerlink" title="四：必须充分认识经济文化相对落后的国家社会主义建设的艰巨性和长期性"></a>四：必须充分认识经济文化相对落后的国家社会主义建设的艰巨性和长期性</h2><p>　　第一，生产力发展状况的制约。第二，经济基础和上层建筑发展状况的制约。第三，国际环境的严峻挑战。第四，马克思主义执政党对社会主义发展道路的探索和对社会主义建设规律的认识，需要一个长期的艰苦的过程。</p><h2 id="五：社会主义在曲折中前进的客观性"><a href="#五：社会主义在曲折中前进的客观性" class="headerlink" title="五：社会主义在曲折中前进的客观性"></a>五：社会主义在曲折中前进的客观性</h2><p>　　第一，社会主义作为新生事物，其成长不会一帆风顺。社会主义的产生和成长，意味着对资本主义旧社会的否定，这就必然要遭到资本主义势力的拼死反抗。社会主义新社会在开始的时候总是比较弱小的，而且在一个相当长的时期里，社会主义和资本主义的矛盾和斗争是不会停止的，时起时伏，有时甚至相当激烈，资本主义还可能会复辟，这就注定社会主义战胜资本主义的过程是一个曲折的发展过程。第二，社会主义社会的基本矛盾推动社会发展，是作为一个过程而展开的，人们对它的认识也有一个逐渐发展的过程。社会主义的基本矛盾推动社会发展，体现了生产关系一定要适合生产力状况的规律、上层建筑一定要适合经济基础状况的规律。由于受主观和客观条件的限制，对社会主义社会基本矛盾运动的规律和社会主义建设规律的认识有一个过程。只有尊重社会主义发展的客观规律，在实践中自觉地运用规律，及时研究新情况、有效地解决前进中出现的矛盾和问题时，社会主义事业才能够顺利地向前发展。</p><h1 id="◆-第七章"><a href="#◆-第七章" class="headerlink" title="◆ 第七章"></a>◆ 第七章</h1><h2 id="一：共产主义社会的基本特征"><a href="#一：共产主义社会的基本特征" class="headerlink" title="一：共产主义社会的基本特征"></a>一：共产主义社会的基本特征</h2><p>　　（一）物质财富极大丰富，消费资料按需分配<br>　　（二）社会关系高度和谐，人们精神境界极大提高<br>　　（三）每个人自由而全面的发展，人类从必然王国向自由王国的飞跃</p><h2 id="二：确理解“两个必然”和“两个决不会”的关系"><a href="#二：确理解“两个必然”和“两个决不会”的关系" class="headerlink" title="二：确理解“两个必然”和“两个决不会”的关系"></a>二：确理解“两个必然”和“两个决不会”的关系</h2><p>　　马克思恩格斯在《***宣言》中提出：“资产阶级的灭亡和无产阶级的胜利是同样不可避免的。”这就是我们常说的资本主义必然灭亡和社会主义必然胜利的“两个必然”（或“两个不可避免”）。后来，马克思在《〈政治经济学批判〉序言》中又提出了“两个决不会”，即：“无论哪一个社会形态，在它所能容纳的全部生产力发挥出来以前，是决不会灭亡的；而新的更高的生产关系，在它的物质存在条件在旧社会的胎胞里成熟以前，是决不会出现的。” “两个必然”和“两个决不会”有着内在的联系，应该结合起来加以理解。<br>　　“两个必然”和“两个决不会”是对资本主义灭亡和共产主义胜利必然性以及这种必然性实现的时间和条件的全面论述。前者讲的是资本主义灭亡和共产主义胜利的客观必然性，是根本的方面；而后者讲的是这种必然性实现的时间和条件，它告诫我们，“两个必然”的实现需要相应的客观条件，而在这个条件具备之前决不会成为现实。<br>　　全面准确地学习和把握“两个必然”和“两个决不会”，既有利于人们坚定资本主义必然灭亡、共产主义必然胜利的信心，同时也有利于人们坚持科学态度，充分尊重客观规律，在当前艰苦的实践中坚定地为共产主义的实现而奋斗。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;◆-绪论&quot;&gt;&lt;a href=&quot;#◆-绪论&quot; class=&quot;headerlink&quot; title=&quot;◆ 绪论&quot;&gt;&lt;/a&gt;◆ 绪论&lt;/h1&gt;&lt;h2 id=&quot;一：马克思主义来源与创新&quot;&gt;&lt;a href=&quot;#一：马克思主义来源与创新&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="马克思主义原理" scheme="https://www.whkblog.work/categories/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="期末复习" scheme="https://www.whkblog.work/tags/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>马克思主义原理期末考试重点</title>
    <link href="https://www.whkblog.work/2021/01/08/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%8E%9F%E7%90%86%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E9%87%8D%E7%82%B9/"/>
    <id>https://www.whkblog.work/2021/01/08/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%8E%9F%E7%90%86%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E9%87%8D%E7%82%B9/</id>
    <published>2021-01-08T12:48:18.000Z</published>
    <updated>2021-01-08T12:57:34.642Z</updated>
    
    <content type="html"><![CDATA[<p>《马克思主义基本原理概论》考试重点</p><p>1、三次起义运动(P6)<br>  1831年、1834年法国里昂工人起义;1836年英国宪章运动;1844年德国西里西亚纺织工人起义。</p><p>2、马克思主义批判地继承、吸收(扬弃)德国古典哲学(主要代表人物:黑格尔、费尔巴哈)、英国古典政治经济学(主要代表人物:威廉·配第、亚当·斯密、大卫·李嘉图)和法国、英国空想社会主义(主要代表人物:昂利·圣西门、沙尔·傅立叶、罗伯特·欧文)。(P8~P9)</p><p>3、两大理论成果(P13)<br>  毛泽东思想和中国特色社会主义理论体系(包括邓小平理论、“三个代表”重要思想、科学发展观)</p><p>4、哲学的基本问题(P29)<br>  ①意识和物质、思维和存在，究竟谁是世界的本原，即物质和精神何者第一性、何者第二性的问题;②思维能否认识或正确认识存在的问题。</p><p>5、哲学的分类(P29)<br>  ①根据哲学基本问题第一方面的回答划分为唯物主义和唯心主义。唯物主义把世界的本原归结为物质，主张物质第一性，意识第二性，意识是物质的产物;唯心主义把世界的本原归结为精神，主张意识第一性，物质第二性，物质是意识的产物。②根据哲学基本问题第二方面的回答划分为可知论和不可知论。可知论认为世界是可以被认识的;不可知论认为世界是不能被人所认识或不能被完全认识的，否定思维和存在的统一。</p><p>6、旧唯物主义哲学(P30)<br>  包括古代朴素唯物主义和形而上学唯物主义。</p><p>7、意识的发展阶段(P31)<br>  一切物质所具有的反应特性→低等生物的刺激感应性→高等动物的感觉和心理→人类的意识。</p><p>8、马克思指出“观念的东西不外是移入人的头脑并在人的头脑中改造过的物质的东西而已。”这表明，物质决定意识，意识依赖于物质并反作用于物质。(P31)</p><p>9、时间和空间(P33)<br>  时间和空间是物质运动的存在形式，物质运动与时间和空间的不可分割证明了时间和空间的客观性。时间是指物质运动的持续性、顺序性，特点是一维性，即一去不复返;空间是指物质运动的广延性、伸张性，特点是三维性。</p><p>10、马克思主义以前的旧唯物主义都是“半截子”唯物主义。因为它们在自然观上是唯物主义，一到社会历史领域，就陷入了唯心主义。(P33)</p><p>11、实践的基本特征及构成实践活动的要素(P35)<br>  基本特征:物质性、自觉能动性、社会历史性。要素:实践主体(人)、实践对象(客体)、实践手段(工具等)。</p><p>12、实践的基本形式(P36)<br>  物质生产实践(人类最基本的实践活动)、社会政治实践、科学文化实践。</p><p>13、为什么说实践是人的存在方式？(P37)<br>  人类的产生、生存和活动，是以实践为基本方式和标志的。①实践是人所独有的活动。②实践集中表现了人的本质的社会性。③实践对物质世界的改造是对象性的活动。</p><p>14、社会生活的实践性主要体现在哪几方面？(P39)<br>  ①实践是社会关系形成的基础。②实践形成了社会生活的基本领域。③实践构成了社会发展的动力。</p><p>15、意识的能动作用及主要表现的方面(P41)<br>  意识能动作用是人的意识所特有的积极反映世界与改造世界的能力和活动。主要表现在:①意识活动具有目的性和计划性。②意识活动具有创造性。③意识具有指导实践改造客观世界的作用。④意识具有指导、控制人的行为和生理活动的作用。</p><p>16、主观能动性与客观规律性的辩证统一(P42)<br>  ①尊重客观规律是发挥主观能动性的前提。②在尊重客观规律的基础上充分发挥主观能动性。人们通过自觉活动能够认识规律和利用规律。自觉能动性是人与动物的重要区别。③尊重事物发展的规律与发挥人的主观能动性是辩证统一的。④实践是客观规律性与主观能动性统一的基础。</p><p>17、如何正确发挥主观能动作用？(P43)<br>  ①从实际出发，努力认识和把握事物的发展规律。②实践是发挥人的主观能动作用的基本途径。③主观能动作用的发挥，还依赖于一定的物质条件和物质手段。</p><p>18、联系的特点(P44)<br>  ①客观性。事物的联系是事物本身所固有的，不是主观臆想的。世界上没有孤立存在的事物，每一种事物都是和其他事物联系而存在的，这是一切事物的客观本性。②普遍性。a.任何事物内部的不同部分和要素都是相互联系的，也就是说，任何事物都具有内在的结构。b.任何事物都不能孤立存在，都同其他事物处于一定的相互联系之中。c.整个世界是相互联系的统一整体。③多样性。直接联系与间接联系，内部联系与外部联系，本质联系与非本质联系，必然联系与偶然联系等。</p><p>19、新生事物不可战胜的原因(P46)<br>  ①就新生事物与环境的关系而言，新事物之所以新，是因为有新的结构和功能，它适应已经变化了的环境和条件;旧事物之所以旧，是因为它的各种要素和功能已不适应环境和客观条件的变化，走向灭亡就成为不可避免的。②就新事物与旧事物的关系而言，新事物是在旧事物的“母体”中孕育成熟的，它既否定了旧事物中消极腐朽的东西，又保留了旧事物中合理的、仍然适合新的条件的因素，并添加了旧事物所不能容纳的新内容。</p><p>20、对立统一规律是唯物辩证法体系的实质和核心的原因(P47)<br>  ①对立统一规律揭示了事物普遍联系的根本内容和永恒发展的内在动力，从根本上回答了事物为什么会发展的问题；②对立统一规律是贯穿质量互变规律、否定之否定规律以及唯物辩证法基本范畴的中心线索，也是理解这些规律和范畴“钥匙”；③对立统一规律提供了人们认识世界和改造世界的根本方法——矛盾分析法。</p><p>21、矛盾的同一性与斗争性的辩证统一关系(P48)<br>  矛盾同一性与斗争性之间是对立统一的辩证关系。①矛盾的同一性和斗争性之间是相互联结、相辅相成、相互制约的。一方面，同一性依赖于斗争性，同一是包含着差别、对立的同一，没有斗争性就没有同一性；另一方面，斗争性寓于同一性之中，斗争是是同一中的斗争，没有同一性，斗争性也不能成立。②同一性与斗争性之间是相对与绝对的关系。斗争性是绝对的、无条件的，同一性是相对的、有条件的，斗争性最终导致同一性的分解，有条件的同一性和无条件的斗争性相结合，推动着事物发展。</p><p>22、矛盾的普遍性和特殊性及其相互关系(P49~P50)<br>  矛盾的普遍性: 矛盾无处不在，无时不有。矛盾存在于一切事物中，存在于一切事物发展过程的始终，旧的矛盾解决了，新的矛盾又产生，事物始终在矛盾中运动。矛盾的特殊性：一是不同事物的矛盾各有其特点；二是同一事物的矛盾在不同发展过程和发展阶段各有特点；三是构成事物的诸多矛盾以及每一矛盾的不同方面各有不同的性质、地位和作用。<br>  矛盾的普遍性和特殊性是辩证统一的关系。矛盾的普遍性即矛盾的共性，矛盾的特殊性即矛盾的个性。矛盾的共性是无条件的、绝对的，矛盾的个性是有条件的、相对的。任何现实存在的事物都是共性和个性的有机统一，共性寓于个性之中，没有离开个性的共性，也没有离开共性的个性。矛盾的共性和个性、绝对和相对的道理，是关于事物矛盾问题的精髓，是正确理解矛盾学说的关键，不懂得它，就不能真正掌握唯物辩证法。矛盾的共性和个性相统一的关系，既是客观事物固有的辩证法，也是科学的认识方法。人的认识的一般规律就是由认识个别上升到认识一般，再由一般到个别的辩证发展过程。</p><p>23、量变和质变的辩证关系(P51)<br>  ①量变是质变的必要准备。任何事物的变化都有一个量变的积累过程，没有量变的积累，质变就不会发生。②质变是量变的必然结果。单纯的量变不会永远持续下去的，量变达到一定程度必然引起质变。③量变和质变是相互渗透的。一方面，在总的两边过程中有阶段性和局部性的部分质变。另一方面，在质变的过程中也有旧质在量上的收缩和新质在量上的扩张。<br>  量变和质变是相互依存、相互贯通的，量变引起质变，在新质的基础上，事物又开始新的量变，如此交替循环，形成事物质量互变的规律性。质量互变规律体现了事物发展的渐进性和飞跃性的统一。</p><p>24、辩证否定观的主要内容(P52)<br>  ①否定是事物的自我否定，是事物内部矛盾运动的结果。②否定是事物发展的环节。它是旧事物向新事物的转变，是从旧质到新质的飞跃。只有经过否定，旧事物才能向新事物转变。③否定是新旧事物联系的环节，新事物孕育产生于旧事物，新旧事物通过否定环节联系起来的。④辩证否定的实质是“扬弃”，即新事物对旧事物既批判又继承，既克服其消极因素又保留其积极因素。</p><p>25、必然性与偶然性的关系(P54)<br>  ①必然性和偶然性是对立的。必然性是事物发展过程中确定不移的趋势，是由事物的根本矛盾决定的，体现事物发展的本质联系和发展前途;偶然性是事物发展过程中不确定的趋势，是由事物的非根本矛盾和外部条件引起的，对事物的发展起加速或延缓作用。②必然性和偶然性又是统一的。a.必然性总是通过大量的偶然现象表现出来，由此为自己开辟道路，没有脱离偶然性的纯粹必然性。b.偶然性是必然性的表现形式和必要补充，偶然性背后隐藏着必然性并受到其制约，没有脱离必然性的纯粹偶然性。c.必然性和偶然性在一定条件下可以相互转化。</p><p>26、主体和客体相互作用的过程(P64)<br>  ①确立实践目的和实践方案。②实践主体按照实践目的和实践方案实际地作用于实践客体，通过一定的实践手段把实践方案变成实践的实践活动。③通过反馈和调节，使实践目的、手段和结果按一定方向运行。</p><p>27、实践在认识中的决定作用(P65)<br>  实践是认识的基础，对实践具有决定作用。①实践产生了认识的需要。②实践为认识提供了可能。③实践使认识得以产生和发展。④实践是检验认识的真理性的唯一标准。</p><p>28、两条根本对立的认识路线(P67)<br>  ①坚持从物到感觉和思想的唯物主义路线。②坚持从思想和感觉到物的唯心主义路线。</p><p>29、主观唯心主义和客观唯心主义(P67)<br>  主观唯心主义认为人的认识是主观自生的，是“内心反省”的结果，是心灵的自由创造物。客观唯心主义认为人的认识是上帝的启示或绝对精神的产物。</p><p>30、辩证唯物主义认识论和旧唯物主义认识论(P67、P68)<br>  ①旧唯物主义的认识论即形而上学唯物主义认识论，把人的认识看成是消极地、被动地反映和接受外界对象。有两个严重缺陷:a.离开实践考察认识问题，因而不了解实践对认识的决定作用。b.不了解认识的辩证性质，离开辩证法来考察认识问题，不能把认识看作是一个不断发展的过程，而认为认识是一次性完成的。②辩证唯物主义认识论认为，认识是主体对客体的能动反映。这种能动反映具有摹写性和创造性。</p><p>31、感性认识和理性认识及其辩证关系(P69、P70)<br>  感性认识：人们在实践基础上，由感觉器官直接感受到的关于事物的现象、事物的外部联系、事物各方面的认识，包括感觉、知觉和表象三种形式。理性认识：指人们借助抽象思维，在概括整理大量感性材料的基础上，达到关于事物的本质、全体、内部联系和事物自身规律性的认识。理性认识包括概念、判断、推理三种形式。辩证关系:①理性认识依赖于感性认识。理性认识必须以感性认识为基础，坚持理性认识对感性认识的依赖关系就是坚持了认识论的唯物论。②感性认识有待于发展和深化为理性认识。只有使感性认识上升到理性认识才能把握住事物的本质，满足实践的需要，坚持这一点就是坚持了认识论的辩证法。③感性认识和理性认识相互渗透、相互包含。感性认识和理性认识是辩证统一的，统一的基础是实践。</p><p>32、从感性认识过渡到理性认识所具备的条件(P70)<br>  ①勇于实践，深入调查，获取十分丰富和合乎实际的感性材料，这是正确实现由感性认识上升到理性认识的基础。②必须经过理性思考的作用，将丰富的感性材料加以去粗取精、去伪存真、由此及彼、由表及里的制作加工，才能将感性认识上升到理性认识。也就是说，必须运用辩证思维的科学方法，才能获得真正的认识。</p><p>33、造成认识过程反复性和无限性的原因(P72)<br>  ①人们对事物的认识，由于主客观条件的限制，往往不是一次完成的。从主观方面说，人们总是受到自己认识能力和实践活动范围的限制。从客观方面说，会受到科学技术条件的限制，以及客观过程的发展和表现程度的限制。②从人们具体的认识过程看，当某一思想、理论、计划、方案等，经过多次反复，在实践中达到预想结果，就算完成了。</p><p>34、实用主义所鼓吹的“有用就是真理”这句话是错误的。这是主观真理论的一个典型，实用主义者把“有用”和“真理”完全等同，从根本上否认了客观真理的存在。(P74)</p><p>35、真理的绝对性和相对性及其关系(P75)<br>  真理的绝对性即具有绝对性的真理，是指真理的无条件性、无限性。真理的相对性即具有相对性的真理，是指真理的有条件性、有限性。任何真理都只能是主管对客观事物近似正确即相对正确的反映。关系:真理的绝对性和相对性是辩证统一的。①具有绝对性的真理和具有相对性的真理是相互渗透和相互包含的。②具有相对性的真理向具有绝对性的真理转化。</p><p>36、价值的特性(P81)<br>  ①客观性。价值关系的各个环节都是客观的。a.人的需要具有客观性。b.用来满足人的需要的对象也具有客观性。c.满足人的需要的过程和结果也具有客观性。②主体性。③社会历史性。④多维性。</p><p>37、价值评价及其特点(P82、P83)<br>  价值评价是一种关于价值现象的认识活动。特点:①评价是以主客体的价值关系为认识对象的。②评价结果与评价主体有直接关系，是依主体的特点而转移的。③评价结果的正确与否依赖于相关的知识性认识。</p><p>38、党的十八大“三个倡导”(P85)<br>  倡导富强、民主、文明、和谐，倡导自由、平等、公正、法治，倡导爱国、敬业、诚信、友善，积极培育和践行社会主义核心价值观。</p><p>39、两种根本对立的历史观(P95、P98)<br>  ①唯物史观。认为:社会历史发展具有自身固有的客观规律；社会存在决定社会意识，社会意识又反作用于社会存在；生产力和生产关系之间的矛盾，经济基础和上层建筑之间的矛盾是推动社会发展的基本矛盾。②唯心史观。认为:社会意识决定社会存在，人们的思想动机是社会发展的根本原因，否认社会发展的客观规律。</p><p>40、社会存在与社会意识及其辩证关系(P96)<br>  社会存在:也称社会物质生活条件，是社会生活的物质方面，它包括地理环境和人口因素和物质资料的生产方式，其中物质资料的生产方式是社会存在的主要方面。社会意识:社会意识是社会生活的精神方面，是社会存在的反映。辩证关系:社会存在决定社会意识，社会意识是对社会存在的反映。社会存在和社会意识是辩证统一的。社会存在决定社会意识，社会意识是社会存在的反映，并反作用于社会存在。①社会存在是社会意识内容的客观来源，社会意识是社会物质生活过程及其条件的主观反映。②社会意识是人们社会物质交往的产物。③随着社会存在的发展，社会意识也相应地或迟或早地发生变化和发展。</p><p>41、社会意识的分类(P96)<br>  社会意识具有复杂的结构。按照社会意识主体的不同，可以区分为个人意识和群体意识；按照社会意识反映层次的高低，可以区分为社会心理和社会意识形式；按照同经济基础关系的不同，可以区分为作为上层建筑的意识形式（社会意识形态）和非上层建筑的意识形式。上层建筑的意识形式（或者说社会意识形态）包括政治法律思想、道德、艺术、宗教、哲学和大部分的社会科学（例如：经济学、政治学、法学、社会学等等）；它们从各自不同方面发挥独特的作用。而非上层建筑的意识形式主要是指自然科学，也包括一部分社会科学和思维科学（例如：语言学、修辞学、逻辑学等等）。在阶级社会中，占统治地位的思想文化，本质上是经济上占统治地位的阶级的意识形态，因而具有鲜明的阶级属性。</p><p>42、社会意识相对独立性的主要表现(P99)<br>  ①社会意识与社会存在发展的不完全同步性和不平衡性。②社会意识的发展具有历史继承性。③社会意识各种内部形式之间的相互影响、相互作用。④社会意识对社会存在的能动的反作用，这是社会意识相对独立性的突出表现。</p><p>43、生产力的基本要素(P101)<br>  ①劳动资料(也称劳动手段)。②劳动对象。③劳动者。</p><p>44、生产力与生产关系的相互关系(P104)<br>  生产力决定生产关系，生产关系对生产力有反作用。①生产力决定生产关系:a.生产力状况决定生产关系的性质，有什么样的生产力，就会产生什么样的生产关系；b.生产力的发展决定生产关系的发展和变革。②生产关系对生产力具有能动的反作用:a.当生产关系与生产力的发展要求相适合时，它会有力地推动生产力的发展；b.当生产关系与生产力的发展要求不相适合时，它会阻碍甚至破坏生产力的发展。</p><p>45、经济基础和上层建筑的矛盾运动(P108)<br>  经济基础与上层建筑是辩证统一的。①经济基础决定上层建筑。经济基础是上层建筑赖以产生、存在和发展的物质基础，上层建筑是经济基础得以确立统治地位并巩固和发展不可缺少的政治、思想条件。任何上层建筑的产生、存在和发展，都能直接或间接地从社会的经济结构中得到说明。经济基础的性质决定上层建筑的性质，有什么样的经济基础就有什么样的上层建筑。经济基础的变更必然引起上层建筑的变革，并决定着其变革的方向。②上层建筑对经济基础具有反作用。集中表现在:为自己的经济基础的形成和巩固服务，确立或维护其在社会中的统治地位。上层建筑这种反作用的后果可能有两种:当它为适合生产力发展要求的经济基础服务时，就成为推动社会发展的进步力量;反之，就会成为阻碍社会发展的消极力量。</p><p>46、社会形态的分类(P110)<br>  ①经济形态(基础)。②政治形态。③意识形态。</p><p>47、社会历史发展的动力(P113)<br>  ①根本动力:社会基本矛盾(生产力和生产关系、经济基础和上层建筑的矛盾)。②直接动力:阶级斗争。③重要动力:革命、改革、科学技术。</p><p>48、群众观点与群众路线(P133)<br>  群众观点:人民群众至上。坚信人民群众自己解放自己;全心全意为人民服务;一切向人民群众负责;虚心向群众学习。 群众路线:一切为了群众，一切依靠群众，从群众中来，到群众中去。</p><p>49、试用物质和意识的辩证关系原理，说明我国的现代化建设必须走自己的路，建设中国特色的社会主义。<br>  答:①物质和意识的辩证关系是：物质第一性，意识第二性，先有物质，后有意识。物质决定意识，意识是物质的反应，意识对物质具有能动的反作用，正确的意识对事物的发展起足进作用，错误的意识对事物的发展起阻碍作用。这一原理要求我们在实际工作要坚持一切从实际出发，实事求是。②我国的社会主义现代化建设，必须从中国的客观实际出发，从中国的国情，国力和基本特点出发。我国当前乃至今后相当长一段时期处于社会主义初级阶段是我国的基本国情，是我国当前的最大实际，是我们党制定路线，方针和政策的客观依据。我国的现代化建设必须从这一基本国情出发，把马克思主义的基本原理同中国的实际紧密结合起来。建设中国特色的这会注义。③在现代化建设过程中，必须会遇到需多新情况、新问题。这就要求我们从实际出发，尊重客观规律，不断开创现代化建设的新局面。必须反对从主观愿望和书本教条出发，反对照搬照抄他人的检验和模式。</p><p>50、试用矛盾的普遍性和特殊性的辩证关系原理，说明坚持中国特色社会主义道路的重要性。<br>  答:①矛盾的普遍性是指矛盾存在于一切事物的发展过程中，存在于一切事物发展过程的始终。矛盾的特殊性是指具体事物的矛盾及每一矛盾的各个方面都有其特点。②矛盾的普遍性和特殊性是辩证的统一。第一，矛盾的普遍性和特殊性是相互联结的。普遍性存在于特殊性之中，特殊性中包含着普遍性。第二，矛盾的普遍性和特殊性在一定条件下可能相互转化。③矛盾的普遍性和特殊性辩证统一的原理，是把马克思主义普遍真理与中国的具体实际相结合，走建设有中国特色社会主义道路的重要理论依据。④我们既要坚持社会主义的根本制度和基本原则，又必须注意中国的特点，从中国正处于并将长期处于社会主义初级阶段这一实际出发，走自己的路。只有这样，才能把建设有中国特色社会主义事业推向前进。</p><p>51、用认识和实践的关系原理，说明科学发展观对中国特色社会主义建设的重要意义。<br>  答:①认识是实践的基础，实践对认识起决定作用。实践是认识的来源、动力、检验标准和目的。理论一经形成对实践有能动作用，主要表现在:正确的认识和理论可以指导实践指向适当的对象，采取正确的方法，从而取得成功。错误的认识和理论，会引导实践指向不适当的对象，采取错误的方法，从而导致失败。②科学发展观是马克思主义关于发展世界观和方法论的集中体现，是我国经济社会发展的重要指导方针。它进一步正确地回答了实现什么样的发展、怎样发展的问题，体现了我们党对执政规律、社会主义建设规律和人类社会发展规律认识的进一步深化。③科学发展观能够指导我国经济社会实现又快又好的发展，解决发展中的不平衡、不协调问题，为我国经济社会发展指明了正确的方向。④认真学习全面领会科学发展观，才能真正坚持贯彻科学发展观。</p><p>52、用真理的绝对性和相对性的辩证关系原理，说明对待马克思主义的正确态度。<br>  答:①真理的绝对性和相对性的关系:首先，两者相互对立、相互区别;绝对真理是指真理的内容是客观的，人类的认识按其本性是能够正确反映无限发展着的物质世界。相对真理是指真理只是对客观事物一定范围的正确反映，是对事物一定程度、一定层次的近似正确的反映。其次，两者相互依存、相互渗透。相对真理中包含着绝对真理的成分，绝对真理是由无数相对真理构成的。再次，人类的认识永远处在从相对真理向绝对真理的转化过程中。②马克思主义作为科学真理，是绝对性和相对性的统一。马克思主义是关于自然、社会和思维发展的普遍规律的科学，它的基本原理经过实践的反复检验、证明，对各国的革命和建设具有普遍的指导意义，这是无条件的、绝对的。马克思主义没有穷尽一切真理，必将随着科技的进步和实践的发展而前进，这又是其相对性。对待马克思主义的科学态度关键在于正确处理好坚持和发展马克思主义的关系，即既要坚持，又要发展，在坚持中发展，在发展中坚持。③割裂真理的绝对性和相对性的关系会导致真理问题上的绝对主义或相对主义。在实际工作中要反对片面夸大马克思主义的绝对性、否认其相对性的教条主义、本本主义的错误，又要反对片面夸大其相对性、否认其绝对性的所谓马克思主义“过时论”、“无用论”的错误。</p><p>53、试述社会意识相对独立的原理并用以说明加强社会主义精神文明建设的重要性。<br>  答:(1)社会存在决定社会意识，社会意识是社会存在的反映，因此，它没有绝对独立性，只具有相对独立性。社会意识相对独立性的表现：①社会意识对社会存在有巨大的能动的反作用：先进的社会意识对社会存在的发展起着促进和推动的作用，落后反动的社会意识阻碍社会存在的发展。②社会意识和社会存在变化和发展的不完全同步性：社会意识的变化有时落后于社会存在的变化；先进的社会意识在不同程度上预见社会存在变化发展的趋势和未来。③社会意识同社会经济发展水平的不平衡性：经济上先进的国家，意识形态的发展却可能落后；经济上落后的国家，意识形态发展可能先进。④社会意识各种形式之间能互相作用，其中政治思想居于主导地位，对其他意识形式有巨大影响。⑤社会意识具有历史继承性，后人总要继承前人的思想材料，并加以改造和发展。(2)重要性：①社会主义精神文明建设，是实现社会主义现代化的战略任务，它能推动社会主义社会存在的发展。它为社会主义生产方式、经济制度的发展提供了精神动力和智力支持及思想保证，也是改革开放和实现社会主义现代化的根本保证。②社会主义精神文明建设又是抵制封建主义、资产阶级腐朽思想的重要武器，是反对资产阶级自由化的重要武器。③社会主义精神文明建设不仅关系到我国社会主义方向和道路，而且是关系到我国整个社会生活的精神面貌的大问题。因此，搞好它是极为重要的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;《马克思主义基本原理概论》考试重点&lt;/p&gt;
&lt;p&gt;1、三次起义运动(P6)&lt;br&gt;  1831年、1834年法国里昂工人起义;1836年英国宪章运动;1844年德国西里西亚纺织工人起义。&lt;/p&gt;
&lt;p&gt;2、马克思主义批判地继承、吸收(扬弃)德国古典哲学(主要代表人物:黑格尔</summary>
      
    
    
    
    <category term="马克思主义原理" scheme="https://www.whkblog.work/categories/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="期末复习" scheme="https://www.whkblog.work/tags/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>数据科学概论考试知识点</title>
    <link href="https://www.whkblog.work/2021/01/04/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%A6%82%E8%AE%BA%E8%80%83%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://www.whkblog.work/2021/01/04/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%A6%82%E8%AE%BA%E8%80%83%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2021-01-04T07:55:11.000Z</published>
    <updated>2021-01-08T08:34:25.077Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a><strong><strong>第一章</strong></strong></h3><p><em>数据科学定义</em></p><p>定义：数据科学是关于对与数据进行分析、抽取信息和知识的过程提供指导合作支持的基本原则方法科学</p><p>​            数据科学的核心任务是从数据中从获取信息、发现知识。数据科学包含一组概念、原则、过程、技能/方法以及工具，为其核心任务为服务</p><p>​            简而言之，数据科学是以各类数据作为研究对象的，建立在在应对分析挑战的众多关键技术基础上的通识意义上的科学</p><p>大数据的三个主要特点： 数据量大、数据类型多、数据生成快、价值密度低</p><p><em>数据科学的基本原则：</em></p><p>​    1、数据分析可以划分成一系列的明确阶段</p><p>​    2、描述性与预测分析</p><p>​    3、实体的相似度</p><p>​    4、模型泛化能力</p><p>​    5、分析结果的评估与特定的应用场景有关</p><p>​    6、相关性不同于因果关系</p><p>​    7、通过并行处理提高数据处理（分析）速度</p><p>数据处理的流程：</p><p>1、数据采集<br>2、数据表示和储存<br>3、数据清洗<br>4、数据集成<br>5、数据分析<br>6、数据可视化<br>7、基于数据的决策</p><hr><p>​    </p><h3 id="第二章-OLTP与数据服务"><a href="#第二章-OLTP与数据服务" class="headerlink" title="第二章    OLTP与数据服务"></a>第二章    OLTP与数据服务</h3><p>数据服务是指面向操作型业务，提供数据的增加、删除、修改以及简单的查询功能（增删改查）</p><p>联机事务处理（OLTP）指的是用户的业务请求转化成数据库的操作，传送到后台数据库管理系统，数据库管理系统在很短的时间内，把用户的相关数据操作当作一个事务来处理，对用户的请求进行响应</p><p>联机事务处理的两个特点：一个是用户请求作为一个事务进行处理，另一个是响应时间短</p><h4 id="ACID事务特性："><a href="#ACID事务特性：" class="headerlink" title="ACID事务特性："></a><em>ACID事务特性</em>：</h4><p>A：原子性，指的是事务的所有操作，要么全部执行，要么都没有执行</p><p>​    C：一致性，值的是事务把数据库状态，从一个有效状态转化为另一个新的有效状态</p><p>​    I：隔离性，是指在一个并发的事务处理系统中和其他事务是相互隔离的，事务的各个操作步骤可以交替执行，但必须和保        证某个未提交的事务和其他事务时相互隔离的，目的是保证未提交的数据，别的事物不能看到</p><p>​    D：指的时提交的数据的必须保存起来，当系统失败和重启，数据能够恢复到最近的正确后状态</p><p>数据安全性保证的主要技术手段： 用户认证和授权、审计和数据加密等</p><p>关系模型的完整性包括实体完整性、参照完整性、用户自定义完整性</p><h4 id="NoSQL数据"><a href="#NoSQL数据" class="headerlink" title="NoSQL数据"></a><em>NoSQL数据</em></h4><p>​    Not only SQL ,是某一类数据库的统称</p><p>​    主要特点：采用和关系模型不同的数据模型，采取了一些新的设计原则，目的是利用大型计算机集群实现大数据的有效处                        理</p><p>​                        新原则：1、采用横向扩展方式应对大数据挑战；2、放弃严格的ACID一致性约束，允许数据暂时出现不一致，接受最终一致性；</p><p>​                                        3、对数据的储存进行容错处理，一般对数据块进行适当的备份</p><h4 id="CAP理论："><a href="#CAP理论：" class="headerlink" title="CAP理论："></a>CAP理论：</h4><p>在大型分布式数据库中，一致性、系统可用性、网络分区容忍性这三个目标中，只可以获得其中两个，追求其中两个将损害另外一个的目标</p><p>​    </p><p>NoSQL的四种数据库类型<br>| 四种类型            | 代表                |<br>| ——————- | ——————- |<br>| Key-Value数据库     | Dynamo数据库、Redis |<br>| Column Family数据库 | Big Table、HBase、  |<br>| Document数据库      | MongoDB             |<br>| Graph数据库         | Neo4J               |</p><p>NewSQL没怎讲，不搞了</p><h4 id="分布式数据库"><a href="#分布式数据库" class="headerlink" title="分布式数据库"></a>分布式数据库</h4><p>   定义：所谓分布式数据库，它运行在多台计算机上，这些计算机通过网络互联。每台计算机可以放在一个地方，每台计算机安装独立的RDBMS系统，拥有数据的完整拷贝，或者部分拷贝。这些计算机系统共同组成一个完整的、逻辑上集中、但是物理上分布的大型数据库。</p><hr><h3 id="第三章-OLAP-与结构化数据"><a href="#第三章-OLAP-与结构化数据" class="headerlink" title="第三章   OLAP 与结构化数据"></a>第三章   OLAP 与结构化数据</h3><p>联机分析处理（OLAP）：是在以星型模型（或雪花模型）建立的数据仓库上进行多维分析</p><p>结构化数据分析： 是一个更为广泛的概念，它运行在结构化数据上，分析可以表达成一个SQL聚集查询</p><p>数据仓库与星型模型，BILL Inmon认为数据仓库是面向主题的、集成的、非易失的和时变的数据集合，用以支持管理决策</p><p>数据仓库一般不对应到某个厂商的具体产品，而是指一种面向对象的数据分析储存方案</p><p>联机分析处理的主要操作：下钻、上卷、切片、切块、旋转等</p><p>​                                            下钻和上卷是改变维的层次；切片和切块是选定一部风维度值，然后查看度量数据剩余维度上的分布情况；旋转操作时改变维的方向</p><p>三种类型的OLAP系统：多维OLAP（MOLAP)、关系OLAP(ROLAP)、混合OLAP(HOLAP)；</p><p>​                                        MOLAP优点性能高，缺点是占用大量的空间保存汇总数据</p><p>​                                        ROLAP优点利用关系数据库保存原始明细数据，占用空间有限，但性能有限</p><p>​                                        HOLAP是两者的集合，HOLAP的查询效率比ROLAP高，比MOLAP低</p><p>高性能OALP系统的三种实现技术</p><p>​    列储存技术<br>​            </p><p>​    位图索引技术</p><p>​    内存数据库技术</p><hr><h3 id="第四章-数据清洗与数据集成"><a href="#第四章-数据清洗与数据集成" class="headerlink" title="第四章  数据清洗与数据集成"></a>第四章  数据清洗与数据集成</h3><p>ETL (Extract、Tansform and Load) : 数据抽取，转换和装载</p><p>数据集成是从多个数据源建立统一的数据视图的一种技术</p><p>数据清洗是一种消除数据里面错误、去掉重复数据的技术</p><h4 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h4><p>​    数据清洗的意义：剔除数据中的错误，以便获得高质量的数据，基于高质量的数据分析才能获得可信的分析结果，进而做出正确的决策</p><p>​    数据异常的不同类型：</p><p>​        1、语法类异常：词法错误、值域格式错误、不规则的取值</p><p>​        2、语意类异常：违反完整性约束规则、数据中出现矛盾、数据重复</p><p>​        3、覆盖类异常：值缺失、元组缺失</p><h4 id="数据质量："><a href="#数据质量：" class="headerlink" title="数据质量："></a>数据质量：</h4><p>​            数据质量的评价标准：完整的评价标准是子评价标准的综合加权评分</p><p>​                                1、正确性：完整性、一致性（可继续划分为模式符合性和统一性）、密度</p><p>​                                2、唯一性</p><p>​            数据清洗的任务和过程</p><p>​                                任务：剔除数据里的异常，使得数据集成为现实世界的准确、没有重复的表示过程</p><p>​                                            主要操作：1、对元组及其各个属性的格式进行调整。<br>2、完整性约束条件的检查和实施。3、从已知值中导出缺失值。4、检测离群值</p><p>​                                过程：</p><p>​                                            数据审计—&gt;选择合适的方法—&gt;执行方法—&gt;后序处理和控制</p><p>​            数据清洗的具体方法：</p><p>​                            1、数据解析<br>数据解析的目的是检测语法错误</p><p>​                            2、数据转换<br>数据转换的目的是把数据从一个格式映射到另外一种格式，以适应程序的需要。在实例层面一般采取标准化和规范化方法，提出数据的不规则性</p><p>​                            3、实施完整性约束条件</p><p>​                            4、重复数据消除</p><p>​                            5、一些统计方法</p><h4 id="数据集成："><a href="#数据集成：" class="headerlink" title="数据集成："></a>数据集成：</h4><p>​            数据集成是指把数据从多个数据源整合在一起，提供一个观察这些数据统一视图的过程、</p><p>​            数据集成分为物理式数据集成、虚拟式数据集成两类</p><p>​            数据集成需要解决的问题——异构性：管理系统的异构性、通信协议异构性、数据模式异构性、数据类型异构性、</p><p>​            数据集成的三种模式：建立数据仓库、联邦数据库模式、中介者模式</p><hr><h3 id="第五章-数据的深度分析（数据挖掘、机器学习）"><a href="#第五章-数据的深度分析（数据挖掘、机器学习）" class="headerlink" title="第五章  数据的深度分析（数据挖掘、机器学习）"></a>第五章  数据的深度分析（数据挖掘、机器学习）</h3><p>广义上而言，机器学习是一种能够赋予机器学习的能力，让它完成直接编程无法完成的功能的方法。</p><p>机器学习的目的是：是预测（包括分类和回归）</p><p>特征选择算法（书上出现的）：</p><p>互信息、文档频率、信息增益、卡方检验</p><p>机器学习的基本过程是利用训练数据（包含输入数据和预期输出的分类或者数值）训练一个模型，利用这个模型，就可以对新的实例数据进行分类和计算一个预测</p><p>机器学习的方法可以分为：监督学习、无监督学习、半监督学习</p><p>​        监督学习：是机器学习的一种类别，训练数据由输入特征（Feature）和预期的输出构成，输出可以是一个连续的值，或者是一个分类的标签。</p><p>​        无监督学习：与监督学习的区别就是没有训练样本，直接对数据建模。</p><p>​        半监督学习：是监督学习和无监督学习的结合，它研究利用少量的标注样本和大量未标注的样本进行训练和预测问题。半监督学习分为半监督分类，半监督回                                归，半监督聚类，半监督降维算法</p><h4 id="主流机器学习算法"><a href="#主流机器学习算法" class="headerlink" title="主流机器学习算法"></a>主流机器学习算法</h4><p>决策树、<strong>聚类算法K-means</strong>、SVM、关联规则分析Apriori算法、EM算法、协同过滤推荐算法、<strong>朴素贝叶斯算法</strong></p><hr><h3 id="第六章-流数据处理"><a href="#第六章-流数据处理" class="headerlink" title="第六章  流数据处理"></a>第六章  流数据处理</h3><h4 id="流数据处理应用"><a href="#流数据处理应用" class="headerlink" title="流数据处理应用"></a>流数据处理应用</h4><p>​                网络监控、电信数据管理、工业制造、传感器网络、电子商务、量化交易等</p><h4 id="流式处理和批处理的区别"><a href="#流式处理和批处理的区别" class="headerlink" title="流式处理和批处理的区别"></a>流式处理和批处理的区别</h4><p>​                流式处理时针对批处理来讲的</p><p>流式处理（Stream Processing） 是针对 批处理（Batch Processing）来讲的，即它们是两种截然不同的数据处理模式，具有不同的特点，适用于不同的应用场合。不能简单地认为其中一种数据处理模式优于另一种数据处理模式。</p><p>对于批处理来讲，首先数据被不断地采集，保存到数据库中，然后进行分析处理（包括SQL查询）。批处理适用于对大量数据（High Volume）进行处理的场合。人们需要等到整个分析处理任务完成，才能获得最终结果。由于需要处理的数据集大小以及计算机系统的计算能力的差异，整个过程有时需要耗费相当长的时间，即获得最终分析处理结果的延迟较大。批处理是最通用的数据处理模式。传统的关系数据库系统、Hadoop以及Spark大数据处理平台等，都采用了这样的数据处理模式，或者以该处理模式为主。由于需要完整地保存整个数据集，并且在上面进行分析处理，比起流式数据处理系统，人们需要投入更多的硬件资源。</p><p>批处理系统可以存取已经入库的所有数据，人们可以对数据进行复杂深入的分析，分析处理的延迟以分钟或者小时计。批处理作业（Job）一旦提交，则一直运行，直到获得最终结果或者失败退出，无需用户人工干预。这些作业在整个数据集或者某个子集上执行一系列的分析，产生分析结果。在性能方面，批处理系统主要考虑系统的吞吐能力，而不是单个分析处理任务的处理延迟（Latency）。</p><p>在流式数据处理模式里，数据持续到达，系统及时处理新到达的数据，并不断产生输出。处理过的数据一般丢弃掉，当然也可以保存起来。流式数据处理模式强调数据处理的速度（Velocity）。部分原因是数据产生的速度很快，需要及时进行处理。由于流式数据处理系统能够对新到达的数据进行及时的处理，所以它能够给决策者提供最新的事物发展变化的趋势，以便对突发事件进行及时响应，调整应对措施。</p><h4 id="查询处理的基础算法"><a href="#查询处理的基础算法" class="headerlink" title="查询处理的基础算法"></a>查询处理的基础算法</h4><p>​    随机采样、梗概技术、直方图、小波分析、布隆过滤器、计数最小梗概</p><p>流数据处理系统     Storm</p><hr><h3 id="第七章-文本分析"><a href="#第七章-文本分析" class="headerlink" title="第七章 文本分析"></a>第七章 文本分析</h3><h4 id="文本分析的意义："><a href="#文本分析的意义：" class="headerlink" title="文本分析的意义："></a>文本分析的意义：</h4><p>深入了解非结构化数据，帮助企业或个人对产品和服务做出改进</p><h4 id="文本分析的过程"><a href="#文本分析的过程" class="headerlink" title="文本分析的过程"></a>文本分析的过程</h4><p>1、采集文本数据。2、运用文本分析方法分析文本。3、对分析结果进行可视化以及解释和评估分析结果等。</p><h4 id="文本分析的任务和方法"><a href="#文本分析的任务和方法" class="headerlink" title="文本分析的任务和方法"></a>文本分析的任务和方法</h4><p>句子切分、分词、词性标注、语法分析</p><p>​        切分和分词 ，对于文本进行分析需要将文本切分为一个一个的句子，完成该功能的软件是语句切分器</p><p>​        词性标注</p><p>​        语法树  1、概率型上下文无关语法分析激素。2、位移归约语法分析技术。3、基于神经网络的语法分析技术</p><h4 id="文本聚类的几种方法"><a href="#文本聚类的几种方法" class="headerlink" title="文本聚类的几种方法"></a>文本聚类的几种方法</h4><p>1、基于距离的聚类算法。2、基于单词或者短语的聚类算法。3、基于话题建模技术的概率聚类算法。</p><hr><h3 id="第十章-数据可视化、可视分析与探索十数据分析"><a href="#第十章-数据可视化、可视分析与探索十数据分析" class="headerlink" title="第十章 数据可视化、可视分析与探索十数据分析"></a>第十章 数据可视化、可视分析与探索十数据分析</h3><h4 id="什么是什么可视化"><a href="#什么是什么可视化" class="headerlink" title="什么是什么可视化"></a>什么是什么可视化</h4><p>可视化是一种数据的可视表现形式以及交互技术的总称。它通过图形化的方式把数据表现出来，方便用户进行观察和理解，并且帮助用户对数据进行探索，发现数据里隐藏的模式，获得对大量数据的理解和洞察力</p><h4 id="可视化分析技术"><a href="#可视化分析技术" class="headerlink" title="可视化分析技术"></a>可视化分析技术</h4><p>1、数据：数据是所有可视化分析的基础</p><p>2、模型：可以是某个方面的属性的统计值，也可以是复杂的数据挖掘和机器学习算法</p><p>3、可视化：结果一般依据模型的分析结果进行绘制</p><p>4、探索回路：描述的是分析者如何和可视分析系统进行交互，目的是生成新的可视化结果或者调整模型；它涉及两个方面，即动作和发现</p><p>5、验证回路 ：（1）假设 （2）理解和洞察力，洞察里定义为分析者对于上述的法相如何进行解释。在解释过程中，需要用到领域的先验知识</p><p>6、产生知识回路</p><hr><h3 id="第十一章-云计算平台"><a href="#第十一章-云计算平台" class="headerlink" title="第十一章 云计算平台"></a>第十一章 云计算平台</h3><h4 id="云计算的概念与特点"><a href="#云计算的概念与特点" class="headerlink" title="云计算的概念与特点"></a>云计算的概念与特点</h4><p>​    概念：云计算也称为按需计算，它是对可配置的共享的计算资源池提供安迅存取的一种计算模型，这里的资源包括计算、储存、网络等硬件资源</p><p>​    特点：虚拟化、弹性、成本低廉、高度容错性和高度可靠性</p><p>​    云计算与并行计算、分布式计算、集群计算、网格计算的区别于联系：</p><p>​            并行计算是相对串行计算而言，可以分为时间上和空间上的并行。</p><p>​            分布式计算通过把整个计算任务分解成一些列的小任务，分布到各个结点上计算分别执行，最后汇总结果。获得最终结果。</p><p>​            集群计算通过高速网络把一组本来松散联系的结点（计算机）通过软件紧密联系在一起，协作完成计算工作</p><p>​            网格计算在本章中算作集群计算的一种</p><p>​            云计算是上述技术的发展新阶段，器底层的核心技术是虚拟化，即把计算、储存、网络等硬件都进行虚拟化。</p><p>​            云计算强调子要你的利用率</p><h4 id="虚拟化技术与数据中心"><a href="#虚拟化技术与数据中心" class="headerlink" title="虚拟化技术与数据中心"></a>虚拟化技术与数据中心</h4><p>虚拟化技术包括服务器虚拟化，储存虚拟化和网络虚拟化等重要内容</p><h5 id="服务器虚拟化"><a href="#服务器虚拟化" class="headerlink" title="服务器虚拟化"></a>服务器虚拟化</h5><p>​    指把一台物理服务器虚拟成若干独立的逻辑服务器，各个逻辑夫妻拥有自己的CPU,内存以及I/O设备。</p><p>​    储存虚拟化分为两种：寄居虚拟化以及裸机虚拟化（通俗而言，前者就是，在一个已经安装了操作系统的机器上安装VMM，后者则是直接在未安装操作系统的    机器上安装VMM，后者为轻量级）</p><p>​    </p><h5 id="储存虚拟化"><a href="#储存虚拟化" class="headerlink" title="储存虚拟化"></a>储存虚拟化</h5><p>​    目的是把分散的、异构的储存设备，想办法映射成一个统一的、连续编址的逻辑储存空间，也叫虚拟存储池</p><p>​    三种实现方式：基于主机的存储虚拟化，基于储存设备的虚拟化、基于网络的储存虚拟化</p><h5 id="网络虚拟化"><a href="#网络虚拟化" class="headerlink" title="网络虚拟化"></a>网络虚拟化</h5><p>​    网络虚拟化在不改变数据中心网络的物理拓扑和布线情况下，可以虚拟出各层网络，并实现互联，形成统一的交换架构。</p><p>​    网络虚拟化包括核心层、接入层以及虚拟机网络化三个层次</p><h5 id="数据中心"><a href="#数据中心" class="headerlink" title="数据中心"></a>数据中心</h5><p>​    数据中心主要特点和优势：通过服务器虚拟化、储存虚拟化、网络虚拟化、应用虚拟化技术，把各种硬件资源整合，对外提供服务，提高设备利用率。</p><p>​    数据中心一般采用冗余、容错、容灾设计</p><hr><h3 id="第十二章-Hadoop"><a href="#第十二章-Hadoop" class="headerlink" title="第十二章 Hadoop"></a>第十二章 Hadoop</h3><h4 id="两个版本之间的区别与联系"><a href="#两个版本之间的区别与联系" class="headerlink" title="两个版本之间的区别与联系"></a>两个版本之间的区别与联系</h4><h5 id="1-0版本的优势与局限："><a href="#1-0版本的优势与局限：" class="headerlink" title="1.0版本的优势与局限："></a>1.0版本的优势与局限：</h5><p>​        优势是它的可拓展性。</p><p>​        局限是：1、仅支持一种计算模型，即MapReduce。2、MapReduce作业的Map阶段和Reduce阶段执行过程中需要通过磁盘的存取操作进行，效率低下。</p><p>​                        3、调度方法远未达到优化资源利用率的效果</p><h5 id="2-0版本的不同"><a href="#2-0版本的不同" class="headerlink" title="2.0版本的不同"></a>2.0版本的不同</h5><p>​        新增YARN模块，将1.0中的resource management部分拿出来作为YARN的内容单独（把资源管理功能单独划分出来）。</p><p>​        支持更多的计算模型，包括流数据处理、图数据处理、批处理、交互式处理</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;&lt;strong&gt;&lt;strong&gt;第一章&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;em&gt;数据科学定义&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;定义：数据科学是关</summary>
      
    
    
    
    <category term="数据科学概论" scheme="https://www.whkblog.work/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%A6%82%E8%AE%BA/"/>
    
    
    <category term="期末复习" scheme="https://www.whkblog.work/tags/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>begin</title>
    <link href="https://www.whkblog.work/2021/01/02/begin/"/>
    <id>https://www.whkblog.work/2021/01/02/begin/</id>
    <published>2021-01-02T09:18:22.000Z</published>
    <updated>2021-04-01T01:01:49.284Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../blog/images/begin-1617238888146.jpg" alt="begin"></p><p>这是我在上次丢失文件后再次创建的个人博客，也没有啥说的吧<br>就算是个新的开始吧；然后博客还没搞好，先凑合一下吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;../blog/images/begin-1617238888146.jpg&quot; alt=&quot;begin&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是我在上次丢失文件后再次创建的个人博客，也没有啥说的吧&lt;br&gt;就算是个新的开始吧；然后博客还没搞好，先凑合一下吧&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="闲话" scheme="https://www.whkblog.work/tags/%E9%97%B2%E8%AF%9D/"/>
    
  </entry>
  
</feed>
