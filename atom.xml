<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>whks-blog</title>
  
  
  <link href="https://www.whkblog.work/atom.xml" rel="self"/>
  
  <link href="https://www.whkblog.work/"/>
  <updated>2022-08-29T13:27:25.176Z</updated>
  <id>https://www.whkblog.work/</id>
  
  <author>
    <name>whk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis-learn</title>
    <link href="https://www.whkblog.work/2022/08/28/redis-learn/"/>
    <id>https://www.whkblog.work/2022/08/28/redis-learn/</id>
    <published>2022-08-28T07:06:35.000Z</published>
    <updated>2022-08-29T13:27:25.176Z</updated>
    
    <content type="html"><![CDATA[<p>This is a note to record the learning Redis</p><h1 id="What-is-Redis？"><a href="#What-is-Redis？" class="headerlink" title="What is Redis？"></a>What is Redis？</h1><p>Redis is a NoSQL Database,using the key-value storage system,it’s one of the most popular and open source database</p><p><em>tips: In this note I’ll using the docker  to learn and practise the Redis</em></p><p>Redis supports many data types such as: int,set,etc. it’s support the persistence</p><p>Redis is a single thread + multiple IO multiplexing technology,in this way</p><h1 id="Install-the-Redis-in-docker"><a href="#Install-the-Redis-in-docker" class="headerlink" title="Install the Redis in docker"></a>Install the Redis in docker</h1><p>before create an container of Redis, we should install the Docker in our operate system.</p><p>I’m using Manjaro ,so it’s very easy to install, you need four steps altogether.</p><ul><li><p>step one:  install</p><ul><li><code>sudo pacman -S docker</code> maybe someone is -Sy</li></ul></li><li><p>step two:  add the docker as system service</p><ul><li><code>sudo systemctl start docker.service</code></li></ul></li><li><p>step three: check is success</p><ul><li><code>sudo docker version</code> </li><li><code>sudo docker info</code></li></ul></li><li><p>step four : adds the current user of the system to the user group,in this way, you don’t need to us the sudo in the future</p><ul><li><code>sudo usermod -aG docker $USER</code></li><li><code>reboot</code></li></ul></li></ul><hr><p>start the docker: <code>systemctl start docker</code></p><p>after install the Docker,we need get the image from the hub.docker:</p><p><code>docker pull redis</code></p><p>using the <code>docker images</code> commend to check is success</p><p>start an container: <code>docker run -it --name=redis-learn</code></p><p><img src="https://www.whkblog.work/blog/images/redis_learn/image-20220829204132883.png" alt="image-20220829204132883"></p><p>start another teminal to check is success : <code>docker ps</code></p><p><img src="https://www.whkblog.work/blog/images/redis_learn/image-20220829204245808.png" alt="image-20220829204245808"></p><p>now we can sure that we have create a container of Redis，but we can not to operate the database</p><p>so we need another commond:</p><p>​    <code>docker exec -it redis-learn redis-cli</code></p><p><img src="https://www.whkblog.work/blog/images/redis_learn/image-20220829204610216.png" alt="image-20220829204610216"></p><p>and set the<code>auth 123456</code></p><p>interesting thing: 6379 is the combination of the Merz in the Nine-grid input method. Just for fun</p><p>  by the  way, if we need to save to next learn,all we need is just: <code>docker stop redis-learn</code></p><p>and next time we just need to <code>docker start redis-learn</code> to continue to learn</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This is a note to record the learning Redis&lt;/p&gt;
&lt;h1 id=&quot;What-is-Redis？&quot;&gt;&lt;a href=&quot;#What-is-Redis？&quot; class=&quot;headerlink&quot; title=&quot;What is Redis</summary>
      
    
    
    
    
    <category term="docker" scheme="https://www.whkblog.work/tags/docker/"/>
    
    <category term="learn" scheme="https://www.whkblog.work/tags/learn/"/>
    
    <category term="redis" scheme="https://www.whkblog.work/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>docker lean</title>
    <link href="https://www.whkblog.work/2022/08/28/docker-learn/"/>
    <id>https://www.whkblog.work/2022/08/28/docker-learn/</id>
    <published>2022-08-28T06:44:58.000Z</published>
    <updated>2022-08-29T12:36:00.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-is-Docker"><a href="#What-is-Docker" class="headerlink" title="What is Docker?"></a>What is Docker?</h1><p>Docker is an open source application container , which can  package programs and program environments together. In this way,  it’s can fixed the problem of the unvailiability of the program due to eviromenttal changes. In a simple way to descript of it, it’s similar to virtual machine. Docker is smaller and faster than virtual machine, And the Docker does not virtualize the hardware. For using docker, the release of applications is also faster.</p><h2 id="three-parts-of-dock"><a href="#three-parts-of-dock" class="headerlink" title="three parts of dock"></a>three parts of dock</h2><ul><li>images,</li><li>container</li><li>reponsitory</li></ul><h1 id="Common-commends"><a href="#Common-commends" class="headerlink" title="Common commends"></a>Common commends</h1><p><code>systemctl  start/stop/status/enable docker</code></p><p><em>Respectively represent: start stop to check the status And startup docker</em></p><h2 id="common-image-commends"><a href="#common-image-commends" class="headerlink" title="common image commends"></a>common image commends</h2><p><code>docker images</code>  <em>show the the images in the local system</em> , can use -a/-q to show all or only show images id</p><p><code>docker search [option]  name</code>    <em>find the images from <a href="https://hub.docker.com/">https://hub.docker.com</a></em>  options: </p><p><code>docker pull name[:TAG]</code>    <em>download the images</em></p><p><code>docker system df</code>  <em>check the space occupied  by images or container or data</em>     </p><p><code>docker rmi name/image_id</code>  <em>delete the image which named name,use  -f to force deletion,we also can use this to delete some images in once; it also supports parameter passing ,you can delete all by this:<code>docker rmi $(docker images -qa)</code></em>   <del>it’s similar to shell rm commend</del></p><p>[^tips]: responsitory name, tags are &lt; none &gt; images commonly known as dangling images</p><h2 id="common-container-commends"><a href="#common-container-commends" class="headerlink" title="common container commends"></a>common container commends</h2><p>new and start a container:</p><p><code>docker run [OPTIONS] IMGAE [COMMAND] [ARG..]</code></p><p><em>common options:</em> </p><ul><li>–name      <em>set the container name</em></li><li>-d             <em>run the container in the background and return the container ID</em></li><li>-i             <em>run the container in an interactive mode, usually used with -t</em>        </li><li>-t             <em>Start the interactive container (there is a pseudo -terminal at the front desk, waiting for interaction)</em></li><li>-P           random port mapping</li><li>-p           set the port mapping</li></ul><p><code>docker ps</code>  <em>show all containers that are running</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;What-is-Docker&quot;&gt;&lt;a href=&quot;#What-is-Docker&quot; class=&quot;headerlink&quot; title=&quot;What is Docker?&quot;&gt;&lt;/a&gt;What is Docker?&lt;/h1&gt;&lt;p&gt;Docker is an open so</summary>
      
    
    
    
    
    <category term="docker" scheme="https://www.whkblog.work/tags/docker/"/>
    
    <category term="learn" scheme="https://www.whkblog.work/tags/learn/"/>
    
  </entry>
  
  <entry>
    <title>How to pass multiple parameters.</title>
    <link href="https://www.whkblog.work/2022/07/19/How-to-pass/"/>
    <id>https://www.whkblog.work/2022/07/19/How-to-pass/</id>
    <published>2022-07-19T10:47:31.000Z</published>
    <updated>2022-07-19T12:47:20.526Z</updated>
    
    <content type="html"><![CDATA[<p>Today, in my internship work, I encountered a demand that I use the multithreaded thread pool. When I submit a task, the corresponding function needs to pass in multiple parameters. And I searched the Internet and solved the related problems. Here, I wrote down this little method.</p><p>In Python，there are many ways to implement multithreading,  the most common way is using the threading module.  When there is small code or small amount of data. it is vary convenient to use threading module. When there is a large amount of data, it is troublesome and irrational to create threads one by one. Based this, the multithreadingPool was developed.</p><p>By using multithreadingPool, you can create many threads easily. In Python you can use multiprocessing modele or ThreadPoolExecutor in the concurrent.futures or threadpool to create ThreadPool</p><p>By using multiprocessing,there two ways  to create ,there no different with them</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># method one:</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> Pool</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">arg</span>):</span> <span class="comment"># arg is thr params you want to put in</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">some operation of your code</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">pool = Pool(processes=<span class="number">3</span>) <span class="comment"># Set that max 3 threads</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rane(n):</span><br><span class="line">    pool.apply_async(func,(arg,)) <span class="comment">#　unblocking the children thread has returtn</span></span><br><span class="line">    <span class="comment"># pool.apply(func,(msg,))       # blocking,without return apply() is self function used to call funct and pas params。</span></span><br><span class="line">    <span class="comment"># pool.imap(func,[msg,])        # blocking without return like similar to pool.apply</span></span><br><span class="line">    <span class="comment"># pool.map(func, [msg, ])       # blocking without return </span></span><br><span class="line"></span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br><span class="line"><span class="comment"># method two:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> ThreadPool </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">arg</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    some operation of your code</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">p = ThreadPool(<span class="number">5</span>)</span><br><span class="line">pool_output = p.<span class="built_in">map</span>(func,arg_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The most popular: ThreadPoolExecutor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">arg</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    some operation of your code</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">pool = ThreadPoolExecutor(max_workers=<span class="number">2</span>)</span><br><span class="line">task = pool.submit(func,params)  <span class="comment"># put a task to threadpool</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">my job problem is here, if you wanner to pass more than one params, you shou use the write following:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">taks = pool.submit(<span class="keyword">lambda</span> x: func(*x),[param1,param2,...])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># judge the task is finished?</span></span><br><span class="line">print(task.done())</span><br><span class="line"><span class="comment"># get result</span></span><br><span class="line">print(taks.result())</span><br><span class="line"></span><br><span class="line"><span class="comment"># close()</span></span><br><span class="line">pool.shutdown()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>using threadpool</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">arg</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    some operation of your code</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line"> pool = threadpool.ThreadPool(<span class="number">2</span>)</span><br><span class="line">requests = threadpool.makeRequests(func, params)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">define of params if there are more than one</span></span><br><span class="line"><span class="string">using list: params = [value_1,value_2,value_3,...]</span></span><br><span class="line"><span class="string">using dict: params = &#123; name_1:value_1,name_2:value_2,name_3:value_3,...&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[pool.putRequest(req) <span class="keyword">for</span> req <span class="keyword">in</span> requests] <span class="comment"># put thread batch</span></span><br><span class="line">pool.wait() <span class="comment"># wait all thread finished then close</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Today, in my internship work, I encountered a demand that I use the multithreaded thread pool. When I submit a task, the corresponding fu</summary>
      
    
    
    
    <category term="python" scheme="https://www.whkblog.work/categories/python/"/>
    
    
    <category term="python" scheme="https://www.whkblog.work/tags/python/"/>
    
    <category term="多线程" scheme="https://www.whkblog.work/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Fixed page is not refreshed in real time</title>
    <link href="https://www.whkblog.work/2022/07/04/QT/"/>
    <id>https://www.whkblog.work/2022/07/04/QT/</id>
    <published>2022-07-04T15:06:28.000Z</published>
    <updated>2022-07-04T16:01:24.354Z</updated>
    
    <content type="html"><![CDATA[<p>Due to the internship work, I was exposed to Python GUI related content, and I used python6 while learning.</p><p>In the process of writing the GUI interface, I came across a problem about QWebEngineView not loading in real time. </p><p>For example</p><p>[similar problem <a href="https://www.cnblogs.com/suxia/p/14133769.html]">https://www.cnblogs.com/suxia/p/14133769.html]</a>: </p><p> , as described in this web page.</p><p>QWebengineview will appear that sometimes the page is clearly loaded, but the actual displayed content is still the previous page, and it is necessary to manually update the page to refresh the content of the page.  just like the git show below</p><p><img src="https://img1.imgtp.com/2022/07/04/fkZHsXeb.gif"></p><p>In the comments section of the web page, someone proposed to do a fake move, i.e. move the window, and then move back. or you can do like the gif show. </p><p>As the comments said,I think that it is a problem with page redrawing, and it is estimated that there is a bug that causes the signal of Windows redrawing not to be transmitted to the page. With this thought, I thought of refreshing QWebEngineView every once in a while.</p><p>Pseudo code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">self.times = QTimer(self)  </span><br><span class="line">      self.times.timeout.connect(self.reflash)  <span class="comment"># self.reflash() is a method that define by coder</span></span><br><span class="line">      self.times.setInterval(<span class="number">200</span>) <span class="comment"># Time interval is 200ms/0.2s</span></span><br><span class="line"></span><br><span class="line">      self.reflash()</span><br><span class="line">      self.times.start()</span><br><span class="line">      </span><br><span class="line"> <span class="comment"># my reflash code</span></span><br><span class="line">          <span class="function"><span class="keyword">def</span> <span class="title">reflash</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">      ss = self.ui.web_view.findChildren(QWebEngineView) <span class="comment"># find all QWebEngineView</span></span><br><span class="line">      <span class="keyword">for</span> s <span class="keyword">in</span> ss:  <span class="comment"># then reflashing all widgets</span></span><br><span class="line">          s.repaint() </span><br></pre></td></tr></table></figure><p>In this Pseudocode QTimer() and repaint() is the offical method you can see here </p><p>and  </p><p>Thats all, by the way ,from this time I will try to wirte every blog in English (ˉ﹃ˉ)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Due to the internship work, I was exposed to Python GUI related content, and I used python6 while learning.&lt;/p&gt;
&lt;p&gt;In the process of writ</summary>
      
    
    
    
    <category term="python" scheme="https://www.whkblog.work/categories/python/"/>
    
    
    <category term="python" scheme="https://www.whkblog.work/tags/python/"/>
    
    <category term="pyside" scheme="https://www.whkblog.work/tags/pyside/"/>
    
    <category term="pyqt" scheme="https://www.whkblog.work/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>数据可视化</title>
    <link href="https://www.whkblog.work/2022/06/15/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>https://www.whkblog.work/2022/06/15/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</id>
    <published>2022-06-15T14:47:57.000Z</published>
    <updated>2022-06-16T08:02:59.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="数据可视化的意义："><a href="#数据可视化的意义：" class="headerlink" title="数据可视化的意义："></a><strong>数据可视化的意义</strong>：</h2><p>帮助人更加科学地从视觉角度对海量数据进行诠释，进而引发观看这的兴趣，并通过不同的表现形式和突出手段将观看者的注意力集中在某一点上，同时令其获取更加有价值的、容易内化和理解的信息。</p><h2 id="可视化简史："><a href="#可视化简史：" class="headerlink" title="可视化简史："></a><strong>可视化简史</strong>：</h2><blockquote><p>17世纪前：图表萌芽；<br>17世纪：使用武力测量数据进行可视化<br>18世纪：发明图形符号<br>19世纪：使用数据图形<br>20世界上半叶：现代启蒙<br>20世纪下半叶：多维信息可视化编码<br>2004年以前：交互可视化<br>2004至今：可视分析学</p></blockquote><h2 id="可视化分类："><a href="#可视化分类：" class="headerlink" title="可视化分类："></a><strong>可视化分类</strong>：</h2><blockquote><p><strong>科学可视化</strong>：是可视化领域最早、最成熟的一个跨学科研究与应用领域。面向的领域主要是自然科学，如物理、化学、气象气候、航空航天、医学、生物学等各学科。这些学科通常需要对数据和模型进行解释、操作与处理，旨在寻找其中的模式、特点、关系及异常情况</p><p><strong>信息可视化</strong>：处理的对象是抽象数据集合，起源于统计图形学，又与信息图形、视觉设计等现代技术相关。其表现形式通常在二维空间。因此关键问题在有限的展现空间种以直观的方式传达大量的抽象信息。</p><p><strong>可视分析学</strong>：一门以可视化交互为基础的分析推理科学。它综合了图形学、数据挖掘和人机交互等技术、以可视化交互界面为通道，将人感知和认知能力以可视的方式融入数据处理过程。形成人脑智能和机器智能又是互补和相互提升。建立螺旋式信息交流与认识提炼途径。完成有效的分析推理和决策</p></blockquote><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h2 id="视觉感知与认知"><a href="#视觉感知与认知" class="headerlink" title="视觉感知与认知"></a>视觉感知与认知</h2><blockquote><p><strong>感知</strong>：客观事物通过人的视觉在脑中形成的直接反映</p><p><strong>认知</strong>：关于怎样理解和解释看到的东西。科学领域中。认知是包含注意力、记忆、产生和理解语言、解决问题。以及进行决策的心里过程</p></blockquote><h2 id="格式塔理论"><a href="#格式塔理论" class="headerlink" title="格式塔理论"></a>格式塔理论</h2><p>强调经验和行为的整体性、反对当时流行的构造主义学说和行为主义”刺激-反应“公式。认为整体不等于部分之和，意识不等于感觉的集合，行为不等于反射弧的循环。认为人在观察时，倾向将事物理解为整体</p><h3 id="基本原则："><a href="#基本原则：" class="headerlink" title="基本原则："></a>基本原则：</h3><p>贴近性原则、相似性原则、连续性原则、闭合性原则、共势原则、好图原则、对称性原则、经验原则</p><h2 id="视觉通道-7"><a href="#视觉通道-7" class="headerlink" title="视觉通道 7"></a>视觉通道 7</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><blockquote><p>空间、标记、位置、尺寸、颜色、亮度、饱和度、色调、配色方案、透明度、方向、形状、纹理、动画</p></blockquote><p><img src="https://s2.loli.net/2022/05/17/jxuoYXv1kbhaCRD.png" alt="img"></p><p><strong>定性</strong>：形状、色调、空间位置<br><strong>定量</strong>：直线长度、区域面积、空间体积、斜度、角度、颜色饱和度、亮度</p><h3 id="表现力"><a href="#表现力" class="headerlink" title="表现力"></a>表现力</h3><p>指导可视化设计者挑选合适的视觉通道，实现对数据信息完整展现，要求视觉通道尽量忠于原始数据。</p><h3 id="评价标准"><a href="#评价标准" class="headerlink" title="评价标准"></a>评价标准</h3><p>准确性、可辨别性、可分离性、视觉突出</p><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><h2 id="数据分类"><a href="#数据分类" class="headerlink" title="数据分类"></a>数据分类</h2><p>对数据属性进行分类有：</p><table><thead><tr><th>分类</th><th>数据类型</th><th>度量方式</th><th>实例</th></tr></thead><tbody><tr><td>类别型</td><td>数据对象的符号或名称</td><td>相异度函数$$d(X,Y)= \frac{(p-m)}{P} $$ Jaccard函数：  $$ d(X,Y)= \frac{(q+r)}{p+q+r} $$</td><td>商品名，客户性别</td></tr><tr><td>序数型</td><td>属性之间有顺序</td><td>归一化到[0,1]之间</td><td>销售时间</td></tr><tr><td>数值型</td><td>定量表达属性值</td><td>非负性、对称性、三角不等式、欧式距离等</td><td>商品单价</td></tr></tbody></table><h2 id="相似性度量"><a href="#相似性度量" class="headerlink" title="相似性度量"></a>相似性度量</h2><p>相似度的定义方式与试用领域、数据类型有关。</p><h2 id="不确定性"><a href="#不确定性" class="headerlink" title="不确定性"></a>不确定性</h2><p>由于数据本身存在误差；低精度转到高精度造成不确定性；满足特殊应用需求；缺失值处理；数据集成等原因使数据有不确定性。</p><p>分为存在不确定性和属性不确定性</p><h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><p><strong>数据可视化基本流程</strong></p><p><img src="https://www.whkblog.work/blog/images/image-20220615230532149.png" alt="image-20220615230532149"></p><h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><h2 id="可视化方法"><a href="#可视化方法" class="headerlink" title="可视化方法"></a>可视化方法</h2><h3 id="二维变量数据可视化"><a href="#二维变量数据可视化" class="headerlink" title="二维变量数据可视化"></a>二维变量数据可视化</h3><p><strong>颜色映射法</strong>：建立颜色映射表，将二维标量值转化为索引值并显示对应的颜色。<br><strong>等值线提取法</strong>：生成等值，计算等值线，通过移动四边形法获得等值线。<br><strong>高度映射法</strong>：将二维标量数据值转换为二维平面坐标的高度信息并展示。<br><strong>标记法</strong>：采用可标记的颜色、大小、形状等方法进行可视化表达。</p><h3 id="三维变量数据可视化"><a href="#三维变量数据可视化" class="headerlink" title="三维变量数据可视化"></a>三维变量数据可视化</h3><p><strong>等值面的绘制</strong>：利用等值面提取技术获得数据中的层面信息，采用图形硬件面绘制技术直观展现数据中的形状和拓扑信息。</p><p>移动立方体法：常用的等值面提取方法。根据每个顶点和等值的大小关系，计算顶点和等值的大小关系，并用所有的四个顶点大小关系生成索引，通过顶点确定等值面在立方体上的位置。</p><p><strong>直接体绘制</strong>：以模拟光学原理方式将物质分布、内部结构和信息分布以半透明方式表达，直接呈现三维空间标量数据中的有用信息。<br>三维标量场可视化的基本流程：</p><p>矢量数据的预处理==<strong>&gt;**矢量数据的映射==</strong>&gt;**矢量数据的绘制和显示</p><h3 id="向量场可视化方法"><a href="#向量场可视化方法" class="headerlink" title="向量场可视化方法"></a>向量场可视化方法</h3><blockquote><p>向量场（流场）：流场可以广泛的定义为从流形到切丛之间的映射。</p></blockquote><p>标记法：直接显示数据空间各个点的向量信息。<br>积分曲线法：采用各类积分曲线揭示矢量场的内在特征和性质。<br>纹理法：密集流场模式展现方法，产生高密度、全局的流场信息。<br>拓扑法：用临界点和分界线表达流场。</p><p>流场中的迹线是一条从初始点开始连续的曲线。<br>流线：静态流场中的迹线或冻结在某个时间点上的流场中的积分曲线。<br>脉线：动态场某点持续释放的粒子在某时间点上的位置。</p><h1 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h1><h2 id="地理空间可视化方法"><a href="#地理空间可视化方法" class="headerlink" title="地理空间可视化方法"></a>地理空间可视化方法</h2><p>点数据可视化：点地图、像素地图</p><p>线型数据可视化：网络地图、流量地图</p><p>区域数据可视化：等值曲线、等值区间地图、比较统计地图</p><p>基于地理位子的综合信息可视化：地理信息简化与标识、多源时空地理信息</p><h1 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h1><h2 id="高维非空间数据可视化"><a href="#高维非空间数据可视化" class="headerlink" title="高维非空间数据可视化"></a>高维非空间数据可视化</h2><p><strong>数据变换</strong>：降低维度，使用线性或非线性变换把高维数据投影到低维空间，投影保留重要的关系。（人所能感知的空间在三维以下）<br><strong>数据降维方法：</strong></p><blockquote><p><strong>线性方法</strong>：主成分分析（PCA）、多维尺度分析（MDS）、非负矩阵分解（NMF）</p></blockquote><blockquote><p><strong>非线性方法</strong>：ISOMAP、局部线性嵌套（LLE）</p></blockquote><h3 id="主成分分析法（PCA）"><a href="#主成分分析法（PCA）" class="headerlink" title="主成分分析法（PCA）"></a><strong>主成分分析法</strong>（PCA）</h3><p><strong>主成分分析法</strong>（PCA）：</p><p>最大化投影后的方差最小化投影后的损失</p><p><strong>基本思想</strong>：</p><p>用一组互相独立的综合指标代表数据的统计性质。</p><p><strong><em>\</em>算法步骤：**</strong></p><ol><li>标准化采集p维随机向量，构造样本阵</li><li>对样本阵进行标准化</li><li>对标准化阵求相关系数矩阵</li><li>解相关矩阵的特征方程</li><li>对特征值解特征向量</li><li>将标准化后的指标变量转化为主成分</li><li>对主成分进行综合评价</li></ol><p><strong>应用：应用于脸部数据</strong></p><h3 id="多维尺度分析（MDS）"><a href="#多维尺度分析（MDS）" class="headerlink" title="多维尺度分析（MDS）"></a>多维尺度分析（MDS）</h3><p><strong>基本思想：</strong></p><p>根据数据集的相低程度，计算各数据点在K维空间中的位置。</p><p><strong>基本分类：</strong></p><p>根据相似矩阵的具体意义，MDS法可分为四类。</p><ul><li>经典的MDS方法采用数据之间的差异程度作为输人，同时应用最小化应变(strain) 函数计算数据坐标。</li><li>度量MDS方法推广了计算的优化过程，并通过计算应力(stress) 函数获得低维空间坐标。</li><li>非度量的MDS方法采用无参数的单调函数描述数据之间的差异程度。</li><li>一般化的MDS方法将度量的MDS方法推广到任意平滑的非欧氏空间中(如曲面)。</li></ul><p><strong>算法流程：</strong></p><ol><li>给定一个包含M条记录的N维数据，创建一个MXM的矩阵Ds并且计算每对数据的相似度(如数据点的欧氏距离)。</li><li>假设数据被投射到K维空间(在可视化应用中K=1, 2，3)，创建一个MXK的矩阵L以存放所有数据点在嵌入后的位置。初始位置可以随机选取，或将PCA方法作用于原始高维数据后得到的前K个特征向量作为初始位置。</li><li>根据数据点在低维空间的位置，计算所有数据对的相似度，保存于MXM的矩阵Ls中。</li><li>通过测量Ds和Ls的差别，采用特定方法计算应力值S</li><li>若应力值小于提前设定的阈值，或者和前面几次循环没有明显变化，算法停止。否则，将矩阵L中数据点的位置向减少单个应力值的方向移动。6)回到第三步。应用：计算城市之间的距离，获取城市位置图。</li></ol><p><strong>数据呈现：</strong></p><h2 id="高维空间数据呈现方法："><a href="#高维空间数据呈现方法：" class="headerlink" title="高维空间数据呈现方法："></a>高维空间数据呈现方法：</h2><p>基于点的方法——散点矩阵、径向布局<br>基于线的方法——线图、平行坐标、径向轴<br>基于区域的方法——==柱状图、表格显示、像素图、维度堆叠、马赛克图<br>基于样本的方法——切尔诺夫脸谱图、邮票图</p><blockquote><p>散点矩阵：使用一个二维散点图表达每对维度之间的关系，直观显示两个维度间的相关性，散点图数目与数据维度平方成正比。<br>径向布局法：基于弹簧模型的圆形布局方法，将代表N维的N个锚点至于圆周上，根据N个锚点作用的N种力量将数据点散布于圆内。<br>线图：单变量可视化方法。通过多子图、多线条等方法可以延伸表示高维数据。通过不同的视觉通道编码不同的数据属性。<br>像素图：介于点方法和区域方法的混合方法，使用具有颜色的小方块表达每个数据的单维度属性。最大程度利用屏幕空间。<br>维度堆叠：将离散的N维空间映射到二维空间，将二维空间根据多个独立的数据属性迭代划分成若干网格，显著增加表达信息量，比较同类格式、不同数据的差别。<br>马赛克图：划分二维空间可视化多维数据，根据分布来分配空间大小，首先根据第一维度水平划分空间，再根据第二维度垂直划分空间，重复此过程直到遍历所有维度。<br>星形图：使用“辐条”编码数据值，每个数据点是一条星形折线。</p></blockquote><h2 id="数据交互："><a href="#数据交互：" class="headerlink" title="数据交互："></a><strong>数据交互：</strong></h2><p>通过交互，解决显示空间与数据复杂度之间的矛盾。</p><p><strong>方法：</strong> 灰尘与磁铁、过滤、放大、画笔和链接、灵活轴线法</p><blockquote><p>灰尘与磁铁：用磁铁吸引灰尘，提取某些具有特殊属性的数据。<br>过滤：放大被过滤镜覆盖的区域，选取数据，对选择数据采用不同于其他数据的可视化方式。放大以凸显细节。<br>画笔和链接：将画笔在某个视图中选取的数据属性和范围自动与其他视图链接，在其他视图中显示选中内容。<br>灵活轴线法：允许用户在屏幕上绘制轴线，选择轴线的对应关系。</p></blockquote><h1 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h1><h2 id="层次数据可视化"><a href="#层次数据可视化" class="headerlink" title="层次数据可视化"></a>层次数据可视化</h2><table><thead><tr><th>方法类型</th><th>解释</th><th>优点</th><th>缺点</th><th>应用实例</th></tr></thead><tbody><tr><td>结点链接法</td><td>用结点表达数据个体，父子结点之间用链接表达层次关系</td><td>直观展示数据的层次结构</td><td>树的结点分布不均或广度深度差别大时，可能造成空间浪费或视觉混淆</td><td>节点链接图、三维树</td></tr><tr><td>空间填充法</td><td>用嵌套表达树形结构</td><td>有效利用屏幕空间</td><td>不如结点链接法结构清洗、处理复杂层次数据时不易表现非兄弟结点的层次关系</td><td>树图、多维图</td></tr><tr><td>混合型</td><td>混合前两种方法</td><td>将两种方法又是互补</td><td></td><td>冰柱图、寻日图</td></tr></tbody></table><h2 id="网络数据可视化"><a href="#网络数据可视化" class="headerlink" title="网络数据可视化"></a>网络数据可视化</h2><table><thead><tr><th>方法</th><th>解释</th><th>优点</th><th>缺点</th><th>应用示例</th></tr></thead><tbody><tr><td>结点链接发</td><td>网络的直观表达，结点标识个体、边标识个体之间的关系</td><td>对关系稀疏网络的表达好</td><td>处理复杂的网络时，边与边大量交叉，导致严重的视觉混乱</td><td>生成社交网络关系图</td></tr><tr><td>相邻矩阵</td><td>采用N×N矩阵标识n个个体之间的关系，个体之间的相似性用颜色编码。</td><td>可解决边与边交叉</td><td>不能有效表达网络拓扑结构</td><td>生成城市交易矩阵</td></tr><tr><td>混合型</td><td>混合前两种方法</td><td>优势互补</td><td></td><td>生成哈利波特中的家庭关系图</td></tr></tbody></table><h1 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h1><h2 id="文本可视化"><a href="#文本可视化" class="headerlink" title="文本可视化"></a>文本可视化</h2><h3 id="文本可视化基本流程"><a href="#文本可视化基本流程" class="headerlink" title="文本可视化基本流程"></a>文本可视化基本流程</h3><p>文本处理：根据用户需求对原始文本资源的特征信息进行分析。</p><p>步骤：文本数据预处理、特征抽取、特征度量</p><p>可视化映射：以合适的视觉编码和视觉分布方式呈现文本特征</p><p>交互：满足不同用户的不同需求。</p><h3 id="文本可视化主要方法及软件库"><a href="#文本可视化主要方法及软件库" class="headerlink" title="文本可视化主要方法及软件库"></a>文本可视化主要方法及软件库</h3><ol><li>基于命名实体的可视化 ——contexter</li><li>词汇分布的可视化——Tilebars</li><li>主题变迁可视化——ThemeRiver</li></ol><h3 id="多文档可视化"><a href="#多文档可视化" class="headerlink" title="多文档可视化"></a>多文档可视化</h3><p><strong>星系视图</strong>：文档按主题相似性进行布局。把一篇文档比作一颗星星，通过投影的方法把所有文档按照其主题的相似性投影为二维平面的点集，星星离的越近则代表文档越相似。</p><p><strong>新闻地图</strong>：基于树图的布局方式对新闻文本进行归类和可视化，颜色用于区分新闻类型。<br><strong>主题山地</strong>：把等高线加入投影的二维平面中，文档相似性相同的放在一个等高线内，再用颜色来编码文本分布的密集程度，把二维平面背景变成一幅地图。文档越相似，则分布越密集，这座山峰就越高。</p><h3 id="时序文档可视化方法"><a href="#时序文档可视化方法" class="headerlink" title="时序文档可视化方法"></a>时序文档可视化方法</h3><p><strong>主题河流</strong>：用河流来隐喻时间的变化。横轴表示时间，每一条不同颜色线条可视作一条河流，而每条河流则表示一个主题，河流的宽度代表其在当前时间点上的一个度量。<br><strong>TIARA</strong>：结合了标签云，通过主题分析技术（LDA），将文本关键词根据时间点放置在每条色带上，并用词的大小来表示关键词在该时刻出现的频率。<br><strong>文本流</strong>：不仅表达了主题的变化，还表达了各个主题随着时间的分裂与合并。如某个主题在某个时间分成了两个主题，或多个主题在某个时间合并成了一个主题。</p><h2 id="跨媒体数据（文本数据、社交网络数据、日志数据）可视化方法"><a href="#跨媒体数据（文本数据、社交网络数据、日志数据）可视化方法" class="headerlink" title="跨媒体数据（文本数据、社交网络数据、日志数据）可视化方法"></a>跨媒体数据（文本数据、社交网络数据、日志数据）可视化方法</h2><p>文本数据：标签云、单词树、星系视图、主题山地等；<br>社交网络数据：结点链接图、柱状图、饼状图、折线图等；<br>日志数据：折线图、饼图、辐射图、热力图、地图等。</p><h2 id="多媒体数据可视化方法"><a href="#多媒体数据可视化方法" class="headerlink" title="多媒体数据可视化方法"></a><strong>多媒体数据可视化方法</strong></h2><p><strong>图形：</strong></p><p><strong>图像</strong>：图像网络、时空采样&amp;平均、基于相似性的图像集可视化、基于超图的社交照片可视化</p><p><strong>视频</strong>：生成视频流线、视频相似性、海报式视频概要、视频立方（将(平面)视频帧按时间轴堆叠排列）、Viz-A-Vis、视频签名、线性播放的“视频流”</p><p><strong>音频</strong>：五线谱、音乐结构化（弧图、同弦法）、音乐特性可视化（基于“花瓣”表达音乐特性）</p><h1 id="第十章"><a href="#第十章" class="headerlink" title="第十章"></a>第十章</h1><h2 id="一般的交互系统及其功能"><a href="#一般的交互系统及其功能" class="headerlink" title="一般的交互系统及其功能"></a>一般的交互系统及其功能</h2><p>第四代自然交互与通信，主要功能为：多模感知功能；智能代理交互功能；知识处理功能；可视化显示功能。</p><p><strong>主要的人机交互系统</strong>：</p><ol><li>基于传统的硬件设备的交互技术：用户可以通过鼠标或键盘选中图像中的某个点或区域，完成对该点或区域处虚拟物体的缩放、拖拽等操作。</li><li>基于语音识别的交互技术：如 Siri，通过语音识别获取指令，根据用户需求返回最匹配的结果，实现自然的人机交互，很大程度上提升了用户的工作效率。</li><li>基于触控的交互技术：以人手为主的输入方式。实现了多点或多用户的交互，用户可以使用双手进行单点触控，也可以通过识别不同的手势实现单击、双击等操作。</li><li>基于动作识别的交互技术：基于动作识别的交互，降低人机交互的成本，而且更符合人类的自然习惯，较传统的交互方式更为自然、直观。</li><li>基于眼动追踪的交互技术：通过捕获人眼在注视不同方向时眼部周围的细微变化，分析确定人眼的注视点，并将其转化为电信号发送给计算机，实现人与计算机之间的互动，这一过程中无需手动输入。</li></ol><h2 id="可视化交互方法或模式"><a href="#可视化交互方法或模式" class="headerlink" title="可视化交互方法或模式"></a>可视化交互方法或模式</h2><p><strong>选择</strong>：标记感兴趣的区域或特征，追踪这些区域或特征的变化；<br><strong>探索</strong>：寻找某种清晰图案；<br><strong>布局</strong>：可视化空间的合理布局；<br><strong>可视化编码</strong>：采用可视化元素对数据进行编码；<br><strong>抽象/具体</strong>：为用户提供不同细节等级的信息，用户可以通过交互改变数据简化程度；<br><strong>过滤</strong>：显示符合条件的某些数据子集；<br><strong>链接</strong>：显示相关的项目，高亮关联和联系，显示与特定数据项有关的项。</p><h2 id="可视化交互模型"><a href="#可视化交互模型" class="headerlink" title="可视化交互模型"></a>可视化交互模型</h2><p><strong>概览+细节</strong>：显示大规模数据集中的局部细节，致力于显示用户兴趣焦点部分的细节信息，同时体现焦点和周边的关联关系；<br><strong>聚焦+上下文</strong>：为用户感兴趣的内容展示更多细节，同时可以显示全部数据。<br><strong>对偶界面模型</strong>：对同一数据同时采用两种不同方式的可视化。</p><h1 id="第十一章"><a href="#第十一章" class="headerlink" title="第十一章"></a>第十一章</h1><h2 id="可视化软件库"><a href="#可视化软件库" class="headerlink" title="可视化软件库"></a>可视化软件库</h2><p>科学可视化软件</p><table><thead><tr><th>分类</th><th>举例</th></tr></thead><tbody><tr><td>医学图像</td><td>3D slicer、Amira</td></tr><tr><td>地理信息</td><td>ArcGIS、CommonGIS</td></tr><tr><td>科学可视化</td><td>AVS、IRIS Explorer(NAG)</td></tr></tbody></table><p>信息可视化软件</p><table><thead><tr><th>分类</th><th>举例</th></tr></thead><tbody><tr><td>信息可视化</td><td>Axiis、Flare</td></tr><tr><td>文档可视化</td><td>CiteSpace、D3</td></tr><tr><td>图表可视化</td><td>GraphViz、Raphaely</td></tr><tr><td>日志可视化</td><td>Loggly</td></tr></tbody></table><p>可视分析软件</p><table><thead><tr><th>分类</th><th>举例</th></tr></thead><tbody><tr><td>统计数据可视化分析</td><td>GapMinder</td></tr><tr><td>可视分析</td><td>Google Public Data Explorer、Palantir</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h1&gt;&lt;h2 id=&quot;数据可视化的意义：&quot;&gt;&lt;a href=&quot;#数据可视化的意义：&quot; class=&quot;headerlink&quot; title=&quot;数据可</summary>
      
    
    
    
    
    <category term="数据可视化" scheme="https://www.whkblog.work/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>deploy</title>
    <link href="https://www.whkblog.work/2022/05/24/deploy/"/>
    <id>https://www.whkblog.work/2022/05/24/deploy/</id>
    <published>2022-05-24T11:46:34.000Z</published>
    <updated>2022-05-24T14:01:00.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h1><p>历时四个月，断断续续的做完了基于django+restframework做后端，vue+element-plus做前端模拟实现学院官网，目前项目已经部署了。</p><p>项目还有些问题，不过问题不大，需要放下来了，后面有时间再进行迭代更新。回归准备找实习吧，虽然已经过了黄金时间段，</p><p>个人白嫖了一个阿里云服务器，部署上去了，可通过网址</p><p>[]: <a href="http://120.79.161.219/">http://120.79.161.219</a></p><p>访问查看</p><p>这里记录一下部署过程</p><h1 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h1><h2 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h2><p>随便上哪个云服务商，搞一台云服务器</p><p>我是上阿里云你试用了一个月的ECS服务器，打开服务器的22，80，443网络端口</p><p><img src="https://www.whkblog.work/blog/images/jxnu/deploy1.png" alt="云服务器实例"></p><p>点击管理，再网络安全策略里面加</p><p><img src="https://www.whkblog.work/blog/images/jxnu/deploy2.png" alt="云服务器实例"></p><p>配置规则如下（注意是入口规则）</p><p><img src="https://www.whkblog.work/blog/images/jxnu/deploy3.png" alt="云服务器实例"></p><h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><p>前端项目进行打包,命令行进入前端项目文件夹</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">run</span><span class="bash"> build</span></span><br></pre></td></tr></table></figure><p>后端文件修改后端文件目录下的setting.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY WARNING: don&#x27;t run with debug turned on in production!</span></span><br><span class="line"><span class="comment"># DEBUG = True</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ALLOWED_HOSTS = []</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭后 django 不再处理静态资源</span></span><br><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改项。允许所有的IP访问网络服务</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改项。指定需要收集的静态文件的位置</span></span><br><span class="line"><span class="comment"># 即前端打包文件所在位置</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&quot;../pre/dist/&quot;</span>),</span><br><span class="line">]</span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;static&#x27;</span>)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">&#x27;static/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Default primary key field type</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field</span></span><br><span class="line"></span><br><span class="line">DEFAULT_AUTO_FIELD = <span class="string">&#x27;django.db.models.BigAutoField&#x27;</span></span><br><span class="line"></span><br><span class="line">X_FRAME_OPTIONS = <span class="string">&#x27;SAMEORIGIN&#x27;</span>  <span class="comment"># 允许同源资源访问</span></span><br><span class="line"></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;uploads&#x27;</span>)</span><br><span class="line">MEDIA_URL = <span class="string">&#x27;/uploads/&#x27;</span>  <span class="comment"># 媒体资源访问路径</span></span><br></pre></td></tr></table></figure><p>然后讲后端环境导入到requirements.txt，后端环境目录下</p><figure class="highlight plain"><figcaption><span>freeze > requirements.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>再将整个前后端项目上传到github上</p><h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><h3 id="系统准备"><a href="#系统准备" class="headerlink" title="系统准备"></a>系统准备</h3><p>实例界面进行远程连接，我是直接试用阿里云提供的workbench(使用前可能需要进行密码设置)，进入系统后</p><p><img src="https://www.whkblog.work/blog/images/jxnu/deploy4.png" alt="云服务器workbench"></p><p>进行系统更新</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> update</span><br><span class="line">apt-<span class="builtin-name">get</span> upgrade</span><br></pre></td></tr></table></figure><p>正式部署环境使用nginx+ Gunicorn 提供网络服务</p><p>先给系统环境安装nginx、python、git工具</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install nginx</span><br><span class="line">apt-<span class="builtin-name">get</span> install python3</span><br><span class="line">apt-<span class="builtin-name">get</span> install python3-pip</span><br><span class="line">apt-<span class="builtin-name">get</span> install git</span><br><span class="line">pip3 install virtualenv</span><br></pre></td></tr></table></figure><p>命令行创建一个目录及文件夹,并进入文件夹</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p your_path</span><br><span class="line"><span class="built_in">cd</span> your_path</span><br></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/whk-newbie/</span>CollegeOfficialWebsite.git(这里为个人的项目地址)</span><br></pre></td></tr></table></figure><p>克隆完成后，文件目录下就有了上传的相关目录文件</p><p>进入后端文件夹</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd CollegeOfficialWebsite<span class="regexp">/back/</span></span><br></pre></td></tr></table></figure><p>创建虚拟环境,并激活</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --python=<span class="number">3.8</span> venv</span><br><span class="line"><span class="keyword">source</span> venv<span class="regexp">/bin/</span>acticvate</span><br></pre></td></tr></table></figure><p>安装依赖库</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> -r requirments.txt</span><br></pre></td></tr></table></figure><p>收集静态资源（即前面修改setting.py文件内加的<strong>STATIC_ROOT</strong> 、<strong>STATICFILES_DIRS</strong>两个地址，注意dirs要设置为前端的build出的dist文件夹位置）</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python3</span> manage.<span class="keyword">py</span> collectstatic</span><br></pre></td></tr></table></figure><p>再启动nginx</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx <span class="literal">start</span></span><br></pre></td></tr></table></figure><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><p>编写nginx配置文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-available/my</span>website</span><br></pre></td></tr></table></figure><p>输入以下配置内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  charset utf-8;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name your_ip_address;  # 改成你的 IP</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 定义 server 的根路径</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 修改为你的项目的路径</span></span><br><span class="line">  root /home/sites/CollegeOfficialWebsite/back;</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 以下4项都是在给静态资源配置转发路径</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 静态文件</span></span><br><span class="line">  location /static &#123;</span><br><span class="line">    alias /home/sites/CollegeOfficialWebsite/back/static;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 媒体文件</span></span><br><span class="line">  location /uploads &#123;</span><br><span class="line">    alias /home/sites/CollegeOfficialWebsite/back/uploads;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">  #</span><span class="bash"> js</span></span><br><span class="line">  location /js &#123;</span><br><span class="line">    alias /home/sites/CollegeOfficialWebsite/back/static/js;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">  #</span><span class="bash"> css</span></span><br><span class="line">  location /css &#123;</span><br><span class="line">    alias /home/sites/CollegeOfficialWebsite/back/static/css;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 将接口及后台请求转发给 Gunicorn</span></span><br><span class="line">  location ~ (^/api|^/admin)  &#123;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_pass http://unix:/tmp/your_ip_address.socket;  # 改成你的 IP</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 其他所有请求均直接请求 Vue 打包的 html 文件</span></span><br><span class="line">  location / &#123;</span><br><span class="line">    try_files /static/index.html =404;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写完成后进行保存退出</p><p>命令行执行，以下命令 将配置文件链接到<strong>在用配置</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-available/my</span>website <span class="regexp">/etc/</span>nginx/sites-enabled</span><br></pre></td></tr></table></figure><p>重启nginx(每次修改了配置文件都需要重启)</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">service nginx restart</span></span><br></pre></td></tr></table></figure><h3 id="安装Gunicorn及测试"><a href="#安装Gunicorn及测试" class="headerlink" title="安装Gunicorn及测试"></a>安装Gunicorn及测试</h3><p>在后端目录文件夹下，python虚拟环境执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install gunicorn <span class="comment">#安装</span></span><br><span class="line">service nginx restart <span class="comment">#重启nginx</span></span><br><span class="line">gunicorn -- bind unix:<span class="regexp">//</span>tmp/your_ip_address.socket back.wsgi.application <span class="comment"># 测试（注：ip_address可自己在服务器实例界面看到）</span></span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>在浏览器地址栏里输入你自己的公网ip</p><p>就可以访问到，</p><p>我的如下图</p><p><img src="https://www.whkblog.work/blog/images/jxnu/deploy5.png" alt="云服务器实例"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>部署的时候，会看不到内容，</p><p>一般而言,无连接大概率是网络端口的问题，或则nginx没有启动</p><p>然后就是访问了界面404,这个大概率是nginx配置文件的路径没有写对</p><p>网络无连接的话，就自己查看网络端口是否开启，服务器的网络安全配置是否写好</p><p>对于nginx问题，若是启动失败，注意按提示执行一些命令，这样可以看到配置文件具体位置在哪里出错了，</p><p>同时也可以计入/var/log/nginx 文件夹，查看日志内容，启动失败，或者请求失败的内容一般实在error.log，也有部分请求内容是在access.log,自己去多看就知道了</p><p>文章参考链接：<a href="https://www.dusaiphoto.com/article/135/#_5">https://www.dusaiphoto.com/article/135/#_5</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;闲话&quot;&gt;&lt;a href=&quot;#闲话&quot; class=&quot;headerlink&quot; title=&quot;闲话&quot;&gt;&lt;/a&gt;闲话&lt;/h1&gt;&lt;p&gt;历时四个月，断断续续的做完了基于django+restframework做后端，vue+element-plus做前端模拟实现学院官网，目前</summary>
      
    
    
    
    <category term="前后端分离项目" scheme="https://www.whkblog.work/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="git" scheme="https://www.whkblog.work/tags/git/"/>
    
    <category term="前端" scheme="https://www.whkblog.work/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="后端" scheme="https://www.whkblog.work/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="linux" scheme="https://www.whkblog.work/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>闲话</title>
    <link href="https://www.whkblog.work/2022/04/18/%E9%97%B2%E8%AF%9D/"/>
    <id>https://www.whkblog.work/2022/04/18/%E9%97%B2%E8%AF%9D/</id>
    <published>2022-04-18T12:11:20.000Z</published>
    <updated>2022-04-19T02:02:07.026Z</updated>
    
    <content type="html"><![CDATA[<p>今天又开始继续写两个月前开的前后端分离项目，写了一下午，可算是把新闻模块给搞定了。后端api做完了(?)，不知道啥问题，就是明明图片地址都是正确的，还是拿不到数据。就先不管了，就这样吧，明天争取将前端的新闻模块也搞定（主要是换了个思路，以前都是模仿院官网，神经病！我干嘛还要分两种新闻类别，不都是新闻，搞得我后台重复写）。就酱</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天又开始继续写两个月前开的前后端分离项目，写了一下午，可算是把新闻模块给搞定了。后端api做完了(?)，不知道啥问题，就是明明图片地址都是正确的，还是拿不到数据。就先不管了，就这样吧，明天争取将前端的新闻模块也搞定（主要是换了个思路，以前都是模仿院官网，神经病！我干嘛还要</summary>
      
    
    
    
    
    <category term="碎碎念" scheme="https://www.whkblog.work/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>sort()的一个小点</title>
    <link href="https://www.whkblog.work/2022/04/14/sort%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%82%B9/"/>
    <id>https://www.whkblog.work/2022/04/14/sort%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%82%B9/</id>
    <published>2022-04-14T08:02:51.000Z</published>
    <updated>2022-04-14T12:35:05.404Z</updated>
    
    <content type="html"><![CDATA[<p>今天看一篇python面试真题的时候，有一道题</p><p>内容如下：</p><p><strong>s = “ajldjlajfdljfddd”，去重并从小到大排序输出”adfjl”</strong></p><p>我比较懒，就直接套写了</p><p><img src="https://www.whkblog.work/blog/images/image-20220414160607433.png" alt="image-20220414160607433"></p><p>这里报错是说join智能套用在可迭代的数据类型，</p><p>但是如果分开写的话就可以了</p><p><img src="https://www.whkblog.work/blog/images/image-20220414160823118.png" alt="image-20220414160823118"></p><p>这里的话我上网查了一下，是sort函数的问题，sort只对列表本身排序，它没有返回值</p><p>所以你直接套在里面写，就相当于给join一个空值，这当然是没有用的，控制不可迭代。</p><p>分开写就相当于先排序了，然后传进去</p><p>正确的想法应该是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;ajldjlajfdljfddd&#x27;</span></span><br><span class="line">s = <span class="built_in">list</span>(<span class="built_in">set</span>(s)).sort()</span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(s))</span><br></pre></td></tr></table></figure><p>或者使用sorted()这个是可迭代的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;&quot;</span>.join(<span class="built_in">sorted</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(s)))))</span><br></pre></td></tr></table></figure><p>然后就这样</p><p>同样的的数组中的extend也是如此，没有返回值</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天看一篇python面试真题的时候，有一道题&lt;/p&gt;
&lt;p&gt;内容如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;s = “ajldjlajfdljfddd”，去重并从小到大排序输出”adfjl”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我比较懒，就直接套写了&lt;/p&gt;
&lt;p&gt;&lt;img src</summary>
      
    
    
    
    <category term="杂七杂八" scheme="https://www.whkblog.work/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
    <category term="python" scheme="https://www.whkblog.work/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SortingAlgorithm</title>
    <link href="https://www.whkblog.work/2022/04/12/SortingAlgorithm/"/>
    <id>https://www.whkblog.work/2022/04/12/SortingAlgorithm/</id>
    <published>2022-04-12T12:42:18.000Z</published>
    <updated>2022-04-12T13:42:39.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础的排序算法"><a href="#基础的排序算法" class="headerlink" title="基础的排序算法"></a>基础的排序算法</h1><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><p>思路：默认文件第一个记录为已排序，将第2个到第n个记录依次插入到已排序的记录组成的文件中。</p><table><thead><tr><th align="center">312，126，272，226，28，165，123</th></tr></thead><tbody><tr><td align="center">[312]，126，272，226，28，165，123</td></tr><tr><td align="center">[126, 312]，272，226，28，165，123</td></tr><tr><td align="center">[126，272, 312]，226，28，165，123</td></tr><tr><td align="center">…</td></tr></tbody></table><p>在面对第一个值是全部数据中最小的数据时，每次比较是都需要判断是否记录，会比较耗时，否则会出现越界问题。解决方法是在最前面插入一个值，作为哨兵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span>(<span class="params">self, <span class="built_in">list</span></span>):</span>  </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    直接插入排序</span></span><br><span class="line"><span class="string">    :param list: 需要排序的列表</span></span><br><span class="line"><span class="string">    :return: list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">list</span>[j] &lt; <span class="built_in">list</span>[j - <span class="number">1</span>]:</span><br><span class="line">                <span class="built_in">list</span>[j], <span class="built_in">list</span>[j - <span class="number">1</span>] = <span class="built_in">list</span>[j - <span class="number">1</span>], <span class="built_in">list</span>[j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这里是没有设置哨兵的形式！！！</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="二分法插入排序"><a href="#二分法插入排序" class="headerlink" title="二分法插入排序"></a>二分法插入排序</h3><p>二分法插入排序是直接插入排序的升级，每次插入时，前 <em>i-1</em>个都时有序的了。将记录的排序码<em>list[i]*和已排序的前 *i-1</em>个的中间位置进行比较，如果小于则在前半部分继续使用二分法，否则在后半部分使用二分法；一直到查找范围都是空的时候，即可确定key[i]的插入位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_sort</span>(<span class="params">self, <span class="built_in">list</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    二分法插入排序</span></span><br><span class="line"><span class="string">    :param list: 需要排序的列表</span></span><br><span class="line"><span class="string">    :return: list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">        low = <span class="number">0</span></span><br><span class="line">        high = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">list</span>[mid] &gt; <span class="built_in">list</span>[i]:</span><br><span class="line">                high = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, low, -<span class="number">1</span>):</span><br><span class="line">            <span class="built_in">list</span>[j] = <span class="built_in">list</span>[j - <span class="number">1</span>]</span><br><span class="line">        <span class="built_in">list</span>[low] = <span class="built_in">list</span>[i]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span></span><br></pre></td></tr></table></figure><h3 id="表插入排序"><a href="#表插入排序" class="headerlink" title="表插入排序"></a>表插入排序</h3><p>表插入排序改变了实现方式，在前两个排序算法中，都是通过改变内存的值来排序的，表插入排序方式则是不同，它是通过改变指针域（相对有指针的语言来讲）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># define a record type</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">recordtype</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.key = <span class="literal">None</span></span><br><span class="line">        self.link = <span class="literal">None</span></span><br><span class="line">        self.other = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">table</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, maxsize</span>):</span></span><br><span class="line">        self.r = recordtype * (maxsize + <span class="number">1</span>)</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tableinsertsort</span>(<span class="params">self, <span class="built_in">list</span></span>):</span></span><br><span class="line">        self.r[<span class="number">0</span>].link = <span class="number">1</span> <span class="comment"># 初始化</span></span><br><span class="line">        self.r[<span class="number">1</span>].link = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">            q = <span class="number">0</span></span><br><span class="line">            p = self.r[<span class="number">0</span>].link</span><br><span class="line">            <span class="keyword">while</span> p != <span class="literal">None</span> <span class="keyword">and</span> self.r[i] &gt;= self.r[p].key: <span class="comment"># 找到插入位置</span></span><br><span class="line">                q = p</span><br><span class="line">                p = self.r[p].link </span><br><span class="line">            self.r[i].link = p <span class="comment"># 将新元素插入到p的前面</span></span><br><span class="line">            self.r[q].link = i</span><br></pre></td></tr></table></figure><h3 id="shell插入排序"><a href="#shell插入排序" class="headerlink" title="shell插入排序"></a>shell插入排序</h3><p>shell排序算法由D.L.Shell 提出，又称缩小增量排序算法。 主要思路就是按照某种规律将表分成若干组，然后若干组各自排序完后再从新分组排序（注：每次分组数目会减少），这样重复的做，直到分组数为1再进行一次插入排序就完成排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shellinsertsord</span>(<span class="params">self, <span class="built_in">list</span></span>):</span></span><br><span class="line">    d = self.size // <span class="number">2</span> <span class="comment"># 分组个数</span></span><br><span class="line">    <span class="keyword">while</span> d &gt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(d + <span class="number">1</span>, self.size):</span><br><span class="line">            j = i - d</span><br><span class="line">            <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> self.r[<span class="number">0</span>].key &lt; self.r[j].key:</span><br><span class="line">                self.r[j + d] = self.r[j]</span><br><span class="line">                j -= d</span><br><span class="line">            self.r[j + d] = self.r[<span class="number">0</span>]</span><br><span class="line">        d = d // <span class="number">2</span></span><br></pre></td></tr></table></figure><p>shell跟表插入排序都是针对有指针操作的语言而言来讲，相对于直接与二分直接这两种快的，但对于python而言，这两种都是脱裤子放屁的行为</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h3><h3 id="树型选择排序"><a href="#树型选择排序" class="headerlink" title="树型选择排序"></a>树型选择排序</h3><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><h2 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础的排序算法&quot;&gt;&lt;a href=&quot;#基础的排序算法&quot; class=&quot;headerlink&quot; title=&quot;基础的排序算法&quot;&gt;&lt;/a&gt;基础的排序算法&lt;/h1&gt;&lt;h2 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="杂七杂八" scheme="https://www.whkblog.work/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
    <category term="python" scheme="https://www.whkblog.work/tags/python/"/>
    
    <category term="排序算法" scheme="https://www.whkblog.work/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据库优化</title>
    <link href="https://www.whkblog.work/2022/04/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/"/>
    <id>https://www.whkblog.work/2022/04/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/</id>
    <published>2022-04-07T12:59:14.000Z</published>
    <updated>2022-04-19T02:06:00.147Z</updated>
    
    <content type="html"><![CDATA[<p>对于 数据库查询语句而言，都是大差不差的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">DISTINCT</span> <span class="operator">&lt;</span><span class="keyword">select</span> list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">join</span> type<span class="operator">&gt;</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span><span class="keyword">join</span> <span class="keyword">condition</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="operator">&lt;</span>wherer <span class="keyword">condition</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span><span class="keyword">group</span> <span class="keyword">by</span> list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="operator">&lt;</span><span class="keyword">having</span> <span class="keyword">condition</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">condition</span><span class="operator">&gt;</span></span><br><span class="line">LIMIT <span class="operator">&lt;</span>limit number<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h1 id="数据库的查询优化"><a href="#数据库的查询优化" class="headerlink" title="数据库的查询优化"></a>数据库的查询优化</h1><h3 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h3><p>查询优化分为代数优化和物理优化；代数优化是指关系代数表达式的优化，既按照一定的规则，通过对关系代数进行等价交换，改变代数表达式中操作的次序和组合，使查询更高效；物理优化，则是指存取路径和底层操作算法的选择。选择的一句可以是基于规则的，也可以是基于代价的，还可以是基于语义的</p><p>对于物理层面来讲的话，是设计数据人员需要考虑的，对于开发者而言，主要的优化就是代数优化了</p><p>对于查询语句的优化，主要遵循以下五个原则</p><ol><li>减少数据访问： 设置合理的字段类型，启用压缩，通过索引访问等减少磁盘IO</li><li>返回更少的数据： 只返回需要的字段和数据分页处理 减少磁盘io及网络io</li><li>减少交互次数： 批量DML操作，函数存储等减少数据连接次数</li><li>减少服务器CPU开销： 尽量减少数据库排序操作以及全表查询，减少cpu 内存占用</li><li>利用更多资源： 使用表分区，可以增加并行操作，更大限度利用cpu资源</li></ol><p>总结而言，就是要最大化的利用索引，比米娜全表扫描的操作，减少无效数据的查询</p><h2 id="SQL优化策略"><a href="#SQL优化策略" class="headerlink" title="SQL优化策略"></a>SQL优化策略</h2><p>【优化总结口诀】<br>        全值匹配我最爱，最左前缀要遵守；<br>        带头大哥不能死，中间兄弟不能断；<br>        索引列上少计算，范围之后全失效；<br>        Like百分写最右，覆盖索引不写星；<br>        不等空值还有or，索引失效要少用；<br>        VAR引号不可丢，SQL高级也不难！</p><p>对于SQL的优化而言，一般而言都是适用于较大的场景</p><h3 id="避免不走索引的场景"><a href="#避免不走索引的场景" class="headerlink" title="避免不走索引的场景"></a>避免不走索引的场景</h3><p>避免在字段开头模糊查询，尽量在字段后面使用模糊查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> T <span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> &quot;%陈%&quot;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> T <span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> &quot;陈%&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于 数据库查询语句而言，都是大差不差的&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    <category term="杂七杂八" scheme="https://www.whkblog.work/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
    <category term="数据库" scheme="https://www.whkblog.work/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>DataStructure</title>
    <link href="https://www.whkblog.work/2022/04/06/DataStructure/"/>
    <id>https://www.whkblog.work/2022/04/06/DataStructure/</id>
    <published>2022-04-06T07:50:48.000Z</published>
    <updated>2022-04-12T08:24:56.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构复习"><a href="#数据结构复习" class="headerlink" title="数据结构复习"></a>数据结构复习</h1><p>数据结构分为线性结构和非线性结构</p><p>线性结构有：线性表、栈、队列、数组、</p><p>非线性结构：树形结构、图形结构、集合结构</p><p><img src="https://img2.baidu.com/it/u=3942158718,1762626381&fm=253&fmt=auto&app=138&f=PNG?w=545&h=298"></p><h1 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h1><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>线性表是一个线性结构，它是一个含有n≥0个节点的有限序列</p><p>线性表在计算机中存储基本上是采用了顺序存储和链式存储两种方式</p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>线性表采用顺序存储的方式存储就称为顺序表。这个顺序表在python中我感觉就是列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SequList</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模拟实现顺序表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.data = []</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, index, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        插入顺序表</span></span><br><span class="line"><span class="string">        :param index: 插入位置</span></span><br><span class="line"><span class="string">        :param value:  插入值</span></span><br><span class="line"><span class="string">        :return: 无</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt; self.size:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;index out of range&quot;</span>)</span><br><span class="line">        self.data.insert(index, value)</span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        打印顺序表内容</span></span><br><span class="line"><span class="string">        :return: 无</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.size == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;list is empty&quot;</span>)</span><br><span class="line">        print(self.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        查找顺序表中是否存在某个值</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.size == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;list is empty&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">in</span> self.data:</span><br><span class="line">            <span class="keyword">return</span> self.data.index(value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        删除顺序表内容</span></span><br><span class="line"><span class="string">        :param index:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt; self.size:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;index out of range&quot;</span>)</span><br><span class="line">        self.data.pop(index)</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈是一种特殊的线性表，特殊的地方在于插入和删除都是在表的同一端进行，插入称为进栈，删除称为出栈，具有<strong>先进后出</strong>的特点这里我使用python模拟实现了一下栈。</p><p><em>栈可用于子程序的条用，处理递归条用，表达式的转换与求职，后面二叉树的遍历也是需要使用到的，在图的DFS(深度优先遍历)也是需要的</em></p><p>但是，我上网查询了一下关于python栈的问题，有一个heapq的内置堆栈库可以用来是实现栈。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">stack</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模拟实现那堆栈</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.data = []</span><br><span class="line">        self.top = <span class="number">0</span>  <span class="comment"># 栈顶指针</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_top_val</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取栈顶值</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.top == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;stack is empty&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.data[self.top - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        压栈</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.data.append(value)</span><br><span class="line">        self.top += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        出栈</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.top == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;stack is empty&quot;</span>)</span><br><span class="line">        self.top -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.data.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        打印栈内容</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.top == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;stack is empty&quot;</span>)</span><br><span class="line">        print(self.data)</span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列也是一种特殊的线性表，它是<strong>先进先出</strong>，一端为出口，一端为进口，插入删除分别称为入队和出队</p><p>下面是我使用python模拟实现的队列,</p><p>实际上来说python官方是自带一个Queue的库的，实际使用时直接调用就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">queue</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模拟实现队列</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.data = []</span><br><span class="line">        self.front = <span class="number">0</span></span><br><span class="line">        self.rear = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        入队</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.data.append(value)</span><br><span class="line">        self.rear += <span class="number">1</span>  <span class="comment"># 入队</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        出队</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.front == self.rear:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;queue is empty&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.front += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        打印队列内容</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.front == self.rear:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;queue is empty&quot;</span>)</span><br><span class="line">        print(self.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_front_val</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取队首</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.front == self.rear:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;queue is empty&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.data[self.front]</span><br></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表是线性表的链式实现方式，对于链表，数据存储在一个结点当中，一个结点分为两个部分，一个是data一个是索引next（指向下一个结点），在c语言中就是一个指针指向下一个结点的地址</p><p>python中模拟实现结点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    定义结点</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.data = value</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>python中实现单链表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模式实现单链表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, node=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.head = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">length</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取链表长度</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        length = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> self.head:</span><br><span class="line">            self.head = self.head.<span class="built_in">next</span></span><br><span class="line">            length += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, value, index</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        在链表指定位置插入值为value的结点</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :param index:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt; self.length():</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;index out of range&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">            self.head = Node(value)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index - <span class="number">1</span>):</span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line">        node.<span class="built_in">next</span> = Node(value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        删除指定位置的结点</span></span><br><span class="line"><span class="string">        :param index:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt; self.length():</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;index out of range&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index - <span class="number">1</span>):</span><br><span class="line">            self.head = self.head.<span class="built_in">next</span></span><br><span class="line">        self.head.<span class="built_in">next</span> = self.head.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        打印单链表</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.head:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;list is empty&quot;</span>)</span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            print(node.data)</span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>链表不止有单链表，还有双链表（拥有两个指针，分别指向前后结点）啥的</p><h1 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a>非线性结构</h1><p>对于非线性结构，与链表非常相似，数据都是存储在结点中，每个结点还有多个指针指向其他结点</p><p>由于本文是使用python来模拟实现，在实际开发的时候，不推荐使用这种结构，毕竟python本身就以及比较慢了（相交其他语言来说），而且python官方也是推荐使用列表、字典等数据结构来解决问题</p><p><a href="https://github.com/keon/algorithms,%E8%BF%99%E4%B8%AAgithub%E4%BB%93%E5%BA%93%E9%87%8C%E9%9D%A2%E4%B9%9F%E6%9C%89python%E7%B1%BB%E7%9A%84%E5%90%84%E7%A7%8D%E7%AE%97%E6%B3%95">https://github.com/keon/algorithms,这个github仓库里面也有python类的各种算法</a></p><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p>是由<em>n(n≥0</em>)个有限节点组成一个具有层次关系的<a href="https://baike.baidu.com/item/%E9%9B%86%E5%90%88/2908117">集合</a>。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：</p><p>每个节点有零个或多个子节点；没有父节点的节点称为根节点；每一个非根节点有且只有一个父节点；除了根节点外，每个子节点可以分为多个不相交的子树。</p><p>树（<em>tree</em>）是包含 n(n≥0) [2] 个节点，当 n=0 时，称为空树，非空树中</p><p><img src="https://bkimg.cdn.bcebos.com/formula/978ecf3f98f22ff38e1cf0a9fcdd46c3.svg" alt="img"></p><p>条边的有穷集，在非空树中：</p><p>（1）每个元素称为节点（*<a href="https://baike.baidu.com/item/node/4689680">node</a>*）。</p><p>（2）有一个特定的节点被称为根节点或树根（*<a href="https://baike.baidu.com/item/root/73226">root</a>*）。</p><p>（3）除根节点之外的其余数据元素被分为</p><p><img src="https://bkimg.cdn.bcebos.com/formula/6576249470c12096c755423254a81ac5.svg" alt="img"></p><p>个互不相交的集合</p><p><img src="https://bkimg.cdn.bcebos.com/formula/77b7f3b103abcd51d5447c6c4b721e76.svg" alt="img"></p><p>，其中每一个集合</p><p><img src="https://bkimg.cdn.bcebos.com/formula/4a6a0815df2fe3a069937f66bd9dc0d9.svg" alt="img"></p><p>本身也是一棵树，被称作原树的子树（<em>subtree</em>）。</p><p>树常用3种表示方法：双亲表示法、孩子表示法和孩子双亲表示法</p><p>我校教程中，主要是介绍的二叉树及其变种，不过我这里使用B树开始打头（主要为了面试，看的面经中，B树什么的更多）</p><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><p>B树（B-树）一种平衡多路查找，在大多数的</p><p>（Self-balancing search trees)，比如 AVL 树 和红黑树，都假设所有的数据放在主存当中.</p><h3 id="B-树的特性"><a href="#B-树的特性" class="headerlink" title="B 树的特性"></a><strong>B 树的特性</strong></h3><ol><li>所有的叶子结点都出现在同一层上，并且不带信息(可以看做是外部结点或查找失败的结点，实际上这些结点不存在，指向这些结点的指针为空)。</li><li>每个结点包含的关键字个数有上界和下界。用一个被称为 B-树的 <strong>最小度数</strong> 的固定整数 <img src="https://www.zhihu.com/equation?tex=t+%5Cge+2" alt="[公式]"> 来表示这些界 ，其中 <img src="https://www.zhihu.com/equation?tex=t" alt="[公式]"> 取决于磁盘块的大小：<br>a.除根结点以外的每个结点必须至少有 <img src="https://www.zhihu.com/equation?tex=t-1" alt="[公式]"> 个关键字。因此，除了根结点以外的每个内部结点有 t 个孩子。如果树非空，根结点至少有一个关键字。<br>b. 每个结点至多包含 <img src="https://www.zhihu.com/equation?tex=2t+-1" alt="[公式]"> 个关键字。</li><li>一个包含 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 个关键字的结点有 <img src="https://www.zhihu.com/equation?tex=x+1" alt="[公式]"> 个孩子；</li><li>一个结点中的所有关键字升序排列，两个关键字 <img src="https://www.zhihu.com/equation?tex=k_1" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=k_2" alt="[公式]"> 之间的孩子结点的所有关键字 key 在 <img src="https://www.zhihu.com/equation?tex=(k_1,k_2)" alt="[公式]"> 的范围之内。</li><li>与二叉排序树不同， B-树的搜索是从根结点开始，根据结点的孩子树做多路分支选择，而二叉排序树做的是二路分支选择，每一次判断都会进行一次磁盘 I/O操作。</li><li>与其他平很二叉树类似，B-树查找、插入和删除操作的时间复杂度为 <img src="https://www.zhihu.com/equation?tex=O(%5Clog+n)" alt="[公式]"> 量级。</li></ol><h3 id="树结点类"><a href="#树结点类" class="headerlink" title="树结点类"></a>树结点类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    树结点</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.data = value</span><br><span class="line">        self.children = []</span><br><span class="line">       </span><br></pre></td></tr></table></figure><h3 id="B树python模拟实现"><a href="#B树python模拟实现" class="headerlink" title="B树python模拟实现"></a>B树python模拟实现</h3><p>对于树而言，主要操作就是增删改查，遍历以及求树的高度深度叶子结点啥的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BTree</span>:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">模拟实现B树</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,node=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.root = node</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        插入</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">            self.root = TreeNode(value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.insert_node(self.root, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_node</span>(<span class="params">self, node, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        插入结点</span></span><br><span class="line"><span class="string">        :param node:</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> value &lt; node.data:</span><br><span class="line">            <span class="keyword">if</span> node.children:</span><br><span class="line">                self.insert_node(node.children[<span class="number">0</span>], value)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node.children.append(TreeNode(value))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> node.children:</span><br><span class="line">                self.insert_node(node.children[-<span class="number">1</span>], value)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node.children.append(TreeNode(value))</span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        删除</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;tree is empty&quot;</span>)</span><br><span class="line">        self.delete_node(self.root, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_node</span>(<span class="params">self, node, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        删除结点</span></span><br><span class="line"><span class="string">        :param node:</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> node.data == value:</span><br><span class="line">            node.data = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> node.children:</span><br><span class="line">            <span class="keyword">if</span> self.delete_node(child, value):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;value not found&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        查找</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;tree is empty&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.search_node(self.root, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_node</span>(<span class="params">self, node, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        查找结点</span></span><br><span class="line"><span class="string">        :param node:</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> node.data == value:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> node.children:</span><br><span class="line">            <span class="keyword">if</span> self.search_node(child, value):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span> <span class="comment"># 这里就没有写一个改了，改感觉和展示，查差不多</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        打印</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;tree is empty&quot;</span>)</span><br><span class="line">        self.display_node(self.root)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display_node</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        打印结点</span></span><br><span class="line"><span class="string">        :param node:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        print(node.data)</span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> node.children:</span><br><span class="line">            self.display_node(child)</span><br></pre></td></tr></table></figure><p>然后这边是树的遍历，一般而言，树的遍历分为前序遍历、中序遍历、后序遍历、以及层次遍历，</p><p>这几个遍历都是故名思意的，从树的前面（根）开始，从中间开始（一般来说是最左的那个结点，在我看来，感觉和后续遍历没什么区别）、从后面（叶子结点开始），层次遍历就是一层一层，从根到叶子。对于树的遍历来说，可以使用递归和非递归，这里就使用递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pre_order</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       先序遍历</span></span><br><span class="line"><span class="string">       :return:</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">           <span class="keyword">raise</span> Exception(<span class="string">&quot;tree is empty&quot;</span>)</span><br><span class="line">       self.pre_order_node(self.root)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">pre_order_node</span>(<span class="params">self, node</span>):</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       先序遍历结点</span></span><br><span class="line"><span class="string">       :param node:</span></span><br><span class="line"><span class="string">       :return:</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">           <span class="keyword">return</span></span><br><span class="line">       print(node.data)</span><br><span class="line">       <span class="keyword">for</span> child <span class="keyword">in</span> node.children:</span><br><span class="line">           self.pre_order_node(child)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">in_order</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       中序遍历</span></span><br><span class="line"><span class="string">       :return:</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">           <span class="keyword">raise</span> Exception(<span class="string">&quot;tree is empty&quot;</span>)</span><br><span class="line">       self.in_order_node(self.root)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">in_order_node</span>(<span class="params">self, node</span>):</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       中序遍历结点</span></span><br><span class="line"><span class="string">       :param node:</span></span><br><span class="line"><span class="string">       :return:</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">           <span class="keyword">return</span></span><br><span class="line">       <span class="keyword">for</span> child <span class="keyword">in</span> node.children:</span><br><span class="line">           self.in_order_node(child)</span><br><span class="line">       print(node.data)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">post_order</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       后序遍历</span></span><br><span class="line"><span class="string">       :return:</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">           <span class="keyword">raise</span> Exception(<span class="string">&quot;tree is empty&quot;</span>)</span><br><span class="line">       self.post_order_node(self.root)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">post_order_node</span>(<span class="params">self, node</span>):</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       后序遍历结点</span></span><br><span class="line"><span class="string">       :param node:</span></span><br><span class="line"><span class="string">       :return:</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">           <span class="keyword">return</span></span><br><span class="line">       <span class="keyword">for</span> child <span class="keyword">in</span> node.children:</span><br><span class="line">           self.post_order_node(child)</span><br><span class="line">       print(node.data)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">level_order</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       层序遍历</span></span><br><span class="line"><span class="string">       :return:</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">           <span class="keyword">raise</span> Exception(<span class="string">&quot;tree is empty&quot;</span>)</span><br><span class="line">       self.level_order_node(self.root)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">level_order_node</span>(<span class="params">self, node</span>):</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       层序遍历结点</span></span><br><span class="line"><span class="string">       对于层次遍历而言，这里需要注意，需先将当前一层的数据遍历完再进行下一层</span></span><br><span class="line"><span class="string">       可以使用队列来实现，在遍历某一结点的同时，将其子结点添加到队列的后面。</span></span><br><span class="line"><span class="string">       如果需要把每一层的数据都分割开，可以在每次while循环时，获取到当前队列的大小，然后通过for循环开始当前一层</span></span><br><span class="line"><span class="string">       :param node:</span></span><br><span class="line"><span class="string">       :return:</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">           <span class="keyword">return</span></span><br><span class="line">       queue = [node]  </span><br><span class="line">       <span class="keyword">while</span> queue:</span><br><span class="line">           <span class="comment"># temp = []</span></span><br><span class="line">           <span class="comment"># for i in range(queue.size()):</span></span><br><span class="line">           node = queue.pop(<span class="number">0</span>)</span><br><span class="line">           print(node.data) <span class="comment">#temp.append(node.data)</span></span><br><span class="line">           <span class="keyword">for</span> child <span class="keyword">in</span> node.children:</span><br><span class="line">               queue.append(child)</span><br><span class="line">           <span class="comment"># print(temp) or ans.append(temp)</span></span><br></pre></td></tr></table></figure><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><p><strong>B+树</strong>是在B树的基础上基础上进行改造，它的数据都在叶子节点，<strong>同时叶子节点之间还加了指针形成链表</strong></p><ul><li>有k个子结点的结点必然有k个关键码；</li><li>非叶结点仅具有索引作用，跟记录有关的信息均存放在叶结点中。</li><li>树的所有叶结点构成一个有序链表，可以按照关键码排序的次序遍历全部记录，便于区间查找和遍历。</li><li>B+ 树的优点在于：由于B+树在内部节点上不包含数据信息，因此在内存页中能够存放更多的key。 数据存放的更加紧密，具有更好的空间局部性。因此访问叶子节点上关联的数据也具有更好的缓存命中率。B+树的叶子结点都是相连的，因此对整棵树的便利只需要一次线性遍历叶子结点即可。</li></ul><p>这里我就没对B+树进行模拟了</p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p>图是一种较线性表和树更加复杂的数据结构。在图形结构中，结点之间的关系可以是任意的，图中任意两个数据元素之间都可能相关。</p><p>图(Graph)是由顶点的有穷非空集合V ( G ) V(G)V(G)和顶点之间边的集合E ( G ) E(G)E(G)组成，通常表示为: G = ( V , E ) G=(V,E)G=(V,E)，其中，G GG表示个图，V VV是图G GG中顶点的集合，E EE是图G GG中边的集合。若V = { v 1 , v 2 , . . . , v n } V= {v_1, v_2,…,v_n}V={v 1 ,v 2,…,v n}，则用∣ V ∣ |V|∣V∣表示图G GG中顶点的个数，也称图G GG的阶，E = { ( u , v ) ∣ u ∈ V , v ∈ V } E= {(u, v) |u∈V, v∈V}E={(u,v)∣u∈V,v∈V}，用∣ E ∣ |E|∣E∣表示图G GG中边的条数。</p><p>图分为有向图和无向图。二者的区别就是，对于某两个节点之间的连接是否有向，例如a-&gt;b 于a-b</p><p><img src="https://img-blog.csdnimg.cn/20210227111745661.png#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/20210227112230368.png#pic_center"></p><p>对于图而言，通常都是采用邻接矩阵/邻接表来存储图的信息</p><p>一般而言，<strong>一个一维数组存储图中顶点信息，一个二维数组(称为邻接矩阵)存储图中的边或弧的信息。</strong></p><h3 id="模拟实现"><a href="#模拟实现" class="headerlink" title="模拟实现"></a>模拟实现</h3><h4 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Vertex</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    顶点类</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    边类</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, start_vertex, end_vertex</span>):</span></span><br><span class="line">        self.start = start_vertex</span><br><span class="line">        self.end = end_vertex</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="基础功能实现"><a href="#基础功能实现" class="headerlink" title="基础功能实现"></a>基础功能实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模拟实现图</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, vertex_num</span>):</span></span><br><span class="line">        self.vertex_num = vertex_num  <span class="comment"># 顶点数</span></span><br><span class="line">        self.vertex_list = []  <span class="comment"># 顶点列表</span></span><br><span class="line">        self.edge_num = <span class="number">0</span>  <span class="comment"># 边数</span></span><br><span class="line">        self.edge_list = []  <span class="comment"># 边列表</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_vertex</span>(<span class="params">self, vertex</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        添加顶点</span></span><br><span class="line"><span class="string">        :param vertex:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.vertex_list.append(vertex)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge</span>(<span class="params">self, edge</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        添加边</span></span><br><span class="line"><span class="string">        :param edge:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.edge_list.append(edge)</span><br><span class="line">        self.edge_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_vertex_num</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取顶点数</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.vertex_num</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_edge_num</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取边数</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.edge_num</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_vertex_list</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取顶点列表</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.vertex_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_edge_list</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取边列表</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.edge_list</span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>对于图而言，有两种遍历方式，一种是深度优先遍历，一种是广度优先遍历</p><p><strong>深度优先遍历</strong>(DFS)类似于树的先序遍历。如其名称中所暗含的意思一样，这种搜索算法所遵循的搜索策略是尽可能“深”地搜索一个图。</p><p><strong>广度优先遍历</strong>(BFS)是一种分层的查找过程，每向前走一步可能访问一批顶点，不像深度优先搜索那样有往回退的情况，因此它不是一个递归的算法。</p><p>二者都是指定一个开始节点，然后进行遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">self, start_vertex</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    深度优先遍历</span></span><br><span class="line"><span class="string">    :param start_vertex:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.vertex_list:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;vertex list is empty&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.edge_list:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;edge list is empty&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> start_vertex <span class="keyword">not</span> <span class="keyword">in</span> self.vertex_list:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;start vertex is not in vertex list&quot;</span>)</span><br><span class="line">    visited = [<span class="literal">False</span>] * self.vertex_num</span><br><span class="line">    self.dfs_node(start_vertex, visited)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span>(<span class="params">self, start_vertex</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    广度优先遍历</span></span><br><span class="line"><span class="string">    :param start_vertex:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> start_vertex:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;start_vertex is empty&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> start_vertex <span class="keyword">not</span> <span class="keyword">in</span> self.vertex_list:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;start_vertex is not in vertex_list&quot;</span>)</span><br><span class="line">    visited = [<span class="literal">False</span>] * self.vertex_num</span><br><span class="line">    que = [start_vertex]</span><br><span class="line">    visited[start_vertex] = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> que:</span><br><span class="line">        vertex = que.pop(<span class="number">0</span>)</span><br><span class="line">        print(vertex)</span><br><span class="line">        <span class="keyword">for</span> edge <span class="keyword">in</span> self.edge_list:</span><br><span class="line">            <span class="keyword">if</span> edge.start_vertex == vertex <span class="keyword">and</span> <span class="keyword">not</span> visited[edge.end_vertex]:</span><br><span class="line">                que.append(edge.end_vertex)</span><br><span class="line">                visited[edge.end_vertex] = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>这里我还利用了一下python的可视化，写了个展示图关系的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw_graph</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        利用python可视化，画出图的结构</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        G = nx.Graph()</span><br><span class="line">        <span class="keyword">for</span> edge <span class="keyword">in</span> self.edge_list:</span><br><span class="line">            G.add_edge(edge.start, edge.end)</span><br><span class="line">        pos = nx.spring_layout(G)</span><br><span class="line">        nx.draw(G, pos, with_labels=<span class="literal">True</span>, node_size=<span class="number">500</span>)</span><br><span class="line">        plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据结构复习&quot;&gt;&lt;a href=&quot;#数据结构复习&quot; class=&quot;headerlink&quot; title=&quot;数据结构复习&quot;&gt;&lt;/a&gt;数据结构复习&lt;/h1&gt;&lt;p&gt;数据结构分为线性结构和非线性结构&lt;/p&gt;
&lt;p&gt;线性结构有：线性表、栈、队列、数组、&lt;/p&gt;
&lt;p&gt;非线性结</summary>
      
    
    
    
    <category term="杂七杂八" scheme="https://www.whkblog.work/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
    <category term="数据结构" scheme="https://www.whkblog.work/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>ComputerNetwork</title>
    <link href="https://www.whkblog.work/2022/04/06/ComputerNetwork/"/>
    <id>https://www.whkblog.work/2022/04/06/ComputerNetwork/</id>
    <published>2022-04-06T07:18:28.000Z</published>
    <updated>2022-04-18T06:19:12.268Z</updated>
    
    <content type="html"><![CDATA[<p>计网的一些面经，以及一些自己的小总结</p><h2 id="常见的网络传输协议"><a href="#常见的网络传输协议" class="headerlink" title="常见的网络传输协议"></a>常见的网络传输协议</h2><p>UDP、TCP、FT、HTTP、SMTP等等</p><h2 id="UDP和TCP"><a href="#UDP和TCP" class="headerlink" title="UDP和TCP"></a>UDP和TCP</h2><ul><li>TCP/IP 是互联网相关的各类协议族的总称，比如：TCP，UDP，IP，FTP，HTTP，ICMP，SMTP 等都属于 TCP/IP 族内的协议。</li><li>UDP协议全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在第四层——传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</li><li>TCP协议全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的RFC 793定义。TCP 是面向连接的、可靠的流协议。流就是指不间断的数据结构，你可以把它想象成排水管中的水流。</li></ul><table><thead><tr><th align="center"></th><th align="center">UDP</th><th align="center">TCP</th></tr></thead><tbody><tr><td align="center">是否连接</td><td align="center">无连接</td><td align="center">面向连接</td></tr><tr><td align="center">是否可靠</td><td align="center">不可靠传输，不使用流量控制和拥塞控制</td><td align="center">可靠传输，使用流量控制和拥塞控制</td></tr><tr><td align="center">连接对象个数</td><td align="center">支持一对一，一对多，多对一和多对多交互通信</td><td align="center">只能是一对一通信</td></tr><tr><td align="center">传输方式</td><td align="center">面向报文</td><td align="center">面向字节流</td></tr><tr><td align="center">首部开销</td><td align="center">首部开销小，仅8字节</td><td align="center">首部最小20字节，最大60字节</td></tr><tr><td align="center">适用场景</td><td align="center">适用于实时应用（IP电话、视频会议、直播等）</td><td align="center">适用于要求可靠传输的应用，例如文件传输</td></tr></tbody></table><h4 id="TCP协议的三次握手跟四次挥手"><a href="#TCP协议的三次握手跟四次挥手" class="headerlink" title="TCP协议的三次握手跟四次挥手"></a>TCP协议的三次握手跟四次挥手</h4><p>三次握手：</p><ul><li>第一次握手就是客户端给服务器端发送一个报文，</li><li>第二次就是服务器收到报文之后，会应答一个报文给客户端，</li><li>第三次握手就是客户端收到报文后再给服务器发送一个报文，三次握手就成功了<br>作用是为了确认双方的接收与发送能力是否正常。</li></ul><p>四次挥手：客户端先发起关闭请求</p><ul><li><p>第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于FIN_WAIT1状态。</p></li><li><p>第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 + 1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT状态。</p></li><li><p>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。<br>客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +</p></li><li><p>第四次挥手：作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态<br>服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。</p></li></ul><p>更详细可以看看<a href="https://www.cnblogs.com/fundebug/p/differences-of-tcp-and-udp.html">https://www.cnblogs.com/fundebug/p/differences-of-tcp-and-udp.html</a></p><h2 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h2><p>基于tcp/ip的应用层协议</p><h3 id="post、get的区别"><a href="#post、get的区别" class="headerlink" title="post、get的区别"></a>post、get的区别</h3><p>GET多用于获取信息，是无副作用的，是幂等的（没有副作用被称为“幂等“（Idempotent)），可缓存，url长度有限，由浏览器设定，理论上是无限长度的</p><p>POST多用于上传数据，有副作用，非幂等，不可缓存</p><table><thead><tr><th align="center">后退按钮刷新</th><th align="center">无害</th><th align="center">数据会被重新提交（浏览器应该告知用户数据会被重新提交）。</th></tr></thead><tbody><tr><td align="center">书签</td><td align="center">可收藏为书签</td><td align="center">不可收藏为书签</td></tr><tr><td align="center">缓存</td><td align="center">能被缓存</td><td align="center">不能缓存</td></tr><tr><td align="center">编码类型</td><td align="center">application/x-www-form-urlencoded</td><td align="center">application/x-www-form-urlencoded or multipart/form-data。为二进制数据使用多重编码。</td></tr><tr><td align="center">历史</td><td align="center">参数保留在浏览器历史中。</td><td align="center">参数不会保存在浏览器历史中。</td></tr><tr><td align="center">对数据长度的限制</td><td align="center">是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。</td><td align="center">无限制。</td></tr><tr><td align="center">对数据类型的限制</td><td align="center">只允许 ASCII 字符。</td><td align="center">没有限制。也允许二进制数据。</td></tr><tr><td align="center">安全性</td><td align="center">与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。  在发送密码或其他敏感信息时绝不要使用 GET ！</td><td align="center">POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</td></tr><tr><td align="center">可见性</td><td align="center">数据在 URL 中对所有人都是可见的。</td><td align="center">数据不会显示在 URL 中。</td></tr></tbody></table><p>常见状态码及意义</p><p>超详细可看这里：<a href="https://seo.juziseo.com/doc/http_code/">https://seo.juziseo.com/doc/http_code/</a></p><table><thead><tr><th align="center">状态码</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">200 OK</td><td align="center">请求正常处理完毕</td></tr><tr><td align="center">204 No Content</td><td align="center">请求成功处理，没有实体的主体返回</td></tr><tr><td align="center">206 Partial Content</td><td align="center">GET范围请求已成功处理</td></tr><tr><td align="center">301 Moved Permanently</td><td align="center">永久重定向，资源已永久分配新URL</td></tr><tr><td align="center">302 Found</td><td align="center">临时重定向，资源已零食分配新URL</td></tr><tr><td align="center">303 See Other</td><td align="center">临时重定向，希望使用GET定向获取</td></tr><tr><td align="center">304 Not Modified</td><td align="center">发送的附带条件请求为满足</td></tr><tr><td align="center">307 Temporary Redirect</td><td align="center">临时重定向，POST不会改变成GET</td></tr><tr><td align="center">400 Bad Request</td><td align="center">请求报文语法错误或参数错误</td></tr><tr><td align="center">401 Unauthorized</td><td align="center">需要通过HTTP认证或则认证失败</td></tr><tr><td align="center">403 Forbidden</td><td align="center">请求资源被拒绝</td></tr><tr><td align="center">404 Not Found</td><td align="center">无法找到请求资源</td></tr><tr><td align="center">500 Internal Server Error</td><td align="center">服务器或web应用故障</td></tr><tr><td align="center">503 Service Unavailable</td><td align="center">服务器超负载或停机维护</td></tr></tbody></table><h3 id="https加密协议"><a href="#https加密协议" class="headerlink" title="https加密协议"></a>https加密协议</h3><p>参考链接<a href="https://www.cnblogs.com/wangdong811/p/10305281.html">https://www.cnblogs.com/wangdong811/p/10305281.html</a></p><p>https是一种加密传输协议，网站使用https后可以避免铭感信息被第三方获取。所以我们经常看见许多银行或者电子邮箱等安全级别较高的服务都采用https协议。具体表现为https开头，显示绿色安全锁、某些浏览器地址栏变成绿色。</p><p>https = 非对称加密+数字摘要+数字签名+对称加密</p><p>实际上来说，https 由http和SSL/TLS两部分组成</p><p>http就是普通的传输层协议、SSL(Secure Socket Layer)安全套接字协议、TLS(Transport Layer Security)运输层安全，后两者是用来增加运输层协议的安全</p><p><img src="https://www.whkblog.work/blog/images/IMG_20220418_140426.jpg" alt="image-20220418140519691"></p><p>https的工作过程是：</p><p>​    先由客户端发起https请求→服务器端的配置（向CA机构申请）→传送证书→客户端解析证书→传送加密信息→服务端解密信息</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;计网的一些面经，以及一些自己的小总结&lt;/p&gt;
&lt;h2 id=&quot;常见的网络传输协议&quot;&gt;&lt;a href=&quot;#常见的网络传输协议&quot; class=&quot;headerlink&quot; title=&quot;常见的网络传输协议&quot;&gt;&lt;/a&gt;常见的网络传输协议&lt;/h2&gt;&lt;p&gt;UDP、TCP、FT、HTTP、</summary>
      
    
    
    
    <category term="杂七杂八" scheme="https://www.whkblog.work/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
    <category term="面经" scheme="https://www.whkblog.work/tags/%E9%9D%A2%E7%BB%8F/"/>
    
    <category term="计算机网络" scheme="https://www.whkblog.work/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Git Learn</title>
    <link href="https://www.whkblog.work/2022/03/31/Git-Learn/"/>
    <id>https://www.whkblog.work/2022/03/31/Git-Learn/</id>
    <published>2022-03-31T12:17:57.000Z</published>
    <updated>2022-04-01T09:25:20.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GIT-使用复习"><a href="#GIT-使用复习" class="headerlink" title="GIT 使用复习"></a>GIT 使用复习</h1><p>git命令学习复习网站  <a href="https://learngitbranching.js.org/">https://learngitbranching.js.org</a></p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="提交命令"><a href="#提交命令" class="headerlink" title="提交命令"></a>提交命令</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git commit</span></span><br></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><h4 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;<span class="built_in">name</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;<span class="built_in">name</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="创建并切换"><a href="#创建并切换" class="headerlink" title="创建并切换"></a>创建并切换</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;your-branch-<span class="built_in">name</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="分支与合并"><a href="#分支与合并" class="headerlink" title="分支与合并"></a>分支与合并</h3><p>将一个分支与本分支合并</p><p>方法一</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">merge</span> &lt;<span class="keyword">name</span>&gt;</span><br></pre></td></tr></table></figure><p>方法二</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase &lt;<span class="built_in">name</span>&gt;</span><br></pre></td></tr></table></figure><p>二者之间的区别</p><p><img src="https://www.whkblog.work/blog/images/gitrebase_merge.jpg"></p><h2 id="高级命令"><a href="#高级命令" class="headerlink" title="高级命令"></a>高级命令</h2><h3 id="分离head"><a href="#分离head" class="headerlink" title="分离head"></a>分离head</h3><p>HEAD 是一个对当前检出记录的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。</p><p>HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。</p><p>HEAD 通常情况下是指向分支名的</p><h3 id="相对引用"><a href="#相对引用" class="headerlink" title="相对引用"></a>相对引用</h3><ul><li><p>使用 <code>^</code> 向上移动 1 个提交记录</p><ul><li><p><code>main^</code> 相当于“<code>main</code> 的父节点”。</p><p><code>main^^</code> 是 <code>main</code> 的第二个父节点</p></li></ul></li><li><p>使用 <code>~&lt;num&gt;</code> 向上移动多个提交记录，如 <code>~3</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> checkout &lt;name&gt;^ 表示向父节点移动</span><br><span class="line"><span class="attribute">git</span> checkout &lt;name&gt;~<span class="number">3</span> 表示向上移动<span class="number">3</span>个节点</span><br></pre></td></tr></table></figure></li><li><p>相对引用最多的就是移动分支。可以直接使用 <code>-f</code> 选项让分支指向另一个提交。例如:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> branch -f main HEAD~<span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="撤销变更"><a href="#撤销变更" class="headerlink" title="撤销变更"></a>撤销变更</h3><ol><li><p>git reset 只可用于本地分支</p></li><li><p>git revert 可用于远程撤销</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">reset</span> &lt;<span class="type">name</span>&gt;/Head</span><br></pre></td></tr></table></figure><h3 id="移动提交记录-整理提交记录"><a href="#移动提交记录-整理提交记录" class="headerlink" title="移动提交记录(整理提交记录)"></a>移动提交记录(整理提交记录)</h3></li></ol><h4 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h4><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick <span class="attribute">&lt;提交号&gt;</span>...</span><br></pre></td></tr></table></figure><p>例：git cherry pick c2 c4 将 c2、c4提交到当前目录下</p><h5 id="法二：交互式rebase"><a href="#法二：交互式rebase" class="headerlink" title="法二：交互式rebase"></a>法二：交互式rebase</h5><p>交互式 rebase 指的是使用带参数 <code>--interactive</code> 的 rebase 命令, 简写为 <code>-i</code></p><p>如果你在命令后增加了这个选项, Git 会打开一个 UI 界面并列出将要被复制到目标分支的备选提交记录，它还会显示每个提交记录的哈希值和提交说明，提交说明有助于你理解这个提交进行了哪些更改。</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i head<span class="symbol">^num</span></span><br></pre></td></tr></table></figure><h2 id="远程操作命令"><a href="#远程操作命令" class="headerlink" title="远程操作命令"></a>远程操作命令</h2><h3 id="push-amp-pull-git远程仓库"><a href="#push-amp-pull-git远程仓库" class="headerlink" title="push &amp; pull  git远程仓库"></a>push &amp; pull  git远程仓库</h3><p>将远程仓库克隆到本地</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">link</span></span><br></pre></td></tr></table></figure><p>从远程仓库获取数据</p><p>完成了仅有的但是很重要的两步:</p><ul><li>从远程仓库下载本地仓库中缺失的提交记录</li><li>更新远程分支指针(如 <code>o/main</code>)</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git fetch</span></span><br></pre></td></tr></table></figure><p>获取远程仓库数据，并且与本地仓库合并</p><p>合并git fetch与git merge的两步</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git pull</span></span><br></pre></td></tr></table></figure><p>将变更更新到远程仓库</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure><p>偏离问题的解决</p><ol><li>先将历史分支合并</li><li>向远程仓库提交</li></ol><p>具体可以看看learngitbranching里的教学</p><h2 id="远程仓库高级操作"><a href="#远程仓库高级操作" class="headerlink" title="远程仓库高级操作"></a>远程仓库高级操作</h2><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><h4 id="使用rebase"><a href="#使用rebase" class="headerlink" title="使用rebase"></a>使用rebase</h4><ul><li>将特性分支集成到 <code>main</code> 上</li><li>推送并更新远程分支</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将三个分支合并，并且推送到远程仓库</span></span><br><span class="line"><span class="attribute">git</span> fetch</span><br><span class="line"><span class="attribute">git</span> rebase o/master side<span class="number">1</span>   </span><br><span class="line"><span class="attribute">git</span> rebase side<span class="number">1</span> side<span class="number">2</span></span><br><span class="line"><span class="attribute">git</span> rebase side<span class="number">2</span> side<span class="number">3</span></span><br><span class="line"><span class="attribute">git</span> rebase side<span class="number">3</span> master</span><br><span class="line"><span class="attribute">git</span> push</span><br></pre></td></tr></table></figure><h4 id="使用merge"><a href="#使用merge" class="headerlink" title="使用merge"></a>使用merge</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="literal">master</span></span><br><span class="line">git pull origin <span class="literal">master</span></span><br><span class="line">git merge side1</span><br><span class="line">git merge side2</span><br><span class="line">git merge side3</span><br><span class="line">git push origin <span class="literal">master</span></span><br></pre></td></tr></table></figure><h3 id="远程追踪"><a href="#远程追踪" class="headerlink" title="远程追踪"></a>远程追踪</h3><h3 id="git-push参数"><a href="#git-push参数" class="headerlink" title="git push参数"></a>git push参数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push <span class="tag">&lt;<span class="name">remote</span>&gt;</span> <span class="tag">&lt;<span class="name">place</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要同时为源和目的地指定 <code>&lt;place&gt;</code> 的话，只需要用冒号 <code>:</code> 将二者连起来就可以了：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;source&gt;<span class="symbol">:&lt;destination&gt;</span></span><br></pre></td></tr></table></figure><h3 id="git-fetch参数"><a href="#git-fetch参数" class="headerlink" title="git fetch参数"></a>git fetch参数</h3><p><code>git fetch</code> 的参数和 <code>git push</code> 极其相似，其实就是push的方向</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch <span class="symbol">&lt;remote&gt;</span> <span class="symbol">&lt;place&gt;</span></span><br><span class="line">git fetch origin <span class="symbol">&lt;source&gt;</span>:<span class="symbol">&lt;destination&gt;</span>  </span><br><span class="line"># <span class="keyword">source</span> 现在指的是远程仓库中的位置，而 <span class="symbol">&lt;destination&gt;</span> 才是要放置提交的本地仓库的位</span><br></pre></td></tr></table></figure><h3 id="git-pull参数"><a href="#git-pull参数" class="headerlink" title="git pull参数"></a>git pull参数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull <span class="tag">&lt;<span class="name">remote</span>&gt;</span> <span class="tag">&lt;<span class="name">place</span>&gt;</span></span><br><span class="line">git pull origin <span class="tag">&lt;<span class="name">source</span>&gt;</span>:<span class="tag">&lt;<span class="name">destin</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GIT-使用复习&quot;&gt;&lt;a href=&quot;#GIT-使用复习&quot; class=&quot;headerlink&quot; title=&quot;GIT 使用复习&quot;&gt;&lt;/a&gt;GIT 使用复习&lt;/h1&gt;&lt;p&gt;git命令学习复习网站  &lt;a href=&quot;https://learngitbranchin</summary>
      
    
    
    
    
    <category term="git" scheme="https://www.whkblog.work/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>总结</title>
    <link href="https://www.whkblog.work/2022/03/31/%E6%80%BB%E7%BB%93/"/>
    <id>https://www.whkblog.work/2022/03/31/%E6%80%BB%E7%BB%93/</id>
    <published>2022-03-31T07:05:19.000Z</published>
    <updated>2022-06-20T05:52:33.918Z</updated>
    
    <content type="html"><![CDATA[<p>此文为总结网上各种面经文章以及个人问题而来，用以准备面试（持续更新）</p><p>文章内容来源</p><ul><li><a href="https://blog.csdn.net/qq7835144/article/details/117294737">https://blog.csdn.net/qq7835144/article/details/117294737</a></li><li><a href="https://blog.csdn.net/jiana_feng/article/details/118616650">https://blog.csdn.net/jiana_feng/article/details/118616650</a></li><li><a href="https://leetcode-cn.com/circle/article/ldqzNz/">https://leetcode-cn.com/circle/article/ldqzNz/</a></li><li><a href="https://zhuanlan.zhihu.com/p/54430650">https://zhuanlan.zhihu.com/p/54430650</a></li><li><a href="https://github.com/yongxinz/backend-interview">https://github.com/yongxinz/backend-interview</a></li></ul><p>文章共分为三个部分:</p><ol><li>python部分<ol><li>知识点部分</li><li>编程部分</li></ol></li><li>网络部分</li><li>数据库部分</li></ol><h1 id="python部分"><a href="#python部分" class="headerlink" title="python部分"></a>python部分</h1><h2 id="知识点部分"><a href="#知识点部分" class="headerlink" title="知识点部分"></a>知识点部分</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="可变数据类型与不可变数据类型"><a href="#可变数据类型与不可变数据类型" class="headerlink" title="可变数据类型与不可变数据类型"></a>可变数据类型与不可变数据类型</h4><ul><li>不可变数据类型：数字(number)、字符/字符串(char/string)、元组(tuple)</li><li>可变数据类型：列表(list)、集合(set)、字典(dict)</li></ul><h5 id="python中内置的数据结构有几种？"><a href="#python中内置的数据结构有几种？" class="headerlink" title="python中内置的数据结构有几种？"></a>python中内置的数据结构有几种？</h5><ul><li>整型 int、 长整型 long、浮点型 float、 复数 complex b. 字符串 str、 列表list、 元祖tuple c. 字典 dict 、 集合 set</li></ul><h4 id="python传参数是传值还是传址"><a href="#python传参数是传值还是传址" class="headerlink" title="python传参数是传值还是传址"></a>python传参数是传值还是传址</h4><ul><li>python中函数参数是应用传递（注意：不是值传递！！！）。对于不可变类型（数值型、字符型、元组），因变量不能修改，所以运算不会影响到变量自身；而对于可变类型（列表字典）来说，函数体运算可能会导致更改传入的参数变量</li></ul><h4 id="哪些操作会导致Python内存泄露？"><a href="#哪些操作会导致Python内存泄露？" class="headerlink" title="哪些操作会导致Python内存泄露？"></a>哪些操作会导致Python内存泄露？</h4><ul><li>内存中加载的数据量过于庞大，如一次从数据库取出过多数据； 一般比如数据查询未做分页处理。</li><li>集合类中有对对象的引用，使用完后未清空，使得JVM不能回收。</li><li>代码中存在死循环或循环产生过多重复的对象实体。</li><li>使用的第三方软件中的BUG； 一般引用第三方jar包过多会出现此类问题。</li><li>启动参数内存值设定的过小 。</li></ul><h4 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h4><ul><li>在函数内部再定义一个函数，并且这个函数用到了外边函数的变量，那么将这个函数以及用到的一些变量称之为闭包。</li></ul><h4 id="metaclass——元类"><a href="#metaclass——元类" class="headerlink" title="metaclass——元类"></a>metaclass——元类</h4><p> <a href="https://zhuanlan.zhihu.com/p/149126959">https://zhuanlan.zhihu.com/p/149126959</a> </p><h4 id="堆与栈"><a href="#堆与栈" class="headerlink" title="堆与栈"></a>堆与栈</h4><p>栈由操作系统自动分配释放 ，用于存放函数的参数值、局部变量等，其操作方式类似于数据结构中的栈。</p><p>堆由开发人员分配和释放， 若开发人员不释放，程序结束时由 OS 回收，分配方式类似于链表。</p><table><thead><tr><th></th><th>堆</th><th>栈</th></tr></thead><tbody><tr><td>管理方式</td><td>申请和释放由程序员控制，容易产生内存泄漏</td><td>由操作系统自动分配释放</td></tr><tr><td>空间大小</td><td>进程可申请的堆到校为虚拟内存大小</td><td>进程栈的大小64bit，windows默认1MB,64位linux默认10MB</td></tr><tr><td>生长方向</td><td>生长方向向上，内存地址由低到高</td><td>栈的生长方向向下，内存地址由高到低</td></tr><tr><td>分配方式</td><td>堆是动态分配的</td><td>有两种分配，静态分配（由操作系统完成）和动态分配（由函数完成）</td></tr><tr><td>分配效率</td><td>由c/c++提供的库函数申请与管理，实现机制复杂</td><td>栈由操作系统自动分配，会在硬件层级对栈提供支持，分配专门的寄存器存放栈的地址，有专门的指令执行进出栈</td></tr><tr><td>存放内容</td><td>堆，一般情况堆顶使用一个字节的空间来存放堆的大小，而堆中具体存放内容是由程序员来填充的</td><td>栈存放的内容，函数返回地址、相关参数、局部变量和寄存器内容等</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="语法部分"><a href="#语法部分" class="headerlink" title="语法部分"></a>语法部分</h3><h4 id="列表相关"><a href="#列表相关" class="headerlink" title="列表相关"></a>列表相关</h4><h5 id="深度拷贝、浅拷贝"><a href="#深度拷贝、浅拷贝" class="headerlink" title="深度拷贝、浅拷贝"></a>深度拷贝、浅拷贝</h5><ul><li>浅拷贝是指<strong>源对象与拷贝对象</strong>共用一份实体，仅仅是引用的变量不同（<strong>名称不同</strong>）。<strong>对其中任何一个对象的改动都会影响另外一个对象</strong></li><li>深拷贝是指源对象与拷贝对象<strong>互相独立</strong>，其中任何一个对象的改动都不会对另外一个对象造成影响</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>.copy() <span class="comment"># 原数组改变会随之改变</span></span><br><span class="line"><span class="built_in">list</span>.deepcopy() <span class="comment"># 不随原数组的变化而变化</span></span><br></pre></td></tr></table></figure><ul><li>说白了就是浅拷贝更像是c语言的指针，内存中存储的是指向被拷贝数组的地址，而深拷贝则是另外申请内存空间，来存储一份一模一样的数据</li></ul><h4 id="Python的最大递归层数"><a href="#Python的最大递归层数" class="headerlink" title="Python的最大递归层数"></a>Python的最大递归层数</h4><ul><li>Python的最大递归层数是可以设置的，默认的在window上的最大递归层数是 998。可以通过sys.setrecursionlimit()进行设置,但是一般默认不会超过3925-3929这个范围。</li></ul><h4 id="arg和-kwarg作用是什么？参数的收集和分配"><a href="#arg和-kwarg作用是什么？参数的收集和分配" class="headerlink" title="*arg和**kwarg作用是什么？参数的收集和分配"></a>*arg和**kwarg作用是什么？参数的收集和分配</h4><ul><li>*args用来将参数打包成tuple（元组）给函数体调用；</li><li>**kwargs 打包关键字参数成dict（字典）给函数体调用。当我们混合使用这三个参数时，必须遵循arg，*args，**kwargs这样的顺序，否则程序会报错。</li></ul><h4 id="is和-的区别？"><a href="#is和-的区别？" class="headerlink" title="is和==的区别？"></a>is和==的区别？</h4><ul><li>python中对象包含的三个基本要素，分别是：id(身份标识)、type(数据类型)和value(值)。is也被叫做同一性运算符，这个运算符比较判断的是对象间的唯一身份标识，也就是id是否相同。==是python标准操作符中的比较操作符，用来比较判断两个对象的value(值)是否相等.</li></ul><h4 id="异常模块中try-except-else-finally相关意义"><a href="#异常模块中try-except-else-finally相关意义" class="headerlink" title="异常模块中try except else finally相关意义"></a>异常模块中try except else finally相关意义</h4><ul><li>try except else 没有捕获到异常，执行else语句</li><li>try except finally 不管是否捕获到异常，都执行finally语句</li></ul><h4 id="zip-函数"><a href="#zip-函数" class="headerlink" title="zip()函数"></a>zip()函数</h4><ul><li><p>zip()函数在运算时，会以一个或者多个序列（可迭代对象）作为参数，返回一个元组的列表。同时将这些元素并排的元素配对</p></li><li><p>zip()参数可以接受任何的序列，同时也可以由两个以上的参数；当传入参数的长度不同时，zip能自动以最短序列长度为准进行截取，获得元组</p></li></ul><h4 id="lambda函数的好处"><a href="#lambda函数的好处" class="headerlink" title="lambda函数的好处"></a>lambda函数的好处</h4><p>精简代码，lambda省去了定义函数，map省去写循环的过程</p><h4 id="装饰器（面试问到了）"><a href="#装饰器（面试问到了）" class="headerlink" title="装饰器（面试问到了）"></a>装饰器（面试问到了）</h4><p>装饰器是闭包的的应用，简而言之，python装饰器就是用于拓展原来函数功能的一种函数，这个函数的特殊之处在于它返回的值也是一个函数，使用python装饰器的好处就是可以在不用更改原函数的代码前提下给函数增加新的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        print(<span class="string">&quot;[DEBUG]: enter &#123;&#125;()&quot;</span>.<span class="built_in">format</span>(func.__name__))</span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    print(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="生成器与迭代器"><a href="#生成器与迭代器" class="headerlink" title="生成器与迭代器"></a>生成器与迭代器</h3><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。 在调用生成器运行的过程中，每次遇到yield 时函数会暂停并保存当前所有的运行信息，返回yield 的值, 并在下一次执行next() 方法时从当前位置继续运行。调用一个生成器函数，返回的是一个迭代器对象。</p><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>是准售迭代协议的对象。用户可以使用<strong>iter()**以从任何序列得到迭代器，另一种形式迭代器</strong>generator**，要获取下一个元素可以使用next() function。 当没有元素时引起stopIteration</p><h4 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h4><p>生成器能够实现迭代器的功能，生成器代码简洁，可以节省内存，发生器终结时，还会自动抛出异常</p><h3 id="多线程内容"><a href="#多线程内容" class="headerlink" title="多线程内容"></a>多线程内容</h3><p>可以看此篇博客<a href="https://www.whkblog.work/2021/12/24/python-multi/">https://www.whkblog.work/2021/12/24/python-multi/</a></p><h4 id="僵尸进程和孤儿进程"><a href="#僵尸进程和孤儿进程" class="headerlink" title="僵尸进程和孤儿进程"></a>僵尸进程和孤儿进程</h4><ul><li>孤儿进程：父进程退出，子进程还在运行的这些子进程都是孤儿进程，孤儿进程将被init进程收养，并由init经常对他们完成状态手机工作</li><li>僵尸经常：进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait获watipid获取子进程状态信息，那么子进程的进程描述符仍然保存在系统中的这些进程是僵尸进程</li><li>避免僵尸方法：1、fork两次用孙子进程去完成子进程的任务。2、用wait()函数阻塞赴京城。3、使用信号量</li></ul><h5 id="同步、异步，阻塞、非阻塞"><a href="#同步、异步，阻塞、非阻塞" class="headerlink" title="同步、异步，阻塞、非阻塞"></a>同步、异步，阻塞、非阻塞</h5><ul><li>同步：多个任务之间有先后顺序执行，一个执行完下一个才能执行（相当于操作系统的单线程）。</li><li>异步：多个任务之间没有先后顺序，可以同时执行，有时候一个任务可能要在必要的时候获取另一个同时执行的任务的结果，这个就叫回调</li><li>阻塞：调用者卡住了，不能继续往下执行，就说条用者组赛了。</li><li>非阻塞：如过不会卡住，可以继续执行，就是说非阻塞的。</li><li>同步异步相对于多任务而言。阻塞非阻塞相对于代码执行而言</li></ul><h4 id="跨进程通信的方式"><a href="#跨进程通信的方式" class="headerlink" title="跨进程通信的方式"></a>跨进程通信的方式</h4><p>共享内存、信号、管道通信 M</p><h4 id="并行和并发"><a href="#并行和并发" class="headerlink" title="并行和并发"></a>并行和并发</h4><p>并发：指应用能够交替执行不同的任务，带有类似多线程的原理</p><p>并行：是指应用能能够“同时”执行不同的任务</p><p>前者交替执行，后者同时执行</p><h4 id="协程的优势"><a href="#协程的优势" class="headerlink" title="协程的优势"></a>协程的优势</h4><p>协程是进程和线程的升级版,进程和线程都面临着内核态和用户态的切换问题而耗费许多切换时间, 而协程就是用户自己控制切换的时机,不再需要陷入系统的内核态<br>协程的执行效率非常高。 因为子程序切换不是线程切换，而是由程序自身控制。 …<br>不需要多线程的锁机制</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="正则re-complie作用"><a href="#正则re-complie作用" class="headerlink" title="正则re.complie作用"></a>正则re.complie作用</h4><p>re.complie是将正则表达式编译成一个对象，加快速度，并重复使用</p><h4 id="findall与search区别"><a href="#findall与search区别" class="headerlink" title="findall与search区别"></a>findall与search区别</h4><p>finall结果无需加group()</p><p>search需要加group()提取</p><h3 id="django"><a href="#django" class="headerlink" title="django"></a>django</h3><h4 id="django的设计模式"><a href="#django的设计模式" class="headerlink" title="django的设计模式"></a>django的设计模式</h4><p>django 的设计模式是MVT设计模式，分别代表Model(模型)、View(视图)、Template(模板)</p><p>MVT也是MVC的设计模式，但Django框架作为控制器的角色，负责了用户请求和转发的工作，django里更关注的是模型、模板、和视图</p><p>Django框架接收了用户和参数后，再通过正则表达式匹配url，转发给对应视图进行处理。视图调用M处理诗句，再调用T返回界面给浏览器</p><h4 id="简述Django的ORM"><a href="#简述Django的ORM" class="headerlink" title="简述Django的ORM"></a>简述Django的ORM</h4><p>ORM,全拼Object-Relation Mapping, 对象-关系映射。</p><p>实现了数据模型与数据库的解耦，通过简单的配置就可以更换数据库，不需要修改代码只需面向对象编程，orm本质上会更具对接的数据库引擎，翻译成对应的sql语句，所有使用Django开发的项目无需关系底层使用的是何数据库。（更换数据库在实际代码里就是更改setting.py里的数据库相关内容）</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="Python-实例方法、类方法、静态方法的区别与作用"><a href="#Python-实例方法、类方法、静态方法的区别与作用" class="headerlink" title="Python 实例方法、类方法、静态方法的区别与作用"></a>Python 实例方法、类方法、静态方法的区别与作用</h4><p><a href="https://www.cnblogs.com/wcwnina/p/8644892.html">https://www.cnblogs.com/wcwnina/p/8644892.html</a></p><p>实例方法：第一个参数必须是实例对象，该参数名一般约定为“self”，通过它来传递实例的属性和方法（也可以传类的属性和方法）；只能由实例对象调用。<br>类方法：使用装饰器@classmethod。第一个参数必须是当前类对象，该参数名一般约定为“cls”，通过它来传递类的属性和方法（不能传实例的属性和方法）；类和实例对象都可以调用。<br>静态方法：使用装饰器@staticmethod。参数随意，没有“self”和“cls”参数，但是方法体中不能使用类或实例的任何属性和方法；类和实例对象都可以调用。</p><h4 id="Python中单下划线和双下划线"><a href="#Python中单下划线和双下划线" class="headerlink" title="Python中单下划线和双下划线"></a>Python中单下划线和双下划线</h4><ul><li>_foo:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.不能用from module import * 导入，其他方面和公有一样访问；</li><li>__foo:这个有真正的意义:解析器用_classname__foo来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,通过对象名._类名__xxx这样的方式可以访问.</li><li>__foo__:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突，就是例__init__(), __del__(),__call__()这些特殊方法</li></ul><h4 id="def-func-a-b-的坑"><a href="#def-func-a-b-的坑" class="headerlink" title="def func(a,b=[])的坑"></a>def func(a,b=[])的坑</h4><ul><li>函数的第二个默认参数是一个list,当第一次执行的时候实例化了一个list,第二次执行还是用第一次执行的时候实例化的地址存储</li></ul><h4 id="new方法"><a href="#new方法" class="headerlink" title="new方法"></a>new方法</h4><p><img src="https://img-blog.csdnimg.cn/8d572c3b99a540b8a5042bcbc9b053ab.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNzgzNTE0NA==,size_16,color_FFFFFF,t_70"></p><h4 id="调优手段"><a href="#调优手段" class="headerlink" title="调优手段"></a>调优手段</h4><ul><li>避免循环引用</li><li>调高垃圾回收阈值</li><li>手动垃圾回收</li></ul><h4 id="python装饰器"><a href="#python装饰器" class="headerlink" title="python装饰器"></a>python装饰器</h4><p>本质上就是一个函数，可以让其他函数在不需要任何代码变动的请款下，增加函数对象，适用于有插入日志，性能测试，就是说为了已经纯在的函数或对象添加额外的功能（ps看来，感觉挺像django里的meta函数）</p><h2 id="编程部分"><a href="#编程部分" class="headerlink" title="编程部分"></a>编程部分</h2><h3 id="实现进制转换"><a href="#实现进制转换" class="headerlink" title="实现进制转换"></a>实现进制转换</h3><p>直接转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">50</span></span><br><span class="line"><span class="built_in">bin</span>(a) <span class="comment"># 二进制 0b110010</span></span><br><span class="line"><span class="built_in">oct</span>(a) <span class="comment"># 八进制 0o62</span></span><br><span class="line"><span class="built_in">hex</span>(a) <span class="comment"># 十六进制 0x32</span></span><br></pre></td></tr></table></figure><p>使用int</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;50&#x27;</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;0b110010&#x27;</span>,<span class="number">2</span>) <span class="comment"># int(&#x27;110010&#x27;,2)</span></span><br><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;0o62&#x27;</span>,<span class="number">8</span>)</span><br><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;0x32&#x27;</span>,<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>转为bytes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">50</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.bit_length() <span class="comment"># 查看数字占用的位长度</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="comment"># a=50,对应二进制为110010,两个字节为‘00000000 00110010’，ascii编码中 50 对应的字符为 2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.to_bytes(<span class="number">2</span>, byteorder=<span class="string">&#x27;little&#x27;</span>) <span class="comment"># 转为2字节的bytes, 低位在前面</span></span><br><span class="line"><span class="string">b&#x27;2\x00&#x27;</span> <span class="comment"># b‘\x00’表示 0x00 即 0b00000000，&#x27;2&#x27; 是 ascii编码中 50 对应的字符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.to_bytes(<span class="number">2</span>, byteorder=<span class="string">&#x27;big&#x27;</span>) <span class="comment"># 转为2字节的bytes, 高位在前面</span></span><br><span class="line"><span class="string">b&#x27;\x002&#x27;</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = -<span class="number">50</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.to_bytes(<span class="number">2</span>, byteorder=<span class="string">&#x27;little&#x27;</span>,signed=<span class="literal">True</span>) <span class="comment"># 有符号数</span></span><br><span class="line"><span class="string">b&#x27;\xce\xff&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b&#x27;\x002&#x27;</span>[<span class="number">1</span>] <span class="comment"># 获取第1个字节即 b‘2’</span></span><br><span class="line"><span class="number">50</span> <span class="comment"># 输出其utf-8编码（这里与ASCII编码相同，因为‘2’可用ASCII编码表示，ASCII编码可看成utf-8编码的一部分）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b&#x27;\x002&#x27;</span>[<span class="number">0</span>] <span class="comment"># 获取第0个字节即 b‘\x00’</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>.from_bytes(<span class="string">b&#x27;\x002&#x27;</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h1 id="网络部分"><a href="#网络部分" class="headerlink" title="网络部分"></a>网络部分</h1><p>调整链接：<a href="https://www.whkblog.work/2022/04/06/ComputerNetwork/">https://www.whkblog.work/2022/04/06/ComputerNetwork/</a></p><h1 id="数据库部分"><a href="#数据库部分" class="headerlink" title="数据库部分"></a>数据库部分</h1><p>还没看到，等后面更新吧</p><h1 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h1><h3 id="解释型语言和编译型语言区别"><a href="#解释型语言和编译型语言区别" class="headerlink" title="解释型语言和编译型语言区别"></a>解释型语言和编译型语言区别</h3><ul><li>解释型 在运行时才翻译；每个语句执行时候才翻译；效率比较低；跨平台性好 （python）</li><li>编译型 程序执行之前有一个专门的编译过程 把程序编译成机器语言的文件 程序执行效率高 跨平台性差 （c c++）</li></ul><h3 id="字节码和机器码"><a href="#字节码和机器码" class="headerlink" title="字节码和机器码"></a>字节码和机器码</h3><p>字节码是一种中间状态（中间码）的二进制代码（文件）。需要直译器转译后才能成为机器码。</p><h3 id="分别从前端、后端、数据库阐述web项目的性能优化"><a href="#分别从前端、后端、数据库阐述web项目的性能优化" class="headerlink" title="分别从前端、后端、数据库阐述web项目的性能优化"></a><strong>分别从前端、后端、数据库阐述web项目的性能优化</strong></h3><h4 id="前端优化"><a href="#前端优化" class="headerlink" title="前端优化"></a>前端优化</h4><ol><li>减少http请求，丽日制作精灵图</li><li>html 和css放在页面上部，js放在页面下面，js加载比html和css加载慢，容易导致dom渲染慢</li></ol><h4 id="后端优化"><a href="#后端优化" class="headerlink" title="后端优化"></a>后端优化</h4><ol><li>缓存存储读写次数搞，变化少的数据，比如网站首页信息，商品信息等。应用程序读取数据时，一般时先从缓存中读取，如果读取不到或者数据已失效，再访问磁盘数据库，并将数据再次写入缓存。</li><li>异步方式，如果有耗时操作，可以采用异步，比如celery</li><li>代码优化，避免循环和判断次数太多，如果多个if else判断，优先判断最有可能发送的情况</li></ol><h4 id="数据库优化"><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h4><ol><li>条件允许的话，数据可以存放在redis,读取速度快</li><li>简历索引外键</li></ol><h3 id="简述cookie和session的区别"><a href="#简述cookie和session的区别" class="headerlink" title="简述cookie和session的区别"></a>简述cookie和session的区别</h3><ol><li>session在服务器端，cookie在客户端（浏览器）</li><li>session的运行依赖session id,而session id 是存在cookie中的，也就是说，如果浏览器禁用了cookie，同时session 也会失效，存储session时，键与cookie众多session相同，值时开发人员设置的键值对信息，进行了base64编码，过期时间由开发人员设置</li><li>cookie安全性比session差</li></ol><h3 id="集中魔法方法，简要介绍用途"><a href="#集中魔法方法，简要介绍用途" class="headerlink" title="集中魔法方法，简要介绍用途"></a>集中魔法方法，简要介绍用途</h3><p>__init__: 对象创建初始化方法</p><p>__new__: 创建对象时执行的方法，单列模式会用到</p><p>__str__: 当使用print()输出对象的时后，只要自己定义了__str__(self)方法，那么就会打印从在这个方法中return的数据</p><p>__del__: 删除对象执行的方法</p><h3 id="距离说明sql注入和解决办法"><a href="#距离说明sql注入和解决办法" class="headerlink" title="距离说明sql注入和解决办法"></a>距离说明sql注入和解决办法</h3><p>当以字符串格式化书写的时候，如果用户输入的有：;+SQL语句，后面的SQL语句会执行，比如例子中的SQL注入会删除数据库demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input_name= <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">sql = <span class="string">&#x27;select * from demo where name=&quot;%s&quot;&#x27;</span> % input_name</span><br><span class="line">print(<span class="string">&quot;正常的SQL语句&quot;</span>,sql)</span><br><span class="line">input_name = <span class="string">&#x27;zs;drop database demo&#x27;</span></span><br><span class="line">sql = <span class="string">&#x27;select * from demo where name=&quot;%s&quot;&#x27;</span> % input_name</span><br><span class="line">print(<span class="string">&quot;SQLZ注入语句&quot;</span>,sql)</span><br></pre></td></tr></table></figure><p>解决方式：通过传入参数方式解决SQL注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">params = [input_name]</span><br><span class="line"></span><br><span class="line">count = cs1.execute(‘select * <span class="keyword">from</span> goods where name=%s’, params)</span><br></pre></td></tr></table></figure><h3 id="简述python引用计数机制"><a href="#简述python引用计数机制" class="headerlink" title="简述python引用计数机制"></a>简述python引用计数机制</h3><p>python 垃圾回收主要以引用计数为主，标记-清楚和分代清除为辅的机制，其中标记-清楚和分代回收主要是为了处理循环引用的难题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此文为总结网上各种面经文章以及个人问题而来，用以准备面试（持续更新）&lt;/p&gt;
&lt;p&gt;文章内容来源&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq7835144/article/details/117294737&quot;&gt;https:/</summary>
      
    
    
    
    
    <category term="python" scheme="https://www.whkblog.work/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>TypteScript学习</title>
    <link href="https://www.whkblog.work/2022/03/07/TypteScript%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.whkblog.work/2022/03/07/TypteScript%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-03-07T12:49:41.000Z</published>
    <updated>2022-03-30T13:52:57.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前几天看了一篇通过路由创建导航栏的博客</p><p>[<a href="https://blog.csdn.net/lianghecai52171314/article/details/116148779]">https://blog.csdn.net/lianghecai52171314/article/details/116148779]</a>: </p><p>，自己尝试将前后端项目完成的部分给改成根据路由生成导航栏的代码，结果失败（主要是我想生成的导航栏是横向的，每次调整都不能全部调到一行），且项目跟着使用ts也没有用，于是我回退了，然后就打算先停一段时间，先，先去学习了解一下，毕竟通过根据路由创建导航栏可以节省时间，提高效率。</p><h1 id="编译部分"><a href="#编译部分" class="headerlink" title="编译部分"></a>编译部分</h1><h2 id="静态类型检查、非异常故障"><a href="#静态类型检查、非异常故障" class="headerlink" title="静态类型检查、非异常故障"></a>静态类型检查、非异常故障</h2><p>TS自带一个类型检查器，语法错误以及非异常故障可以给我们检查一番</p><h2 id="优化编译"><a href="#优化编译" class="headerlink" title="优化编译"></a>优化编译</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --<span class="keyword">init</span> <span class="meta">#生成配置文件</span></span><br></pre></td></tr></table></figure><p>用于解决TS和JS冲突问题</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc <span class="comment">--watch</span></span><br></pre></td></tr></table></figure><p>用于自动编译，即在编码内容修改后自动编译，而不是要手动再次编译</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tsc</span> --<span class="literal">no</span>EmitOnError hello.ts</span><br></pre></td></tr></table></figure><p>出现类型错误可以防止其编译成js</p><h2 id="显示类型"><a href="#显示类型" class="headerlink" title="显示类型"></a>显示类型</h2><p>手动定义的类型，相当于python中定义变量的类型，或者C中预定义变量的时候声明变量类型，TS中的类型声明，编译后会删除，js文件中不会出现</p><h2 id="降级编译"><a href="#降级编译" class="headerlink" title="降级编译"></a>降级编译</h2><p>在init产生的tsconfig.json配置文件中可以更改配置文件中target值，以适配旧版浏览器（不支持ES6的）</p><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>同样是在tsconfig.json文件中配置 在/*Type Checking */中配置，用于严格检查</p><hr><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><p>string 字符类型</p><p>number 数值类型</p><p>boolean 布尔类型</p><h2 id="常用类型"><a href="#常用类型" class="headerlink" title="常用类型"></a>常用类型</h2><p>数组 </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">法<span class="number">1</span> <span class="keyword">let</span> arr:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">法<span class="number">2</span> <span class="keyword">let</span> arr: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>any</p><p>any 可以是任何类型</p><p>nolmplicitAny 当不指定类型时，并且TyperScript无法从上下文推断它时，编译器通常回默认为any</p><h2 id="变量上的类型注释"><a href="#变量上的类型注释" class="headerlink" title="变量上的类型注释"></a>变量上的类型注释</h2><p>使用const let或var时 可以选择添加类型注释来显示指定变量类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myNmae:<span class="built_in">string</span>=<span class="string">&quot;stringsss&quot;</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="类型注释"><a href="#类型注释" class="headerlink" title="类型注释"></a>类型注释</h3><p>函数与其他语言的函数机制相似，没有什么区别，参数可以定义类型（在参数后面定义），函数同样可以（函数名后面）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">numb:int</span>):<span class="title">int</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">11</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>匿名函数与声明函数有点不同，当一个函数出现在TyperScript就可以确定它将如何被条用的地方时，该行数的参数回自动指定类型</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>对象类型：除基础类型外的几乎所有带有属性的JavaScript值</p><p>联合类型：一种组合是由两个或者多个其他类型组成的类型，表示这些类型中的任何一种值。我们将这些类型中的每一种称为<em>联合类型成员</em>，（使用时需注意一定要满足两个或多个类型能使用的方法，否者需使用分支进行使用[if-else]）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printId</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 在此分支中，id的类型为“string”</span></span><br><span class="line">        <span class="built_in">console</span>.log(id.toUpperCase());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 此处，id的类型为“number”</span></span><br><span class="line">    <span class="built_in">console</span>.log(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型别名 ：一个类型别名正式一个名称为任何类型的定义</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例</span><br><span class="line"><span class="keyword">type</span> point =&#123;</span><br><span class="line">x: <span class="built_in">number</span>;</span><br><span class="line">y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printCoord</span>(<span class="params">pt: point</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(pt.x)</span><br><span class="line"><span class="built_in">console</span>.log(pt.y)</span><br><span class="line">&#125;</span><br><span class="line">printCoord(&#123;<span class="attr">x</span>: <span class="number">100</span>,<span class="attr">t</span>: <span class="number">100</span>&#125;)</span><br></pre></td></tr></table></figure><p>接口 ： 一个接口声明式另一种方式来命名对象类型</p><p>类型断言：与类型注释一样，类型断言由编译器删除，不hi影响代码运行时行为</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myCanvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;main_canvas&quot;</span>) <span class="keyword">as</span> HTML CanvasElement</span><br></pre></td></tr></table></figure><p>文字类型、null 、underfined</p><p>bigint 大整数</p><p>symbol 全局唯一引用  eslint低于2020无法使用</p><hr><h1 id="类型缩小"><a href="#类型缩小" class="headerlink" title="类型缩小"></a>类型缩小</h1><p>常用于联合类型 0</p><h2 id="typeof类型守卫"><a href="#typeof类型守卫" class="headerlink" title="typeof类型守卫"></a>typeof类型守卫</h2><p>JavaScript 支持一个 typeof 运算符，它可以提供有关我们在运行时拥有的值类型的非常 基本的信息。TypeoScript期望它返回一组特定的字符串</p><p>string、number、bigint、boolean、symbol、undefined、object、function</p><h2 id="真值缩小"><a href="#真值缩小" class="headerlink" title="真值缩小"></a>真值缩小</h2><p>重要参数<strong>strs</strong>,检查strs是否为真，可以</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAll</span>(<span class="params">strs: <span class="built_in">string</span> | <span class="built_in">string</span>[] | <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strs &amp;&amp; <span class="keyword">typeof</span> strs === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> strs) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(strs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">TypeError</span>: <span class="literal">null</span> is not iterable</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAll</span>(<span class="params">strs: <span class="built_in">string</span> | <span class="built_in">string</span>[] | <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line"><span class="comment">// !!!!!!!!!!!!!!!!</span></span><br><span class="line"><span class="comment">// 别这样!</span></span><br><span class="line"><span class="comment">// 原因在下边</span></span><br><span class="line"><span class="comment">// !!!!!!!!!!!!!!!!</span></span><br><span class="line">    <span class="keyword">if</span> (strs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> strs) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(strs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前几天看了一篇通过路由创建导航栏的博客&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;https://blog.csdn.net/lianghecai5</summary>
      
    
    
    
    
    <category term="闲话" scheme="https://www.whkblog.work/tags/%E9%97%B2%E8%AF%9D/"/>
    
    <category term="TS学习" scheme="https://www.whkblog.work/tags/TS%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue+Django前后端分离项目一</title>
    <link href="https://www.whkblog.work/2022/01/16/Vue+Django%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E4%B8%80/"/>
    <id>https://www.whkblog.work/2022/01/16/Vue+Django%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E4%B8%80/</id>
    <published>2022-01-16T04:44:41.000Z</published>
    <updated>2022-01-25T06:42:09.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>去年国庆的时候乘着放假学完了vue,然后10月份跟11月份又自己看B站视频学完了django、DRF，之后又跟着一个大佬的博客做了一个vue-django前后端分离的项目，具体连接为：<a href="https://www.dusaiphoto.com/article/103/%EF%BC%8C%E7%84%B6%E5%90%8E%E5%AF%92%E5%81%87%E5%9C%A8%E5%AE%B6%E6%9C%89%E7%82%B9%E6%97%A0%E8%81%8A%EF%BC%8C%E6%88%91%E5%B0%B1%E6%B2%A1%E4%BA%8B%E8%87%AA%E5%B7%B1%E5%BC%80%E4%BA%86%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E6%9D%A5%E8%AF%95%E7%9D%80%E8%87%AA%E5%B7%B1%E5%81%9A%E4%B8%80%E4%B8%AA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E9%A1%B9%E7%9B%AE%E3%80%82">https://www.dusaiphoto.com/article/103/，然后寒假在家有点无聊，我就没事自己开了一个项目来试着自己做一个前后端分离的项目。</a></p><p>项目的主要目标就将我院的官网重构一下，实在是太丑了。虽然我做了我也不会给学院就是。这些都是后话。</p><p>另外，实在官网原有功能上的修改</p><h2 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h2><h2 id="开始项目"><a href="#开始项目" class="headerlink" title="开始项目"></a>开始项目</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>项目环境的话</p><ul><li>Vue 3</li><li>vue/cli 4.5.14</li><li>npm 7.23.0</li></ul><p>开始项目部分我就不说了</p><p>直接进入主题</p><p>先安装一下axios ,vue-router element-ui</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br><span class="line">npm install vue-router</span><br><span class="line">npm install element-plus</span><br></pre></td></tr></table></figure><p>也可以通过vue控制面板安装，读者自行尝试</p><h2 id="一、首页搭建"><a href="#一、首页搭建" class="headerlink" title="一、首页搭建"></a>一、首页搭建</h2><p>首先我们使用的是element-plus的组件，这里就不详细赘述组件内容及其使用，有需要可通过</p><p>[]: <a href="https://element-plus.gitee.io/zh-CN/component/button.html">https://element-plus.gitee.io/zh-CN/component/button.html</a></p><p>链接去查看组件属性等</p><hr><h3 id="修改路由"><a href="#修改路由" class="headerlink" title="修改路由"></a>修改路由</h3><p>首先我们先修改main.js文件,使用element-plus，以及修改路由，使用router</p><p>文件内容修改如下</p><p><img src="https://www.whkblog.work/blog/images/jxnu/main.js.png"></p><p>在src文件夹下新建router文件夹，在文件夹中新建index.js文件</p><p>在文件内写入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&quot;@/views/Home.vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">        component: Home</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    history: createWebHashHistory(),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="写首页组件"><a href="#写首页组件" class="headerlink" title="写首页组件"></a>写首页组件</h3><p>运用组件化思想，在components文件夹下新建Header、Homebody、Footer 三个组件</p><p>在Header组件内写入一下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;header&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;img&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;imgs&quot;&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;head-text&quot;&gt;计算机信息工程学院&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;list&quot;&gt;</span><br><span class="line">        &lt;el-menu</span><br><span class="line">            router</span><br><span class="line">            :default-active&#x3D;&quot;this.$route.path&quot;</span><br><span class="line">            class&#x3D;&quot;el-menu-demo&quot;</span><br><span class="line">            mode&#x3D;&quot;horizontal&quot;</span><br><span class="line">            background-color&#x3D;&quot;#545c64&quot;</span><br><span class="line">            text-color&#x3D;&quot;#fff&quot;</span><br><span class="line">            active-text-color&#x3D;&quot;#ffd04b&quot;</span><br><span class="line">            @select&#x3D;&quot;handleSelect&quot;</span><br><span class="line">            ellipsis&#x3D;&quot;false&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;el-menu-item index&#x3D;&quot;1&quot;&gt;首页&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;el-sub-menu index&#x3D;&quot;2&quot;&gt;</span><br><span class="line">            &lt;template #title&gt;学院概况&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;2-1&quot;&gt;学院简介&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;2-2&quot;&gt;学院领导&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;2-3&quot;&gt;内设机构&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-sub-menu index&#x3D;&quot;2-4&quot;&gt;</span><br><span class="line">              &lt;template #title&gt;师资队伍&lt;&#x2F;template&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;2-4-1&quot;&gt;专人教师&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;2-4-2&quot;&gt;教授队伍&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;2-4-3&quot;&gt;硕士生导师&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;2-4-4&quot;&gt;招贤纳才&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;&#x2F;el-sub-menu&gt;</span><br><span class="line">          &lt;&#x2F;el-sub-menu&gt;</span><br><span class="line">          &lt;el-sub-menu index&#x3D;&quot;3&quot;&gt;</span><br><span class="line">            &lt;template #title&gt;人才培养&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;3-1&quot;&gt;研究生教育&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;3-2&quot;&gt;本科生教育&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;&#x2F;el-sub-menu&gt;</span><br><span class="line">          &lt;el-sub-menu index&#x3D;&quot;4&quot;&gt;</span><br><span class="line">            &lt;template #title&gt;科学研究&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;4-1&quot;&gt;科研动态&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;4-2&quot;&gt;科研机构&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;4-3&quot;&gt;科研成果&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;&#x2F;el-sub-menu&gt;</span><br><span class="line">          &lt;el-menu-item index&#x3D;&quot;5&quot;&gt;师德师风&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;el-sub-menu index&#x3D;&quot;6&quot;&gt;</span><br><span class="line">            &lt;template #title&gt;招生就业&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;6-1&quot;&gt;本科生&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;6-2&quot;&gt;研究生&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;&#x2F;el-sub-menu&gt;</span><br><span class="line">          &lt;el-menu-item index&#x3D;&quot;7&quot;&gt;党建工作&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;el-sub-menu index&#x3D;&quot;8&quot;&gt;</span><br><span class="line">            &lt;template #title&gt;团学工作&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;8-1&quot;&gt;学工新闻&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;8-2&quot;&gt;青年之声江西师范大学&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;8-3&quot;&gt;团学组织&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;8-4&quot;&gt;党员服务&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;8-5&quot;&gt;管理制度&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;8-6&quot;&gt;荣誉室&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;&#x2F;el-sub-menu&gt;</span><br><span class="line">          &lt;el-sub-menu index&#x3D;&quot;9&quot;&gt;</span><br><span class="line">            &lt;template #title&gt;实验中心&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;9-1&quot;&gt;中心概况&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;9-2&quot;&gt;综合实验室&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;9-3&quot;&gt;硬件实验室&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;9-4&quot;&gt;网络实验室&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;9-5&quot;&gt;物联网实验室&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;9-6&quot;&gt;嵌入式实验室&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;&#x2F;el-sub-menu&gt;</span><br><span class="line">          &lt;el-sub-menu index&#x3D;&quot;10&quot;&gt;</span><br><span class="line">            &lt;template #title&gt;主题教育专题&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;10-1&quot;&gt;活动报告&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;10-2&quot;&gt;通知公告&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;10-3&quot;&gt;文件学习&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;10-4&quot;&gt;意见征集&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;&#x2F;el-sub-menu&gt;</span><br><span class="line">          &lt;el-sub-menu index&#x3D;&quot;11&quot;&gt;</span><br><span class="line">            &lt;template #title&gt;下载中心&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;11-1&quot;&gt;学习资料&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;11-2&quot;&gt;软件下载&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index&#x3D;&quot;11-3&quot;&gt;&lt;a class&#x3D;&quot;ccf&quot; href&#x3D;&quot;https:&#x2F;&#x2F;dl.ccf.org.cn&#x2F;index.html?_ack&#x3D;1&quot;&gt;CCF数字图书馆&lt;&#x2F;a&gt;&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;&#x2F;el-sub-menu&gt;</span><br><span class="line">        &lt;&#x2F;el-menu&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Header&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      activeIndex: &#39;1&#39;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleSelect(key, keyPath) &#123;</span><br><span class="line">      console.log(key, keyPath);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.header &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  border: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.img &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: auto;</span><br><span class="line">  background: url(&quot;https:&#x2F;&#x2F;jsjxy.jxnu.edu.cn&#x2F;_upload&#x2F;tpl&#x2F;00&#x2F;d8&#x2F;216&#x2F;template216&#x2F;images&#x2F;head.jpg&quot;);</span><br><span class="line">    &#x2F;&#x2F;图片链接为原本官网我直接拿过来，省的下载</span><br><span class="line">  background-size: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.imgs &#123;</span><br><span class="line">  padding: 80px 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.imgs span &#123;</span><br><span class="line">  margin-left: 35%;</span><br><span class="line">  color: #01697c;</span><br><span class="line">  font-family: &quot;华文行楷&quot;;</span><br><span class="line">  font-weight: bolder;</span><br><span class="line">  font-size: 36px;</span><br><span class="line">&#125;</span><br><span class="line">.ccf&#123;</span><br><span class="line">  color:#F5FFFA;</span><br><span class="line">  text-decoration: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Homebody内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;body&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;newsbox&quot;&gt;</span><br><span class="line">      &lt;el-row :gutter&#x3D;&quot;28&quot;&gt;</span><br><span class="line">        &lt;el-col :span&#x3D;&quot;12&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;grid-content bg-purple&quot;&gt;</span><br><span class="line">            &lt;!--    轮播图--&gt;</span><br><span class="line">            &lt;el-carousel class&#x3D;&quot;carousel&quot;&gt;</span><br><span class="line">              &lt;el-carousel-item v-for&#x3D;&quot;item in pics&quot; :key&#x3D;&quot;item.url&quot;&gt;</span><br><span class="line">                &lt;router-view v-bind:to&#x3D;&#123;&#125;&gt;&lt;img :src&#x3D;&quot;item.url&quot;&#x2F;&gt;</span><br><span class="line">                  &lt;h3&gt;&#123;&#123; item.title &#125;&#125;&lt;&#x2F;h3&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">              &lt;&#x2F;el-carousel-item&gt;</span><br><span class="line">            &lt;&#x2F;el-carousel&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;el-col&gt;</span><br><span class="line">        &lt;el-col :span&#x3D;&quot;12&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;grid-content bg-purple&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;newslist&quot;&gt;</span><br><span class="line">              &lt;el-table v-loading&#x3D;&quot;loading&quot; :data&#x3D;&quot;tableData&quot; stripe style&#x3D;&quot;width: 100%;height:135%&quot;</span><br><span class="line">                        @cell-click&#x3D;&quot;changetodetil&quot;&gt;</span><br><span class="line">                &lt;el-table-column prop&#x3D;&quot;article.title&quot; label&#x3D;&quot;学院新闻&quot;&#x2F;&gt;</span><br><span class="line">                &lt;el-table-column prop&#x3D;&quot;article.date&quot; width&#x3D;&quot;180&quot;&#x2F;&gt;</span><br><span class="line">              &lt;&#x2F;el-table&gt;</span><br><span class="line">              &lt;div style&#x3D;&quot;border:0;margin-bottom: 50%&quot;&gt;</span><br><span class="line">                &lt;el-button style&#x3D;&quot;border:0;margin-left:85%;&quot; @click&#x3D;&quot;$router.push(&#39;&#x2F;News&#39;)&quot;&gt;更多+&lt;&#x2F;el-button&gt;</span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;el-col&gt;</span><br><span class="line">      &lt;&#x2F;el-row&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;midlist&quot;&gt;</span><br><span class="line">      &lt;el-row :gutter&#x3D;&quot;2&quot;&gt;</span><br><span class="line">        &lt;el-col :span&#x3D;&quot;6&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;grid-content dangshi&quot;&gt;</span><br><span class="line">            &lt;el-icon :size&#x3D;&quot;30&quot; color&#x3D;&quot;white&quot; class&#x3D;&quot;icon&quot;&gt;</span><br><span class="line">              &lt;reading&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;el-icon&gt;</span><br><span class="line">            &lt;span&gt;党史学习专栏&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;el-col&gt;</span><br><span class="line">        &lt;el-col :span&#x3D;&quot;6&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;grid-content zhuti&quot;&gt;</span><br><span class="line">            &lt;el-icon :size&#x3D;&quot;30&quot; color&#x3D;&quot;white&quot; class&#x3D;&quot;icon&quot;&gt;</span><br><span class="line">              &lt;collection&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;el-icon&gt;</span><br><span class="line">            &lt;span&gt;主题学习专栏&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;el-col&gt;</span><br><span class="line">        &lt;el-col :span&#x3D;&quot;6&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;grid-content xiaoqing&quot;&gt;</span><br><span class="line">            &lt;el-icon :size&#x3D;&quot;30&quot; color&#x3D;&quot;white&quot; class&#x3D;&quot;icon&quot;&gt;</span><br><span class="line">              &lt;checked&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;el-icon&gt;</span><br><span class="line">            &lt;span&gt;80周年校庆&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;el-col&gt;</span><br><span class="line">        &lt;el-col :span&#x3D;&quot;6&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;grid-content xiaoyou&quot;&gt;</span><br><span class="line">            &lt;el-icon :size&#x3D;&quot;30&quot; color&#x3D;&quot;white&quot; class&#x3D;&quot;icon&quot;&gt;</span><br><span class="line">              &lt;connection&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;el-icon&gt;</span><br><span class="line">            &lt;span&gt;计信校友专栏&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;el-col&gt;</span><br><span class="line">      &lt;&#x2F;el-row&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;info&quot;&gt;</span><br><span class="line">      &lt;el-table v-loading&#x3D;&quot;loading&quot; :data&#x3D;&quot;infoData&quot; stripe style&#x3D;&quot;width: 100%;height:135%&quot; height&#x3D;&quot;100%&quot;</span><br><span class="line">                @cell-click&#x3D;&quot;changetodetil&quot;&gt;</span><br><span class="line">        &lt;el-table-column prop&#x3D;&quot;info.title&quot; label&#x3D;&quot;通知&quot;&#x2F;&gt;</span><br><span class="line">        &lt;el-table-column prop&#x3D;&quot;info.date&quot; width&#x3D;&quot;180&quot;&gt;</span><br><span class="line">          &lt;template #header&gt;</span><br><span class="line">            &lt;el-button @click&#x3D;&quot;moreinfo&quot; style&#x3D;&quot;border:0;textStyle:#8e0e0a&quot;&gt;更多+&lt;&#x2F;el-button&gt;</span><br><span class="line">          &lt;&#x2F;template&gt;</span><br><span class="line">        &lt;&#x2F;el-table-column&gt;</span><br><span class="line">      &lt;&#x2F;el-table&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;achives&quot;&gt;</span><br><span class="line">      &lt;el-header&gt;</span><br><span class="line">        &lt;el-container&gt;</span><br><span class="line">          &lt;div style&#x3D;&quot;margin-right: 90%;margin-top:1%&quot;&gt;成就&lt;&#x2F;div&gt;</span><br><span class="line">          &lt;el-button @click&#x3D;&quot;moreinfo&quot; style&#x3D;&quot;border:0;margin-top:1%&quot;&gt;更多+&lt;&#x2F;el-button&gt;</span><br><span class="line">        &lt;&#x2F;el-container&gt;</span><br><span class="line">      &lt;&#x2F;el-header&gt;</span><br><span class="line">      &lt;el-container&gt;</span><br><span class="line">        &lt;el-aside width&#x3D;&quot;30%&quot;&gt;</span><br><span class="line">          &lt;el-card :body-style&#x3D;&quot;&#123; padding: &#39;0px&#39; &#125;&quot; shadow&#x3D;&quot;hover&quot;&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;shadow.elemecdn.com&#x2F;app&#x2F;element&#x2F;hamburger.9cf7b091-55e9-11e9-a976-7f4d0b07eef6.png&quot;</span><br><span class="line">                 class&#x3D;&quot;image&quot;&#x2F;&gt;</span><br><span class="line">            &lt;div style&#x3D;&quot;padding: 14px&quot;&gt;</span><br><span class="line">              &lt;span&gt;Yummy hamburger&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;&#x2F;el-card&gt;</span><br><span class="line">        &lt;&#x2F;el-aside&gt;</span><br><span class="line">        &lt;el-container&gt;</span><br><span class="line">          &lt;el-main&gt;</span><br><span class="line">            &lt;el-row :gutter&#x3D;&quot;12&quot; style&#x3D;&quot;margin-top:2%;margin-bottom: 2%&quot;&gt;</span><br><span class="line">              &lt;el-col :span&#x3D;&quot;8&quot;&gt;</span><br><span class="line">                &lt;el-card shadow&#x3D;&quot;hover&quot;&gt; hover&lt;&#x2F;el-card&gt;</span><br><span class="line">              &lt;&#x2F;el-col&gt;</span><br><span class="line">              &lt;el-col :span&#x3D;&quot;8&quot;&gt;</span><br><span class="line">                &lt;el-card shadow&#x3D;&quot;hover&quot;&gt; Hover&lt;&#x2F;el-card&gt;</span><br><span class="line">              &lt;&#x2F;el-col&gt;</span><br><span class="line">              &lt;el-col :span&#x3D;&quot;8&quot;&gt;</span><br><span class="line">                &lt;el-card shadow&#x3D;&quot;hover&quot;&gt; hover&lt;&#x2F;el-card&gt;</span><br><span class="line">              &lt;&#x2F;el-col&gt;</span><br><span class="line">            &lt;&#x2F;el-row&gt;</span><br><span class="line">            &lt;el-row :gutter&#x3D;&quot;12&quot; style&#x3D;&quot;margin-top:2%;margin-bottom: 2%&quot;&gt;</span><br><span class="line">              &lt;el-col :span&#x3D;&quot;8&quot;&gt;</span><br><span class="line">                &lt;el-card shadow&#x3D;&quot;hover&quot;&gt; hover&lt;&#x2F;el-card&gt;</span><br><span class="line">              &lt;&#x2F;el-col&gt;</span><br><span class="line">              &lt;el-col :span&#x3D;&quot;8&quot;&gt;</span><br><span class="line">                &lt;el-card shadow&#x3D;&quot;hover&quot;&gt; Hover&lt;&#x2F;el-card&gt;</span><br><span class="line">              &lt;&#x2F;el-col&gt;</span><br><span class="line">              &lt;el-col :span&#x3D;&quot;8&quot;&gt;</span><br><span class="line">                &lt;el-card shadow&#x3D;&quot;hover&quot;&gt; hover&lt;&#x2F;el-card&gt;</span><br><span class="line">              &lt;&#x2F;el-col&gt;</span><br><span class="line">            &lt;&#x2F;el-row&gt;</span><br><span class="line">          &lt;&#x2F;el-main&gt;</span><br><span class="line">        &lt;&#x2F;el-container&gt;</span><br><span class="line">      &lt;&#x2F;el-container&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;Academic&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;el-backtop&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;Connection, Checked, Collection, Reading&#125; from &#39;@element-plus&#x2F;icons-vue&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;homebody&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Connection, Checked, Collection, Reading</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      pics: [</span><br><span class="line">        &#123;url: require(&quot;..&#x2F;assets&#x2F;pic1.jpg&quot;), title: &quot;标题1sdfasdf&quot;&#125;,</span><br><span class="line">        &#123;url: require(&quot;..&#x2F;assets&#x2F;pic2.jpg&quot;), title: &quot;标题2sdfasdf&quot;&#125;,</span><br><span class="line">        &#123;url: require(&quot;..&#x2F;assets&#x2F;pic3.jpg&quot;), title: &quot;标题3dfasdfsda&quot;&#125;,</span><br><span class="line">        &#123;url: require(&quot;..&#x2F;assets&#x2F;pic4.jpg&quot;), title: &quot;标题4dfasdfdsa&quot;&#125;</span><br><span class="line">      ],</span><br><span class="line">      tableData: [</span><br><span class="line">        &#123;</span><br><span class="line">          article: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          article: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          article: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          article: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          article: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">      ],</span><br><span class="line">      infoData: [</span><br><span class="line">        &#123;</span><br><span class="line">          info: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          info: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          info: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          info: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          info: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          info: &#123;</span><br><span class="line">            title: &quot;test&quot;,</span><br><span class="line">            date: &#39;2016-05-02&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">          id: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changetodetil() &#123;</span><br><span class="line">      alert(&quot;跳转中&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    moreinfo() &#123;</span><br><span class="line">      alert(&quot;正在跳转到更多&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.newsbox &#123;</span><br><span class="line">  margin: 2% 10%;</span><br><span class="line">  width: 80%;</span><br><span class="line">  height: 35%;</span><br><span class="line">  box-shadow: 4px 4px 15px #dad9d9;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.newslist &#123;</span><br><span class="line">  height: 190px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.newslist span &#123;</span><br><span class="line">  margin-left: 2%;</span><br><span class="line">  color: brown;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.midlist &#123;</span><br><span class="line">  margin: 2% 10%;</span><br><span class="line">  width: 80%;</span><br><span class="line">  height: 35%;</span><br><span class="line">  box-shadow: 4px 4px 15px #dad9d9;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.info &#123;</span><br><span class="line">  margin: 2% 10%;</span><br><span class="line">  width: 80%;</span><br><span class="line">  height: 40%;</span><br><span class="line">  box-shadow: 4px 4px 15px #dad9d9;</span><br><span class="line">border-radius: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.info span &#123;</span><br><span class="line">  margin-right: 2%;</span><br><span class="line">  color: brown;</span><br><span class="line">  float: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.achives &#123;</span><br><span class="line">  margin: 2% 10%;</span><br><span class="line">  width: 80%;</span><br><span class="line">  height: 35%;</span><br><span class="line">  box-shadow: 4px 4px 15px #dad9d9;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.carousel &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.carousel &gt; h4 &#123;</span><br><span class="line">  float: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.midlist .grid-content &#123;</span><br><span class="line">  transition: all 0.6s;</span><br><span class="line">  box-shadow: 4px 4px 15px #dad9d9;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.midlist .grid-content:hover &#123;</span><br><span class="line">  transform: scale(1.2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.grid-content &gt; span &#123;</span><br><span class="line">  font-family: 华文仿宋;</span><br><span class="line">  font-style: normal;</span><br><span class="line">  font-size: 28px;</span><br><span class="line">  margin-left: 20%;</span><br><span class="line">  padding: 5%;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.icon &#123;</span><br><span class="line">  margin-top: 5%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dangshi &#123;</span><br><span class="line">  background-color: #b1b817;</span><br><span class="line">  text-align: center;</span><br><span class="line">  height: auto;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.zhuti &#123;</span><br><span class="line">  background-color: #1a8dc2;</span><br><span class="line">  text-align: center;</span><br><span class="line">  height: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.xiaoqing &#123;</span><br><span class="line">  background-color: #b82b2c;</span><br><span class="line">  text-align: center;</span><br><span class="line">  height: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.xiaoyou &#123;</span><br><span class="line">  background-color: #8e0e0a;</span><br><span class="line">  text-align: center;</span><br><span class="line">  height: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里并没有真实数据，都是自己先伪造的数据，因为我是同时写的，先想到写前端就写前端，想到写后端就写后端，，这里这种处理方式不好，按道理应该先写后端，然后前端方便获取数据便于调试，大家不要学习</p><p>然后是Footer内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;footer&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;img&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;imgs&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;foot-left&quot; &gt;</span><br><span class="line">    &lt;a&gt;校内链接：&lt;&#x2F;a&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.jxnu.edu.cn&#x2F;&quot; target&#x3D;&quot;_blank&quot;&gt;江西师范大学&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;jwc.jxnu.edu.cn&#x2F;&quot; target&#x3D;&quot;_blank&quot;&gt;师大教务在线&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;rsc.jxnu.edu.cn&#x2F;&quot; target&#x3D;&quot;_blank&quot;&gt;江西师大人事网&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;p class&#x3D;&quot;copyright&quot;&gt;&lt;span&gt;Copyright©2021 江西师范大学美术学院； 地址：江西省南昌市紫阳大道99号； 电话：0791-88120416， 88120411；邮编：330022&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p class&#x3D;&quot;copyright&quot;&gt;&lt;span&gt;技术支持：whk&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;foot&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.footer &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  border: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">.img &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: auto;</span><br><span class="line">  background: url(&quot;https:&#x2F;&#x2F;jsjxy.jxnu.edu.cn&#x2F;_upload&#x2F;tpl&#x2F;00&#x2F;d8&#x2F;216&#x2F;template216&#x2F;images&#x2F;under1.jpg&quot;);</span><br><span class="line">  background-size: cover;</span><br><span class="line">&#125;</span><br><span class="line">.imgs &#123;</span><br><span class="line">  padding: 80px 50px;</span><br><span class="line">&#125;</span><br><span class="line">.foot-left&#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.foot-left a&#123;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  color: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>到这里，主页的三个组件基本完成，还有部分功能没有加上，后期再加。</p><h3 id="应用首页组件"><a href="#应用首页组件" class="headerlink" title="应用首页组件"></a>应用首页组件</h3><p>在src文件下创建view文件夹，然后在其中新建一个Home组件</p><p>将前面写好的三个组件引入到Home文件夹中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Header&#x2F;&gt;</span><br><span class="line">  &lt;Homebody&#x2F;&gt;</span><br><span class="line">  &lt;Footer&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Header from &quot;@&#x2F;components&#x2F;Header&quot;;</span><br><span class="line">import Homebody from &quot;@&#x2F;components&#x2F;Homebody&quot;;</span><br><span class="line">import Footer from &quot;@&#x2F;components&#x2F;Footer&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Home&quot;,</span><br><span class="line">  components: &#123; Header,Homebody,Footer&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>再修改App.vue（src目录下）文件，改为路由到Home</p><p>修改后文件内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;router-view&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此，首页就创建完成</p><h3 id="页面效果显示"><a href="#页面效果显示" class="headerlink" title="页面效果显示"></a>页面效果显示</h3><p>项目文件夹内打开命令行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p><img src="https://www.whkblog.work/blog/images/jxnu/Homeview1.png"></p><p>到此首页占告一段落</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;去年国庆的时候乘着放假学完了vue,然后10月份跟11月份又自己看B站视频学完了django、DRF，之后又跟着一个大佬的博客做了一个vue</summary>
      
    
    
    
    <category term="前后端分离项目" scheme="https://www.whkblog.work/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="python" scheme="https://www.whkblog.work/tags/python/"/>
    
    <category term="后端" scheme="https://www.whkblog.work/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="vue" scheme="https://www.whkblog.work/tags/vue/"/>
    
    <category term="django" scheme="https://www.whkblog.work/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>python_multi</title>
    <link href="https://www.whkblog.work/2021/12/24/python-multi/"/>
    <id>https://www.whkblog.work/2021/12/24/python-multi/</id>
    <published>2021-12-24T02:44:16.000Z</published>
    <updated>2022-06-20T05:49:36.131Z</updated>
    
    <content type="html"><![CDATA[<p>这两天学习了下多线程相关知识，观看的是b站上一个up主的视频，这里做一个总结，方便以后回忆一下。</p><p>视频链接<a href="https://www.bilibili.com/video/BV1bK411A7tV">https://www.bilibili.com/video/BV1bK411A7tV</a></p><p>以下文章中出现的图片出自视频截图</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="CPU-BOUND-amp-I-O-BOUND"><a href="#CPU-BOUND-amp-I-O-BOUND" class="headerlink" title="CPU-BOUND &amp; I/O-BOUND"></a>CPU-BOUND &amp; I/O-BOUND</h2><h3 id="cpu-bound"><a href="#cpu-bound" class="headerlink" title="cpu-bound"></a>cpu-bound</h3><p>计算密集型、☞I/O在很短时间内可以完成，CPU需要大量的计算和处理，特点是CPU占用率相当高</p><p>例如：解压缩，加密压缩、正则表达式搜索</p><h4 id="i-o-bound"><a href="#i-o-bound" class="headerlink" title="i/o-bound"></a>i/o-bound</h4><p>IO密集型☞系统运作大部分状况是CPU在登I/O（内存硬盘）的读/写操作，CPU占用率仍然较低</p><p>例如：文件处理程序、网络爬虫程序</p><h1 id="多线程、多进程、多协程"><a href="#多线程、多进程、多协程" class="headerlink" title="多线程、多进程、多协程"></a>多线程、多进程、多协程</h1><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><p>进程是操作系统进行资源分配与调度的基本单位，是具有一定独立功能的程序关于某个数据集合上的一次运行活动，而程序是指令、数据及其组织形式的描述。简言之，进程是程序的实体，一个进程就是一个独立的程序，程序一旦运行就是进程。</p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>线程是操作系统程序执行流的最小单元，即进程中的最小运行单元，也是处理器调度和分派的基本单位。进程由一个或多个线程组成，同一进程中的多个线程将共享该进程中的全部系统资源，一个进程（程序）执行过程中，可能有多个线程在运行。</p><h3 id="多协程"><a href="#多协程" class="headerlink" title="多协程"></a>多协程</h3><p>协程，又称微线程，纤程，英文名为Coroutine，是一种用户态的轻量级线程，其本质上是一个单线程。协程可以看作是子程序，但执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行。</p><h2 id="多线程、多进程、多协程的对比"><a href="#多线程、多进程、多协程的对比" class="headerlink" title="多线程、多进程、多协程的对比"></a>多线程、多进程、多协程的对比</h2><p>关系：一个进程可以启动N个线程、一个线程可以启动N个协程</p><h4 id="多进程程"><a href="#多进程程" class="headerlink" title="多进程程"></a>多进程程</h4><p>优点：可以利用多核CUP并行运算</p><p>缺点：占用资源最多、可启动数目比线程少</p><p>适用于： CPU密集型计算</p><h4 id="多线程-1"><a href="#多线程-1" class="headerlink" title="多线程"></a>多线程</h4><p>优点：相比进程更轻量级、占用资源少</p><p>缺点：</p><p>​        相比进程：多线程只能并发执行，不能利用多CPU（由于python 有GIL锁的缘故）</p><p>​        相比协程：启动数目有限制、占用内存资源，有多线程切换开销</p><p>适用于： IO密集型计算、同时运行任务数要求不多</p><h4 id="多协程-1"><a href="#多协程-1" class="headerlink" title="多协程"></a>多协程</h4><p>优点：内存开销最少、启动协程数量最多</p><p>缺点：支持库有限制（aiohttp &amp; requests）、代码实现复杂</p><p>适用于：IO密集型计算、需要超多任务运行、但有现成库支持的场景</p><h1 id="三种方式的用法及案例"><a href="#三种方式的用法及案例" class="headerlink" title="三种方式的用法及案例"></a>三种方式的用法及案例</h1><h2 id="技术选择"><a href="#技术选择" class="headerlink" title="技术选择"></a>技术选择</h2><p>根据任务特点进行数据选择</p><p>如果是CPU密集型，选择多进程multiprocessing。</p><p>如果是IO密集型，任务量多少？是否有协程库支持？协程实现复杂度？</p><h2 id="前缀知识GIL锁"><a href="#前缀知识GIL锁" class="headerlink" title="前缀知识GIL锁"></a>前缀知识GIL锁</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>全局解释器锁（Global Interpreter Lock,简写：GIL）</p><p>是计算机程序设计语言解释器用于同步线程的一种机制，它使得任何时刻仅有一个线程在执行。即便在多核心处理器上，使用GIL的解释器也只允许同一时间执行一个线程</p><p>用于解决多线程之间数据完整性和状态同步问题</p><p>具体可看<a href="https://www.bilibili.com/video/BV1bK411A7tV?p=3&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1bK411A7tV?p=3&amp;spm_id_from=pageDriver</a> 第7分钟左右的解释</p><p>好处：简化python对共享资源的管理</p><h3 id="如何规避"><a href="#如何规避" class="headerlink" title="如何规避"></a>如何规避</h3><p>1、多线程threading机制，用于IO密集型计算</p><p>2、使用multiprocessing的多线程机制是实现并行计算、利用多核CPU优势</p><p>​        python 提供了multiprocessing模块</p><h2 id="多线程-2"><a href="#多线程-2" class="headerlink" title="多线程"></a>多线程</h2><h3 id="多线程数据通讯"><a href="#多线程数据通讯" class="headerlink" title="多线程数据通讯"></a>多线程数据通讯</h3><p>queue.Queue可用于多线程之间的、线程安全的数据通信</p><p><img src="https://www.whkblog.work/blog/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B/queue.png"></p><h3 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h3><p><img src="https://www.whkblog.work/blog/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B/producer_consumer.png"></p><h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>线程安全指某个函数、函数库在多线程环境中被调用时，能够正确处理多个线程之间的共享变量，使程序功能正确完成</p><p>由于线程的执行会随时发生切换，就造成了不可预料的结果，出现线程不安全</p><h4 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h4><p>Lock用于解决线程安全问题</p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><strong>线程周期</strong></p><p><img src="https://www.whkblog.work/blog/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B/threading_life.png" alt="线程周期"></p><p>新建线程系统需要分配资源、终止线程系统需要回收资源，如果可以重用线程，则可以减去新建/终止的开销</p><p><img src="https://www.whkblog.work/blog/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B/threading_process.png" alt="线程池原理"></p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>1、提升性能：减去了大量新建、终止线程的开销，重用了线程资源</p><p>2、使用场景：适合处理突发性大量请求或需要大量线程完成任务，但实际任务处理时间较短</p><p>3、防御功能：能有效避免系统因为创建县城过多，而导致系统负荷过大相应变慢等问题（线程池线程数目                可以固定）</p><p>4：代码优势：使用线程池的语法比自己新建线程执行线程更加简洁</p><h4 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h4><p><img src="https://www.whkblog.work/blog/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B/ThreadPoolExecutor.png" alt="线程池用法"></p><h2 id="多进程-1"><a href="#多进程-1" class="headerlink" title="多进程"></a>多进程</h2><p>引入缘故</p><p>多线程虽然可以加速运行，但遇到CPU密集型计算依然会速度变慢，multirocessing模块可以解决多线程中GIL缺陷。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>实际上与多线程的用法差不多</p><p>这里需要注意到一点是线程安全锁即LOCK使用缘由：一个是安全锁防止冲突的（if） 一个是生产者消费者模式的</p><p><img src="https://www.whkblog.work/blog/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B/multiprocessing_ways.png" alt="多线程与多进程用法对比"></p><h2 id="多协程-2"><a href="#多协程-2" class="headerlink" title="多协程"></a>多协程</h2><h3 id="协程：在单线程内实现并发"><a href="#协程：在单线程内实现并发" class="headerlink" title="协程：在单线程内实现并发"></a>协程：在单线程内实现并发</h3><p>核心原理：利用一个超级循环（既while true）循环</p><p>核心原理：配合IO多路复用原理（IO时CPU可以干其他的事）</p><h3 id="实现：异步IO库——asyncio"><a href="#实现：异步IO库——asyncio" class="headerlink" title="实现：异步IO库——asyncio"></a>实现：异步IO库——asyncio</h3><p><strong>使用前提</strong>：要用在IO异步编程中，依赖的库必须支持异步IO特性，在爬虫中的<strong>requests</strong>不支持异步需使用<strong>aiohttp</strong> </p><p><img src="https://www.whkblog.work/blog/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B/asyncio.png" alt="协程爬虫模板"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这两天学习了下多线程相关知识，观看的是b站上一个up主的视频，这里做一个总结，方便以后回忆一下。&lt;/p&gt;
&lt;p&gt;视频链接&lt;a href=&quot;https://www.bilibili.com/video/BV1bK411A7tV&quot;&gt;https://www.bilibili.co</summary>
      
    
    
    
    <category term="python" scheme="https://www.whkblog.work/categories/python/"/>
    
    
    <category term="python" scheme="https://www.whkblog.work/tags/python/"/>
    
    <category term="多线程" scheme="https://www.whkblog.work/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>webcrawle</title>
    <link href="https://www.whkblog.work/2021/11/30/webcrawle_douban/"/>
    <id>https://www.whkblog.work/2021/11/30/webcrawle_douban/</id>
    <published>2021-11-30T02:30:57.000Z</published>
    <updated>2021-12-26T07:47:00.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬取豆瓣评论数据"><a href="#爬取豆瓣评论数据" class="headerlink" title="爬取豆瓣评论数据"></a>爬取豆瓣评论数据</h1><p>此教程时教如何爬取豆瓣网页数据，是笔者上爬虫课的一个实验作业；这里写下个人实现过程</p><h2 id="一、查看网页结构"><a href="#一、查看网页结构" class="headerlink" title="一、查看网页结构"></a>一、查看网页结构</h2><p>进入随机一个电影的评论区，摁F12查看网页数据</p><p><img src="https://www.whkblog.work/blog/images/%E8%B1%86%E7%93%A3/%E7%BD%91%E9%A1%B5%E7%BB%93%E6%9E%84.PNG"></p><p><img src="https://www.whkblog.work/blog/images/%E8%B1%86%E7%93%A3/%E7%BD%91%E9%A1%B5%E7%BB%93%E6%9E%84.PNG"></p><p>可以看到豆瓣评论区评论内容就是直接的html格式返回的数据；</p><p>数据的接口就是：</p><p><a href="https://movie.douban.com/subject/26897885/comments?status=P">https://movie.douban.com/subject/26897885/comments?status=P</a></p><p>然后我们分析一下这个链接的结构</p><p><a href="http://movie.douban.com/subject/">http://movie.douban.com/subject/</a> 这一段可以看懂，那26892885这一数据是代表什么？先放下不表。</p><p>/comments?status=P这里不用讲，就是评论，？好后面只要学过的网页的应该能知道是参数</p><p>再随便进入另外一个电影的评论区</p><p><a href="https://movie.douban.com/subject/30382416/comments?status=P">https://movie.douban.com/subject/30382416/comments?status=P</a></p><p>与上面电影的链接对比</p><p><a href="https://movie.douban.com/subject/26897885/comments?status=P">https://movie.douban.com/subject/26897885/comments?status=P</a></p><p>我们可以发现，这中间这串数字代表的应该就是电影的id</p><h2 id="二、爬取评论数据"><a href="#二、爬取评论数据" class="headerlink" title="二、爬取评论数据"></a>二、爬取评论数据</h2><p>首先，我们将要用到的库引入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> HTTPError</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> time</span><br></pre></td></tr></table></figure><p>urllib.request是用来向服务器发送请求获取网页数据的</p><p>bs4 用于解析网页结构</p><p>randint、time 主要使用其中的sleep函数，防止电脑爬取的过快，被服务器识别出，被封IP，用于反扒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">get_comments</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, save_name</span>):</span></span><br><span class="line">        self.save_name = save_name</span><br><span class="line">        self.url_pre = <span class="string">&#x27;https://movie.douban.com/subject/26897885/comments?status=P&#x27;</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;movie.douban.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;个人cookie数据&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0(WindowsNT10.0;Win64;x64)AppleWebKit/537.36(KHTML,&#x27;</span></span><br><span class="line">                          <span class="string">&#x27;likeGecko)Chrome/96.0.4664.45Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.douban.com/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这里先初始化后面会使用到的参数，save_name 顾名思义，就是保存的名字，</p><p>url_pre则是前面的评论数据的请求网址；headers 则是我们伪装成流浪器，除cookie外，大同小异，cookie则是每台机器都不同</p><p>现在来定义数据获取函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">self</span>):</span></span><br><span class="line">req = urllib.request.Request(self.url_pre, headers=self.headers)</span><br><span class="line">    req = urllib.request.urlopen(req)</span><br><span class="line">    content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br></pre></td></tr></table></figure><p>先向服务器请求数据，并将其编码成utf-8的格式</p><p>数据拿到后如何获取我要的数据呢？</p><p>我们先print获取到的数据</p><p><img src="https://www.whkblog.work/blog/images/%E8%B1%86%E7%93%A3/print.PNG"></p><p>可以看到，返回的就是html数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里我们直接获取到所有评论内容，find_all(‘div’,’comment-item’)返回的是一个列表</p><p>先打印一下，看看内容</p><p><img src="https://www.whkblog.work/blog/images/%E8%B1%86%E7%93%A3/commentlist.PNG"></p><p>可以看到，列表元素还是一段一段的html的数据，这肯定不是我们所需要的数据</p><p>前面我们不是查看了网页结构嘛</p><p><img src="https://www.whkblog.work/blog/images/%E8%B1%86%E7%93%A3/destruct.PNG"></p><p>这些标注出来的就是我们需要的，对于每一评论的数据</p><p>于是，我们遍历列表，对每条数据进行处理,并对数据进行储存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line">        evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">        ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">        times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">        vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">        content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">        strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; &quot;</span> + evaluation + <span class="string">&quot; &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里我先做一个处理，先判断一下comment_list 是否为空，别面出现一些不可预知的问题，导致了为爬取到，再进行遍历</p><p>这样，就对每调评论的信息提取出来了，具体代码我就解释了。</p><p>但是，这样不行，这样数据只是在内存中，而我们需要保存下来我们要的数据，添加写数据的步骤</p><p>这里我们将前面的代码整合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">self</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(self.save_name, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    f.truncate()  <span class="comment"># 清空文件</span></span><br><span class="line">    f.write(<span class="string">&quot;id     时间      点赞     星级      评论\n&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在获取评论...&quot;</span>)</span><br><span class="line">    <span class="comment"># 先爬取第一页内容</span></span><br><span class="line">    url = self.url_pre</span><br><span class="line">    req = urllib.request.Request(url, headers=self.headers)</span><br><span class="line">    req = urllib.request.urlopen(req)</span><br><span class="line">    content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    print(soupComment)</span><br><span class="line">    comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br><span class="line">    print(comments_list)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line"> evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">             ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">             times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">             vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">             content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">             strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; &quot;</span> + evaluation + <span class="string">&quot; &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">             f.write(strings)</span><br><span class="line">     f.close() <span class="comment">#打开文件后还要关闭文件</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>到这里，我们就完成了对一个网页的内容爬取，但是光爬一页数据一般来讲是没有用的</p><h2 id="三、翻页爬取——爬取更多页"><a href="#三、翻页爬取——爬取更多页" class="headerlink" title="三、翻页爬取——爬取更多页"></a>三、翻页爬取——爬取更多页</h2><p>怎么爬取下一页呢？</p><p>我们点击下一页</p><p>可以看到网页连接多了一段</p><p>第一页：<a href="https://movie.douban.com/subject/26897885/comments?status=P">https://movie.douban.com/subject/26897885/comments?status=P</a></p><p>第二页：<a href="https://movie.douban.com/subject/26897885/comments?start=20&amp;limit=20&amp;status=P&amp;sort=new_score">https://movie.douban.com/subject/26897885/comments?start=20&amp;limit=20&amp;status=P&amp;sort=new_score</a></p><p>第三页：<a href="https://movie.douban.com/subject/26897885/comments?start=40&amp;limit=20&amp;status=P&amp;sort=new_score">https://movie.douban.com/subject/26897885/comments?start=40&amp;limit=20&amp;status=P&amp;sort=new_score</a></p><p>。。。。。。</p><p>可以发现就是连接改变了</p><p>这时候，是不是我们可以考虑更改请求url的不同来进行处理，一种方式是，把pre_url 改掉，然后使用后面的，每次请求时调整start这个参数，以获取不同页的评论内容。</p><p>不过这里我们不这么做，我们怎么做呢？</p><p>我们再查看下一页按钮的网页结构</p><p><img src="https://www.whkblog.work/blog/images/%E8%B1%86%E7%93%A3/next.PNG"></p><p>可以发现，a标签内的href 链接不就是第二页第三页等等改变的数据嘛？</p><p>于是乎，我们可以这样处理</p><p>对__init__进行修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, save_name</span>):</span></span><br><span class="line">        self.save_name = save_name</span><br><span class="line">        self.url_pre = <span class="string">&#x27;https://movie.douban.com/subject/26897885/comments?status=P&#x27;</span></span><br><span class="line">        self.<span class="built_in">next</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>将请求代码也改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url = self.url_pre + self.<span class="built_in">next</span></span><br><span class="line">req = urllib.request.Request(url, headers=self.headers)</span><br></pre></td></tr></table></figure><p>在遍历完comment_list后，获取一下self.next</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">self</span>):</span></span><br><span class="line">    ....</span><br><span class="line">     f.close() <span class="comment">#打开文件后还要关闭文件</span></span><br><span class="line">        self.<span class="built_in">next</span> = soupComment.find(<span class="string">&#x27;a&#x27;</span>, attrs=&#123;<span class="string">&quot;data-page&quot;</span>: <span class="string">&quot;next&quot;</span>&#125;).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br></pre></td></tr></table></figure><p>接着，我们再进行翻页处理</p><p>当有next的时候，就继续获取继续写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">self</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(self.save_name, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    f.truncate()  <span class="comment"># 清空文件</span></span><br><span class="line">    f.write(<span class="string">&quot;id     时间      点赞     星级      评论\n&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在获取评论...&quot;</span>)</span><br><span class="line">    <span class="comment"># 先爬取第一页内容</span></span><br><span class="line">    url = self.url_pre + self.<span class="built_in">next</span></span><br><span class="line">    req = urllib.request.Request(url, headers=self.headers)</span><br><span class="line">    req = urllib.request.urlopen(req)</span><br><span class="line">    content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    print(soupComment)</span><br><span class="line">    comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br><span class="line">    print(comments_list)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line">            evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">            ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">            times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">            vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">            content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">            strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; 该用户没有进行评价 &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">            f.write(strings)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(id,time,vote,evaluation,content)</span></span><br><span class="line">        <span class="comment"># 获取下一页对应的url</span></span><br><span class="line">        self.<span class="built_in">next</span> = soupComment.find(<span class="string">&#x27;a&#x27;</span>, attrs=&#123;<span class="string">&quot;data-page&quot;</span>: <span class="string">&quot;next&quot;</span>&#125;).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br><span class="line">    <span class="comment"># 如果有下一页</span></span><br><span class="line">    <span class="keyword">while</span> self.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        time.sleep(randint(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">        print(<span class="string">&quot;翻页&quot;</span>)</span><br><span class="line">        url = self.url_pre + self.<span class="built_in">next</span></span><br><span class="line">        req = urllib.request.Request(url, headers=self.headers)</span><br><span class="line">        req = urllib.request.urlopen(req)</span><br><span class="line">        content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line">                evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">            ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">            times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">            vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">            content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">            strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; 该用户没有进行评价 &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">            f.write(strings)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>这时候，爬完了，我们运行测试一下（笔者这里测试的url 是 <a href="https://movie.douban.com/subject/26588308/comments%EF%BC%89">https://movie.douban.com/subject/26588308/comments）</a></p><p><img src="https://www.whkblog.work/blog/images/%E8%B1%86%E7%93%A3/test1.PNG"></p><p>结果一发现，诶，怎么回事啊，都还没有翻页，就开始报错</p><p>不对啊，怎么评价星级这一条怎么会为空呢？</p><p>检查一下代码，再运行一下，还是不行，于是 我们从头开始，再查看网页结构</p><p>诶，发现</p><p><img src="https://www.whkblog.work/blog/images/%E8%B1%86%E7%93%A3/test2.png"></p><p>怎么有一条评论没有星级评价，于是乎，我们再次修改，以处理这个bug</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">self</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(self.save_name, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    f.truncate()  <span class="comment"># 清空文件</span></span><br><span class="line">    f.write(<span class="string">&quot;id     时间      点赞     星级      评论\n&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在获取评论...&quot;</span>)</span><br><span class="line">    <span class="comment"># 先爬取第一页内容</span></span><br><span class="line">    url = self.url_pre + self.<span class="built_in">next</span></span><br><span class="line">    req = urllib.request.Request(url, headers=self.headers)</span><br><span class="line">    req = urllib.request.urlopen(req)</span><br><span class="line">    content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(soupComment)</span></span><br><span class="line">    comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(comments_list)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line">            <span class="keyword">try</span>:  <span class="comment"># 用于防止出现有的评论有评论内容但是没有对电影进行星级评分</span></span><br><span class="line">            evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">            <span class="keyword">except</span> AttributeError:</span><br><span class="line">                evaluation = <span class="string">&quot;&quot;</span></span><br><span class="line">            ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">            times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">            vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">            content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(evaluation) != <span class="number">0</span>:</span><br><span class="line">                strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; &quot;</span> + evaluation + <span class="string">&quot; &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                <span class="comment"># print(strings)</span></span><br><span class="line">                f.write(strings)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; 该用户没有进行评价 &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                <span class="comment"># print(strings)</span></span><br><span class="line">                f.write(strings)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(id,time,vote,evaluation,content)</span></span><br><span class="line">        <span class="comment"># 获取下一页对应的url</span></span><br><span class="line">        self.<span class="built_in">next</span> = soupComment.find(<span class="string">&#x27;a&#x27;</span>, attrs=&#123;<span class="string">&quot;data-page&quot;</span>: <span class="string">&quot;next&quot;</span>&#125;).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br><span class="line">    <span class="comment"># 如果有下一页</span></span><br><span class="line">    <span class="keyword">while</span> self.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        time.sleep(randint(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">        print(<span class="string">&quot;翻页&quot;</span>)</span><br><span class="line">        url = self.url_pre + self.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            req = urllib.request.Request(url, headers=self.headers)</span><br><span class="line">            req = urllib.request.urlopen(req)</span><br><span class="line">            content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">            comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line">                    <span class="keyword">try</span>: <span class="comment"># 用于防止出现有的评论有评论内容但是没有对电影进行星级评分</span></span><br><span class="line">                    evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">                    <span class="keyword">except</span> AttributeError: <span class="comment"># 找不到</span></span><br><span class="line">                        evaluation = <span class="string">&quot;&quot;</span></span><br><span class="line">                    ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">                    times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">                    vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">                    content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(evaluation) != <span class="number">0</span>:</span><br><span class="line">                        strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; &quot;</span> + evaluation + <span class="string">&quot; &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                        f.write(strings)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; 该用户没有进行评价 &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                        f.write(strings)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># print(id,time,vote,evaluation,content)d</span></span><br><span class="line">                <span class="comment"># 获取下一页对应的url</span></span><br><span class="line">                self.<span class="built_in">next</span> = soupComment.find(<span class="string">&#x27;a&#x27;</span>, attrs=&#123;<span class="string">&quot;data-page&quot;</span>: <span class="string">&quot;next&quot;</span>&#125;).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>我们再次测试：</p><p>会发现，当爬取到20页时，会出现一个错误：</p><p>httperror</p><p>这不是我们的问题，这个是豆瓣设置的，如果要看20页以后的评论数据就需要登录了，这里笔者并没有对这个进行处理</p><p>我们可以对其稍微处理一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">self</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(self.save_name, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    f.truncate()  <span class="comment"># 清空文件</span></span><br><span class="line">    f.write(<span class="string">&quot;id     时间      点赞     星级      评论\n&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;正在获取评论...&quot;</span>)</span><br><span class="line">    <span class="comment"># 先爬取第一页内容</span></span><br><span class="line">    url = self.url_pre + self.<span class="built_in">next</span></span><br><span class="line">    req = urllib.request.Request(url, headers=self.headers)</span><br><span class="line">    req = urllib.request.urlopen(req)</span><br><span class="line">    content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line">            <span class="keyword">try</span>:  <span class="comment"># 用于防止出现有的评论有评论内容但是没有对电影进行星级评分</span></span><br><span class="line">                evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">            <span class="keyword">except</span> AttributeError:</span><br><span class="line">                evaluation = <span class="string">&quot;&quot;</span></span><br><span class="line">            ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">            times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">            vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">            content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(evaluation) != <span class="number">0</span>:</span><br><span class="line">                strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; &quot;</span> + evaluation + <span class="string">&quot; &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                <span class="comment"># print(strings)</span></span><br><span class="line">                f.write(strings)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; 该用户没有进行评价 &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                <span class="comment"># print(strings)</span></span><br><span class="line">                f.write(strings)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(id,time,vote,evaluation,content)</span></span><br><span class="line">        <span class="comment"># 获取下一页对应的url</span></span><br><span class="line">        self.<span class="built_in">next</span> = soupComment.find(<span class="string">&#x27;a&#x27;</span>, attrs=&#123;<span class="string">&quot;data-page&quot;</span>: <span class="string">&quot;next&quot;</span>&#125;).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br><span class="line">    <span class="comment"># 如果有下一页</span></span><br><span class="line">    <span class="keyword">while</span> self.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        time.sleep(randint(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">        print(<span class="string">&quot;翻页&quot;</span>)</span><br><span class="line">        url = self.url_pre + self.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            req = urllib.request.Request(url, headers=self.headers)</span><br><span class="line">            req = urllib.request.urlopen(req)</span><br><span class="line">            content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">            comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line">                    <span class="keyword">try</span>: <span class="comment"># 用于防止出现有的评论有评论内容但是没有对电影进行星级评分</span></span><br><span class="line">                        evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">                    <span class="keyword">except</span> AttributeError: <span class="comment"># 找不到</span></span><br><span class="line">                        evaluation = <span class="string">&quot;&quot;</span></span><br><span class="line">                    ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">                    times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">                    vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">                    content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(evaluation) != <span class="number">0</span>:</span><br><span class="line">                        strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; &quot;</span> + evaluation + <span class="string">&quot; &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                        f.write(strings)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; 该用户没有进行评价 &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                        f.write(strings)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># print(id,time,vote,evaluation,content)d</span></span><br><span class="line">                <span class="comment"># 获取下一页对应的url</span></span><br><span class="line">                self.<span class="built_in">next</span> = soupComment.find(<span class="string">&#x27;a&#x27;</span>, attrs=&#123;<span class="string">&quot;data-page&quot;</span>: <span class="string">&quot;next&quot;</span>&#125;).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> HTTPError:</span><br><span class="line">            print(<span class="string">&quot;网络连接错误！！！ 或者当前已爬取20页评论数据，更多需要登录爬取&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h2 id="四、进阶——根据用户输入的电影名搜索对应的电影评论数据"><a href="#四、进阶——根据用户输入的电影名搜索对应的电影评论数据" class="headerlink" title="四、进阶——根据用户输入的电影名搜索对应的电影评论数据"></a>四、进阶——根据用户输入的电影名搜索对应的电影评论数据</h2><p>前面在查看网页结构的的时候我们已经知道，对于不同的电影，我们只需要修改一下电影id就可以获取到不同电影的评论数据</p><p>那怎么获取电影id呢？</p><p>根据爬虫的逻辑，我们先找到搜索链接，</p><p>搜索芬奇 对应网址：<a href="https://search.douban.com/movie/subject_search?search_text=%E8%8A%AC%E5%A5%87&amp;cat=1002">https://search.douban.com/movie/subject_search?search_text=%E8%8A%AC%E5%A5%87&amp;cat=1002</a></p><p>搜索毒液2 对应网址    <a href="https://search.douban.com/movie/subject_search?search_text=%E6%AF%92%E6%B6%B22&amp;cat=1002">https://search.douban.com/movie/subject_search?search_text=%E6%AF%92%E6%B6%B22&amp;cat=1002</a></p><p>这里可以知道搜索参数的就是text= 到 &amp;之间的数据，其实就是对应中文的urlencode。</p><p>再查看网页结构：</p><p><img src="https://www.whkblog.work/blog/images/%E8%B1%86%E7%93%A3/%E7%BD%91%E9%A1%B5%E7%BB%93%E6%9E%843.PNG"></p><p>可以发现这个搜索出来的结果对应的第一个电影里的subject_id就是我们需要的；</p><p>于是我们按照步骤走，不难发现明明浏览器中显示有这些数据，为什么我爬取出来的就没找到这些数据呢？</p><p>这里是由于搜索结构式动态返回的，是动态的，直接向服务器请求，我们无法获得此数据。</p><p>这里我们做另一种可行方式，也有其他方式，读者可自行实现。</p><p>我们引入selenium库（一个模拟浏览器的库） 模拟浏览器请求数据，并获取我们需要的数据,并且修改一下默认的 self.url_pre</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMovieID</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;:arg</span></span><br><span class="line"><span class="string">        运行此函数需要，检查电脑是否有浏览器的对应chromedrive，</span></span><br><span class="line"><span class="string">        运行的时候会打开一个浏览器页面，不能关闭！！！</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    self.movie_name = <span class="built_in">input</span>(<span class="string">&quot;请输入你要爬取的电影名：&quot;</span>)  <span class="comment"># 绿皮书</span></span><br><span class="line">    url = self.search_url + urlencode(&#123;<span class="string">&quot;q&quot;</span>: self.movie_name&#125;)</span><br><span class="line">    driver = webdriver.Chrome()  <span class="comment"># 模拟浏览器行为，以获得动态数据</span></span><br><span class="line">    driver.get(url)</span><br><span class="line">    content = BeautifulSoup(driver.page_source, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    temp = content.find(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;nbg&#x27;</span>).get(<span class="string">&quot;onclick&quot;</span>).split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    self.moveID = temp[-<span class="number">2</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].strip(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    self.url_pre = <span class="string">&#x27;https://movie.douban.com/subject/%s/comments&#x27;</span> % <span class="built_in">str</span>(self.moveID)</span><br><span class="line">    self.save_name = self.movie_name + self.save_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五、补充"><a href="#五、补充" class="headerlink" title="五、补充"></a>五、补充</h2><p>这次的爬虫，我认为并不完美，譬如：搜索出来的电影第一个就一定是我们输入的需要的电影嘛，这里可以进一步处理，通过打印出来我们搜索的电影列表信息（电影名，电影导演，主演，电影类型，这些都可通过爬虫获取到，不用到详情页面），再让用户进行选择；又譬如如果我要获取超过20页评论数据，我要怎么做，是否可以也向爬取电影id那样，模拟流浪器登录，然后再继续数据的爬取？</p><h2 id="六、全部代码"><a href="#六、全部代码" class="headerlink" title="六、全部代码"></a>六、全部代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author  : w</span></span><br><span class="line"><span class="comment"># @Time    : 2021/11/23 8:14</span></span><br><span class="line"><span class="comment"># @environment:PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> HTTPError</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  <span class="comment"># 获取电影id,搜索内容为动态数据</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">get_comments</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, save_name</span>):</span></span><br><span class="line">        self.moveID = <span class="literal">None</span></span><br><span class="line">        self.movie_name = <span class="literal">None</span></span><br><span class="line">        self.save_name = save_name</span><br><span class="line">        self.search_url = <span class="string">&#x27;https://www.douban.com/search?cat=1002&amp;&#x27;</span></span><br><span class="line">        self.url_pre = <span class="string">&#x27;https://movie.douban.com/subject/26588308/comments&#x27;</span></span><br><span class="line">        self.<span class="built_in">next</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;movie.douban.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;cookeis&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0(WindowsNT10.0;Win64;x64)AppleWebKit/537.36(KHTML,&#x27;</span></span><br><span class="line">                          <span class="string">&#x27;likeGecko)Chrome/96.0.4664.45Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.douban.com/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMovieID</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;:arg</span></span><br><span class="line"><span class="string">            运行此函数需要，检查电脑是否有浏览器的对应chromedrive，</span></span><br><span class="line"><span class="string">            运行的时候会打开一个浏览器页面，不能关闭！！！</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.movie_name = <span class="built_in">input</span>(<span class="string">&quot;请输入你要爬取的电影名：&quot;</span>)  <span class="comment"># 绿皮书</span></span><br><span class="line">        url = self.search_url + urlencode(&#123;<span class="string">&quot;q&quot;</span>: self.movie_name&#125;)</span><br><span class="line">        driver = webdriver.Chrome()  <span class="comment"># 模拟浏览器行为，以获得动态数据</span></span><br><span class="line">        driver.get(url)</span><br><span class="line">        content = BeautifulSoup(driver.page_source, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        temp = content.find(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;nbg&#x27;</span>).get(<span class="string">&quot;onclick&quot;</span>).split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        self.moveID = temp[-<span class="number">2</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].strip(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        self.url_pre = <span class="string">&#x27;https://movie.douban.com/subject/%s/comments&#x27;</span> % <span class="built_in">str</span>(self.moveID)</span><br><span class="line">        self.save_name = self.movie_name + self.save_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">self</span>):</span></span><br><span class="line">        f = <span class="built_in">open</span>(self.save_name, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        f.truncate()  <span class="comment"># 清空文件</span></span><br><span class="line">        f.write(<span class="string">&quot;id     时间      点赞      评论\n&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;正在获取评论...&quot;</span>)</span><br><span class="line">        <span class="comment"># 先爬取第一页内容</span></span><br><span class="line">        url = self.url_pre + self.<span class="built_in">next</span></span><br><span class="line">        req = urllib.request.Request(url, headers=self.headers)</span><br><span class="line">        req = urllib.request.urlopen(req)</span><br><span class="line">        content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">         <span class="comment"># print(soupComment)</span></span><br><span class="line">        comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(comments_list)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line">                <span class="keyword">try</span>:  <span class="comment"># 用于防止出现有的评论有评论内容但是没有对电影进行星级评分</span></span><br><span class="line">                evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">                <span class="keyword">except</span> AttributeError:</span><br><span class="line">                evaluation = <span class="string">&quot;&quot;</span></span><br><span class="line">                ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">                times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">                vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">                content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(evaluation) != <span class="number">0</span>:</span><br><span class="line">                    strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; &quot;</span> + evaluation + <span class="string">&quot; &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                    <span class="comment"># print(strings)</span></span><br><span class="line">                    f.write(strings)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; 该用户没有进行评价 &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                    <span class="comment"># print(strings)</span></span><br><span class="line">                    f.write(strings)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># print(id,time,vote,evaluation,content)</span></span><br><span class="line">            <span class="comment"># 获取下一页对应的url</span></span><br><span class="line">            self.<span class="built_in">next</span> = soupComment.find(<span class="string">&#x27;a&#x27;</span>, attrs=&#123;<span class="string">&quot;data-page&quot;</span>: <span class="string">&quot;next&quot;</span>&#125;).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br><span class="line">        <span class="comment"># 如果有下一页</span></span><br><span class="line">        <span class="keyword">while</span> self.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            time.sleep(randint(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">            print(<span class="string">&quot;翻页&quot;</span>)</span><br><span class="line">            url = self.url_pre + self.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                req = urllib.request.Request(url, headers=self.headers)</span><br><span class="line">                req = urllib.request.urlopen(req)</span><br><span class="line">                content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                soupComment = BeautifulSoup(content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">                comments_list = soupComment.find_all(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;comment-item&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(comments_list) != <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> comments_list:</span><br><span class="line">                        <span class="keyword">try</span>: <span class="comment"># 用于防止出现有的评论有评论内容但是没有对电影进行星级评分</span></span><br><span class="line">                        evaluation = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 推荐 还行 较差 评价等级</span></span><br><span class="line">                        <span class="keyword">except</span> AttributeError: <span class="comment"># 找不到</span></span><br><span class="line">                            evaluation = <span class="string">&quot;&quot;</span></span><br><span class="line">                        ids = i.find(<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;hidden&#x27;</span>&#125;).get(<span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 评论id</span></span><br><span class="line">                        times = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;comment-time&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 评论时间</span></span><br><span class="line">                        vote = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;votes&#x27;</span>).getText()  <span class="comment"># 点赞数</span></span><br><span class="line">                        content = i.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>).getText().strip(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 评论内容</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">len</span>(evaluation) != <span class="number">0</span>:</span><br><span class="line">                            strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; &quot;</span> + evaluation + <span class="string">&quot; &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                            f.write(strings)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            strings = ids + <span class="string">&quot; &quot;</span> + times + <span class="string">&quot; &quot;</span> + vote + <span class="string">&quot; 该用户没有进行评价 &quot;</span> + content + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                            f.write(strings)</span><br><span class="line">                    <span class="comment"># print(id,time,vote,evaluation,content)d</span></span><br><span class="line">                    <span class="comment"># 获取下一页对应的url</span></span><br><span class="line">                    self.<span class="built_in">next</span> = soupComment.find(<span class="string">&#x27;a&#x27;</span>, attrs=&#123;<span class="string">&quot;data-page&quot;</span>: <span class="string">&quot;next&quot;</span>&#125;).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">&quot;爬取失败!&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> HTTPError:</span><br><span class="line">                print(<span class="string">&quot;网络连接错误！或者 当前已经爬取了20页，后续爬取需要登录后才能继续。!&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = get_comments(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">    a.getMovieID()</span><br><span class="line">    a.get_data()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>le</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;爬取豆瓣评论数据&quot;&gt;&lt;a href=&quot;#爬取豆瓣评论数据&quot; class=&quot;headerlink&quot; title=&quot;爬取豆瓣评论数据&quot;&gt;&lt;/a&gt;爬取豆瓣评论数据&lt;/h1&gt;&lt;p&gt;此教程时教如何爬取豆瓣网页数据，是笔者上爬虫课的一个实验作业；这里写下个人实现过程&lt;/p&gt;
</summary>
      
    
    
    
    <category term="爬虫" scheme="https://www.whkblog.work/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="python" scheme="https://www.whkblog.work/tags/python/"/>
    
    <category term="爬虫" scheme="https://www.whkblog.work/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>wifi</title>
    <link href="https://www.whkblog.work/2021/11/27/wifi/"/>
    <id>https://www.whkblog.work/2021/11/27/wifi/</id>
    <published>2021-11-27T03:27:21.000Z</published>
    <updated>2021-12-26T07:47:51.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h1><p>前几天被同学问怎么抓包校园网，他想做一个自动登录校园网的脚本，然后昨天上linux我实验提前做完了，就没事干写两个python自动连接wifi并且登录校园网的脚本</p><h1 id="实现想法"><a href="#实现想法" class="headerlink" title="实现想法"></a>实现想法</h1><h3 id="开始想法"><a href="#开始想法" class="headerlink" title="开始想法"></a>开始想法</h3><p>一开始我的想法是，直接向服务器发送一个数据包，是关于登hahha录的，也就是在点击登录后，浏览器发送的数据包；这个同时也是我那个同学的想法</p><p>这个实现，能力不足，计网没学到家（嗯~ o(<em>￣▽￣</em>)o）；我那个同学抓了好几次包，都不知道发送的数据是啥，这里是指可以抓到数据包，</p><p>我也可以，就是我看不懂数据包内容，一串16进制的数据，我分不清那些数据段是自己设置的数据段</p><h3 id="实现想法-1"><a href="#实现想法-1" class="headerlink" title="实现想法"></a>实现想法</h3><p>我的想法是模拟人的操作，打开浏览器，然后输入内容，再点击登录，这一步我是使用python selenium库实现的；</p><p>再要考虑的一个问题是，电脑自动连接wifi,这个可以使用pywifi来通过控制电脑wifi的连接来确保一定会连接上校园网</p><p>最后再将写好的代码打包成exe文件，并且将文件设置为开机自启动，在学校期间，全都是使用校园网，并且我校校园网是全校覆盖</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>现在python环境下创建一个py文件</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>新建一个class 类,并初始化一些变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, userID, pwd</span>):</span></span><br><span class="line">        self.login = <span class="string">&#x27;url&#x27;</span> <span class="comment">#校园网登录网址</span></span><br><span class="line">        self.<span class="built_in">id</span> = userID   <span class="comment"># 校园网登录ID</span></span><br><span class="line">        self.password = pwd<span class="comment"># 校园网登录pwd</span></span><br><span class="line">        self.headers = &#123;  <span class="comment">#请求头定义</span></span><br><span class="line">            <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0(WindowsNT10.0;Win64;x64)AppleWebKit/537.36(KHTML,&#x27;</span></span><br><span class="line">                          <span class="string">&#x27;likeGecko)Chrome/96.0.4664.45Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="wifi控制函数"><a href="#wifi控制函数" class="headerlink" title="wifi控制函数"></a>wifi控制函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_wifi</span>(<span class="params">self</span>):</span></span><br><span class="line">    wifi = pywifi.PyWiFi()  <span class="comment"># 扫描wifi驱动，并会输出</span></span><br><span class="line">    ifaces = wifi.interfaces()[<span class="number">0</span>] </span><br><span class="line">    print(ifaces.name()) <span class="comment"># 不一定是必要，可以不输出</span></span><br><span class="line">    ifaces.disconnect() <span class="comment"># 断开网卡连接</span></span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    profile = pywifi.Profile() <span class="comment"># 创建wifi连接文件</span></span><br><span class="line">    profile.ssid = <span class="string">&#x27;wifi_name&#x27;</span> <span class="comment"># 校园网的wifi密码</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 我校校园网是开放的，登录的</span></span><br><span class="line"><span class="string">    有需要的话，也可以改为自己想自动连接的wifi;</span></span><br><span class="line"><span class="string">    不过要是在家的话，这个脚本又鸡肋了，毕竟家里wifi一般来讲不会断，而不是像校园网会断网orz</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    # 网卡的开放状态 | auth - AP的认证算法</span></span><br><span class="line"><span class="string">profile.auth = const.AUTH_ALG_OPEN</span></span><br><span class="line"><span class="string"># wifi的加密算法，一般wifi 加密算法时wps  #选择wifi加密方式  akm - AP的密钥管理类型</span></span><br><span class="line"><span class="string">profile.akm.append(const.AKM_TYPE_WPA2PSK)</span></span><br><span class="line"><span class="string"># 加密单元 /cipher - AP的密码类型</span></span><br><span class="line"><span class="string">profile.cipher = const.CIPHER_TYPE_CCMP</span></span><br><span class="line"><span class="string"># 调用密码 /wifi密钥 如果无密码，则应该设置此项CIPHER_TYPE_NONE</span></span><br><span class="line"><span class="string">profile.key = pwd</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    ifaces.remove_all_network_profiles()  <span class="comment"># 删除所有AP配置文件（为了下一次新的连接）：</span></span><br><span class="line">    tmp_profile = ifaces.add_network_profile(profile) <span class="comment"># 加载新的连接文件</span></span><br><span class="line">    ifaces.connect(tmp_profile)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.isConnected(ifaces):</span><br><span class="line">        sleep(<span class="number">5</span>)  <span class="comment"># 若未成功，等待5秒后再看下是否成功连接了</span></span><br><span class="line">        self.isConnected(ifaces)</span><br></pre></td></tr></table></figure><p>这里面还有一个isConnected函数，是用来判断wifi是否连接成功</p><p>如果连接成功，将会调用自动登录模块，连接不成功会输出连接失败</p><p>下面是isConnected函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isConnected</span>(<span class="params">self, ifaces=<span class="literal">None</span></span>):</span></span><br><span class="line">       <span class="keyword">if</span> ifaces.status() == pywifi.const.IFACE_CONNECTED:</span><br><span class="line">           print(<span class="string">&quot;成功连接&quot;</span>)</span><br><span class="line">           self.test_login()</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           print(<span class="string">&quot;失败&quot;</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="自动登录"><a href="#自动登录" class="headerlink" title="自动登录"></a>自动登录</h3><p>自动登录模块用到的selenium库，使用了webdriver()，如果你也使用这个的话，需要注意一点的就是，需要下载一个驱动这里我就不写，</p><p>我是chorme浏览器，也可改成fox,edge等，估计都得安装这个chromedriver.exe类似的东西，我没有测试</p><p>可以参考这个连接<a href="https://blog.csdn.net/weixin_42403127/article/details/85255891">https://blog.csdn.net/weixin_42403127/article/details/85255891</a></p><p>这里有三个find_elemet 是针对我校校园网的的,不同的公开网络登录需要特殊设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_login</span>(<span class="params">self</span>):</span></span><br><span class="line">    driver = webdriver.Chrome() </span><br><span class="line">    driver.get(self.login) <span class="comment"># 驱动浏览器到这个网页</span></span><br><span class="line">    username = driver.find_element(By.ID, <span class="string">&quot;username&quot;</span>)  <span class="comment">#找到登录表单</span></span><br><span class="line">    pwd = driver.find_element(By.ID, <span class="string">&quot;password&quot;</span>)</span><br><span class="line">    username.send_keys(self.<span class="built_in">id</span>)  <span class="comment"># 向表单中填入数据</span></span><br><span class="line">    pwd.send_keys(self.password)</span><br><span class="line">    elem = driver.find_element(By.ID, <span class="string">&quot;login&quot;</span>) <span class="comment"># 找到登录按钮</span></span><br><span class="line">    elem.click() <span class="comment">#点击登录</span></span><br><span class="line">    sleep(<span class="number">2</span>) <span class="comment"># 停止两秒，等待返回状态</span></span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    l = test(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">3</span>)</span><br><span class="line">    l.get_wifi()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在编辑器运行一下，测试一下是否成功，出错的话好再改</p><h1 id="打包成exe文件"><a href="#打包成exe文件" class="headerlink" title="打包成exe文件"></a>打包成exe文件</h1><p>前面的代码都没包含引入库的内容，写在这里；为了方便打包，应该把用了的函数引入，而不是把所有的包内容都引入，那样容易导致打包的内容多，exe打</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pywifi</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br></pre></td></tr></table></figure><p>打开命令行，进入到当前py文件所在文件夹，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F xx.py</span><br></pre></td></tr></table></figure><p>这里xx.py是指你的py文件</p><p>使用的是-F命令，这样只会生成一个独立文件，不然会带好多东西3</p><p><img src="https://www.whkblog.work/blog/images/wifi1.png" alt="begin"></p><p>出现上面这个就代表成功。</p><p>同时在py文件下会出现两个文件夹，一个build一个dist文件，exe文件在dist文件当中</p><p><img src="https://www.whkblog.work/blog/images/wifi2.png" alt="begin"></p><h1 id="设置为开机自启"><a href="#设置为开机自启" class="headerlink" title="设置为开机自启"></a>设置为开机自启</h1><p>键盘win+r，输入shell:startup,会打开一个文件夹</p><p><img src="https://www.whkblog.work/blog/images/wifi3.png" alt="begin"></p><p><img src="https://www.whkblog.work/blog/images/wifi4.png" alt="begin"></p><p>将dist文件内exe文件创建一个快捷方式，然后将快捷方式剪切到刚打开的文件夹中，即完成了开机自动这个exe</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>这个脚本还有挺多问题的</p><p>譬如，要是wifi没有连接成功怎么办，以及登录失败怎么处理这些都没有处理，不过就目前而言，凑合用吧。</p><p><img src="https://www.whkblog.work/blog/images/%E5%8F%88%E4%B8%8D%E6%98%AF%E4%B8%8D%E8%83%BD%E7%94%A8.jpg" alt="begin"></p><p>就这样。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概况&quot;&gt;&lt;a href=&quot;#概况&quot; class=&quot;headerlink&quot; title=&quot;概况&quot;&gt;&lt;/a&gt;概况&lt;/h1&gt;&lt;p&gt;前几天被同学问怎么抓包校园网，他想做一个自动登录校园网的脚本，然后昨天上linux我实验提前做完了，就没事干写两个python自动连接wif</summary>
      
    
    
    
    <category term="杂七杂八" scheme="https://www.whkblog.work/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
    <category term="python" scheme="https://www.whkblog.work/tags/python/"/>
    
    <category term="没事做的" scheme="https://www.whkblog.work/tags/%E6%B2%A1%E4%BA%8B%E5%81%9A%E7%9A%84/"/>
    
  </entry>
  
  <entry>
    <title>OS算法</title>
    <link href="https://www.whkblog.work/2021/05/09/OS%E7%AE%97%E6%B3%95/"/>
    <id>https://www.whkblog.work/2021/05/09/OS%E7%AE%97%E6%B3%95/</id>
    <published>2021-05-09T12:42:49.000Z</published>
    <updated>2021-11-30T02:37:36.938Z</updated>
    
    <content type="html"><![CDATA[<p>此文写的是操作系统的算法（java版）</p><h1 id="读前须知"><a href="#读前须知" class="headerlink" title="读前须知"></a>读前须知</h1><p>1、文中算法，都是为了完成作业而写的，存在较多BUG, 算法最后带一个测试数据，就是实验要求的测试数据，并不全，算法本身问题较多，很多可能边界数据不能运行，会出现bug,例如进程调度里面，一个进程结束了，新的进程还未到达这一类情况就并没有写解决方法。、</p><p>2、由于我不会java,但是实验老师说用java加分，所有边学边写的，代码有些不规范敬请谅解。</p><p>3、由于java不太会，许多算法，都是在前任的基础之上写的；当然了，也有我完全我自己写的，不是所有的代码都符合老师的要求。<strong>在此感谢哪些人(≧∇≦)ﾉ</strong></p><h1 id="进程调度算法（单道）"><a href="#进程调度算法（单道）" class="headerlink" title="进程调度算法（单道）"></a>进程调度算法（单道）</h1><h2 id="FCFS"><a href="#FCFS" class="headerlink" title="FCFS"></a>FCFS</h2><h3 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h3><p>​    先来先服务的调度算法：最简单的调度算法，既可以用于作业调度 ，也可以用于程序调度，当作业调度中采用该算法时，系统将按照作业到达的先后次序来进行调度，优先从后备队列中，选择一个或多个位于队列头部的作业，把他们调入内存，分配所需资源、创建进程，然后放入“就绪队列”,直到该进程运行到完成或发生某事件堵塞后，进程调度程序才将处理机分配给其他进程。</p><h3 id="Java具体实现"><a href="#Java具体实现" class="headerlink" title="Java具体实现"></a>Java具体实现</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shuru</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    String name; <span class="comment">//进程名</span></span><br><span class="line">    time arrve; <span class="comment">//到达就绪时间</span></span><br><span class="line">    <span class="keyword">int</span>  zx;<span class="comment">//执行时间</span></span><br><span class="line">    <span class="keyword">int</span> grad;</span><br><span class="line">    time start;<span class="comment">//开始时间</span></span><br><span class="line">    time  end;<span class="comment">//完成时间</span></span><br><span class="line">    <span class="keyword">int</span> zz;  <span class="comment">//周转时间=完成时间-到达时间</span></span><br><span class="line">    <span class="keyword">double</span> zzxs; <span class="comment">//周转系数 =周转时间/执行时间</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">time</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> hour;</span><br><span class="line">        <span class="keyword">int</span> mintes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FCFS</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SortByTime</span><span class="params">(Shuru shuru[])</span> </span>&#123;<span class="comment">//比较到达时间</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=shuru.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; shuru.length; j++) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (shuru[j].arrve.hour*<span class="number">60</span>+shuru[j].arrve.mintes &lt; shuru[i].arrve.hour*<span class="number">60</span>+shuru[i].arrve.mintes) &#123;</span><br><span class="line">                                        Shuru t = shuru[i];</span><br><span class="line">                                        shuru[i] = shuru[j];</span><br><span class="line">                                        shuru[j] = t;</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SortBygrade</span><span class="params">(Shuru shuru[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=shuru.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; shuru.length; j++) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (shuru[j].grad &lt; shuru[i].grad) &#123;</span><br><span class="line">                                        Shuru t = shuru[i];</span><br><span class="line">                                        shuru[i] = shuru[j];</span><br><span class="line">                                        shuru[j] = t;</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fcfs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      </span></span><br><span class="line">                Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                Shuru shuru[] = <span class="keyword">new</span> Shuru[n];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;进程&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;信息输入：&quot;</span>);</span><br><span class="line">                        shuru[i] = <span class="keyword">new</span> Shuru();</span><br><span class="line">                        shuru[i].start = <span class="keyword">new</span> time();</span><br><span class="line">                        shuru[i].arrve = <span class="keyword">new</span> time();</span><br><span class="line">                        shuru[i].end = <span class="keyword">new</span> time();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;进程id\t进程名\t优先级\t进程到达时间\t进程执行时间&quot;</span>);</span><br><span class="line">                        String s = scan.nextLine();</span><br><span class="line">                        String[] sa = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                        shuru[i].id = Integer.parseInt(sa[<span class="number">0</span>]);</span><br><span class="line">                        shuru[i].name = sa[<span class="number">1</span>];</span><br><span class="line">                        shuru[i].grad = Integer.parseInt(sa[<span class="number">2</span>]);</span><br><span class="line">                        String[] time = sa[<span class="number">3</span>].split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                        shuru[i].arrve.hour = Integer.parseInt(time[<span class="number">0</span>]);</span><br><span class="line">                        shuru[i].arrve.mintes = Integer.parseInt(time[<span class="number">1</span>]);</span><br><span class="line">                        shuru[i].zx = Integer.parseInt(sa[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        shuru[i].start.hour = shuru[i].start.mintes = <span class="number">0</span>;</span><br><span class="line">                        shuru[i].end.hour = shuru[i].end.mintes = <span class="number">0</span>;</span><br><span class="line">                        shuru[i].zz = <span class="number">0</span>;</span><br><span class="line">                        shuru[i].zzxs = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;**********************************************************&quot;</span>);</span><br><span class="line"></span><br><span class="line">                SortByTime(shuru);</span><br><span class="line">                calculate(shuru,n);</span><br><span class="line">                SortBygrade(shuru);</span><br><span class="line">                calculate(shuru,n);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">(Shuru shuru[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">                <span class="comment">/*第一个执行的程序*/</span></span><br><span class="line">                shuru[<span class="number">0</span>].start.hour = shuru[<span class="number">0</span>].arrve.hour;</span><br><span class="line">                shuru[<span class="number">0</span>].start.mintes = shuru[<span class="number">0</span>].arrve.mintes;</span><br><span class="line">                <span class="comment">//计算结束时间</span></span><br><span class="line">                <span class="keyword">if</span> ((shuru[<span class="number">0</span>].start.mintes + shuru[<span class="number">0</span>].zx) &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">                        shuru[<span class="number">0</span>].end.hour = shuru[<span class="number">0</span>].start.hour + <span class="number">1</span>;</span><br><span class="line">                        shuru[<span class="number">0</span>].end.mintes = (shuru[<span class="number">0</span>].start.mintes + shuru[<span class="number">0</span>].zx - <span class="number">60</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        shuru[<span class="number">0</span>].end.hour = shuru[<span class="number">0</span>].start.hour;</span><br><span class="line">                        shuru[<span class="number">0</span>].end.mintes = (shuru[<span class="number">0</span>].start.mintes + shuru[<span class="number">0</span>].zx);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//计算周转时间</span></span><br><span class="line">                <span class="keyword">if</span> (shuru[<span class="number">0</span>].end.hour == shuru[<span class="number">0</span>].start.hour) &#123;</span><br><span class="line">                        shuru[<span class="number">0</span>].zz = (shuru[<span class="number">0</span>].end.mintes - shuru[<span class="number">0</span>].arrve.mintes);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        shuru[<span class="number">0</span>].zz = ((shuru[<span class="number">0</span>].end.hour - shuru[<span class="number">0</span>].arrve.hour)*<span class="number">60</span> + shuru[<span class="number">0</span>].end.mintes - shuru[<span class="number">0</span>].arrve.mintes);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//计算周转系数</span></span><br><span class="line">                shuru[<span class="number">0</span>].zzxs = (<span class="keyword">float</span>)shuru[<span class="number">0</span>].zz/shuru[<span class="number">0</span>].zx;</span><br><span class="line">                <span class="comment">/*计算除去第一个进程外的其他进程*/</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"></span><br><span class="line">                        shuru[i].start.hour = shuru[i - <span class="number">1</span>].end.hour;</span><br><span class="line">                        shuru[i].start.mintes = shuru[i - <span class="number">1</span>].end.mintes;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//计算结束时间</span></span><br><span class="line">                        <span class="keyword">if</span> ((shuru[i].start.mintes + shuru[i].zx) &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">                                shuru[i].end.hour = (shuru[i].start.hour + <span class="number">1</span>);</span><br><span class="line">                                shuru[i].end.mintes = (shuru[i].zx + shuru[i].start.mintes - <span class="number">60</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                shuru[i].end.hour = shuru[i].start.hour;</span><br><span class="line">                                shuru[i].end.mintes = shuru[i].start.mintes + shuru[i].zx;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//计算周转时间</span></span><br><span class="line">                        <span class="keyword">if</span> (shuru[i].end.hour == shuru[i].arrve.hour) &#123;</span><br><span class="line">                                shuru[i].zz = shuru[i].end.mintes - shuru[i].arrve.mintes;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                shuru[i].zz = (shuru[i].end.hour - shuru[i].arrve.hour) * <span class="number">60</span> + shuru[i].end.mintes - shuru[i].arrve.mintes;</span><br><span class="line">                        &#125;</span><br><span class="line">                        shuru[i].zzxs = (<span class="keyword">float</span>)shuru[i].zz / shuru[i].zx;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;进程id\t进程名\t优先级\t执行时间\t\t到达时间\t\t开始时间\t\t结束时间\t\t周转时间\t\t带权周转系数&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> sumzz=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">float</span> sumzzxs=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                        show(shuru[i]);</span><br><span class="line"></span><br><span class="line">                        sumzz += shuru[i].zz;</span><br><span class="line">                        sumzzxs += shuru[i].zzxs;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.printf(<span class="string">&quot;系统平均周转时间\t\t\t\t\t%10.2f（分钟）\n&quot;</span>,(<span class="keyword">float</span>)sumzz/n);</span><br><span class="line">                System.out.printf(<span class="string">&quot;带权平均周转时间\t\t\t\t\t%10.2f（分钟）\n&quot;</span>,sumzzxs/n);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span> <span class="params">(Shuru shuru)</span></span>&#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t%s\t\t%d\t\t%d（分钟）\t%02d:%02d\t\t%02d:%02d\t\t%02d:%02d\t\t%d（分钟）\t\t%.2f\n&quot;</span>,shuru.id, shuru.name,shuru.grad,shuru.zx,shuru.arrve.hour,shuru.arrve.mintes, shuru.start.hour,shuru.start.mintes,shuru.end.hour,shuru.end.mintes,shuru.zz,shuru.zzxs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">                FCFS j = <span class="keyword">new</span> FCFS();</span><br><span class="line">                Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                System.out.print(<span class="string">&quot;请输入进程数目：\n&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> n = s.nextInt();</span><br><span class="line">                j.fcfs(n);</span><br><span class="line">                System.out.println(<span class="string">&quot;所有进程执行完毕！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">实验数据</span></span><br><span class="line"><span class="comment">5001 p1 1 9:40 20</span></span><br><span class="line"><span class="comment">5004 p4 4 10:10 10</span></span><br><span class="line"><span class="comment">5005 p5 3 10:05 30</span></span><br><span class="line"><span class="comment">5002 p2 3 9:55 15</span></span><br><span class="line"><span class="comment">5003 p3 2 9:45 25</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="SJF"><a href="#SJF" class="headerlink" title="SJF"></a>SJF</h2><h3 id="主要思想-1"><a href="#主要思想-1" class="headerlink" title="主要思想"></a>主要思想</h3><p>同先来先服务算法一样的功能，与之不同的是，短作业优先算法，是以作业运行时间长短排序；</p><p>1、在已到达的作业中，选择作业时间最短的进程</p><p>2、当前进程结束后，再在已到达的进程中选择运行时间最短的进程进入CPU进行执行</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><h4 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h4><p>与FCFS数结构一样</p><h4 id="Java具体实现-1"><a href="#Java具体实现-1" class="headerlink" title="Java具体实现"></a>Java具体实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SJF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SortByTime</span><span class="params">(Shuru shuru[])</span> </span>&#123;<span class="comment">//比较到达时间</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=shuru.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; shuru.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (shuru[j].arrve.hour*<span class="number">60</span>+shuru[j].arrve.mintes &lt; shuru[i].arrve.hour*<span class="number">60</span>+shuru[i].arrve.mintes) &#123;</span><br><span class="line"></span><br><span class="line">                    Shuru t = shuru[i];</span><br><span class="line">                    shuru[i] = shuru[j];</span><br><span class="line">                    shuru[j] = t;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SortBygrade</span><span class="params">(Shuru shuru[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=shuru.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; shuru.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(shuru[j].grad &gt; shuru[i].grad)&#123;</span><br><span class="line"></span><br><span class="line">                    Shuru temp = shuru[i];</span><br><span class="line">                    shuru[i] = shuru[j];</span><br><span class="line">                    shuru[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Shuru shuru[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;shuru.length;i++)&#123;</span><br><span class="line">            shuru[i] = <span class="keyword">new</span> Shuru();</span><br><span class="line">            shuru[i].start = <span class="keyword">new</span> time();</span><br><span class="line">            shuru[i].arrve = <span class="keyword">new</span> time();</span><br><span class="line">            shuru[i].end = <span class="keyword">new</span> time();</span><br><span class="line">            shuru[i].id = <span class="number">0</span>;</span><br><span class="line">            shuru[i].name = <span class="string">&quot;nothing&quot;</span>;</span><br><span class="line">            shuru[i].grad = <span class="number">0</span>;</span><br><span class="line">            shuru[i].zx = <span class="number">0</span>;</span><br><span class="line">            shuru[i].zz = <span class="number">0</span>;</span><br><span class="line">            shuru[i].zzxs = <span class="number">0</span>;</span><br><span class="line">            shuru[i].start.hour = <span class="number">0</span>;</span><br><span class="line">            shuru[i].start.mintes = <span class="number">0</span>;</span><br><span class="line">            shuru[i].end.hour = <span class="number">0</span>;</span><br><span class="line">            shuru[i].end.mintes = <span class="number">0</span>;</span><br><span class="line">            shuru[i].arrve.hour = <span class="number">0</span>;</span><br><span class="line">            shuru[i].arrve.mintes = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(Shuru shuru[],Shuru shuru1)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;shuru.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(shuru[i].id == shuru1.id)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sjf</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Shuru shuru[] = <span class="keyword">new</span> Shuru[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;进程&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;信息输入：&quot;</span>);</span><br><span class="line">            shuru[i] = <span class="keyword">new</span> Shuru();</span><br><span class="line">            shuru[i].start = <span class="keyword">new</span> time();</span><br><span class="line">            shuru[i].arrve = <span class="keyword">new</span> time();</span><br><span class="line">            shuru[i].end = <span class="keyword">new</span> time();</span><br><span class="line">            System.out.println(<span class="string">&quot;进程id\t进程名\t优先级\t进程到达时间:\t进程执行时间&quot;</span>);</span><br><span class="line">            String s = scan.nextLine();</span><br><span class="line">            String[] sa = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            shuru[i].id = Integer.parseInt(sa[<span class="number">0</span>]);</span><br><span class="line">            shuru[i].name = sa[<span class="number">1</span>];</span><br><span class="line">            shuru[i].grad = Integer.parseInt(sa[<span class="number">2</span>]);</span><br><span class="line">            String[] time = sa[<span class="number">3</span>].split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            shuru[i].arrve.hour = Integer.parseInt(time[<span class="number">0</span>]);</span><br><span class="line">            shuru[i].arrve.mintes = Integer.parseInt(time[<span class="number">1</span>]);</span><br><span class="line">            shuru[i].zx = Integer.parseInt(sa[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            shuru[i].start.hour = shuru[i].start.mintes = <span class="number">0</span>;</span><br><span class="line">            shuru[i].end.hour = shuru[i].end.mintes = <span class="number">0</span>;</span><br><span class="line">            shuru[i].zz = <span class="number">0</span>;</span><br><span class="line">            shuru[i].zzxs = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;**********************************************************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Shuru shuruans[] = <span class="keyword">new</span> Shuru[n];</span><br><span class="line">        init(shuruans);</span><br><span class="line">        Shuru shurutemp[] = <span class="keyword">new</span> Shuru[n];</span><br><span class="line">        init(shurutemp);</span><br><span class="line">        <span class="comment">//先时间排序</span></span><br><span class="line">        SortByTime(shuru);</span><br><span class="line">        <span class="comment">//按优先级进行执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;进程id\t进程名\t优先级\t执行时间\t\t到达时间\t\t开始时间\t\t结束时间\t\t周转时间\t\t带权周转系数&quot;</span>);</span><br><span class="line">        calculate(shuru[<span class="number">0</span>],shuru[<span class="number">0</span>].arrve.hour,shuru[<span class="number">0</span>].arrve.mintes);</span><br><span class="line">        <span class="comment">//执行第一个到达的进程</span></span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        shuruans[count] = shuru[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n-<span class="number">1</span>;k++) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            从第一次执行完成后，每次执行时，</span></span><br><span class="line"><span class="comment">            先从已经到达的进程中选择优先级最高的进程进行执行；</span></span><br><span class="line"><span class="comment">            执行完后再次选择，直到所有进程都执行完毕。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            init(shurutemp);<span class="comment">//作为中间变量，储存筛选出来的进程</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; shuru.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (shuru[i].arrve.hour*<span class="number">60</span>+shuru[i].arrve.mintes &lt;= shuruans[count].end.hour*<span class="number">60</span>+shuruans[count].end.mintes &amp;&amp; !find(shuruans,shuru[i])  ) &#123;</span><br><span class="line">                    shurutemp[i] = shuru[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i==shuru.length-<span class="number">1</span> &amp;&amp; shurutemp[<span class="number">0</span>].id==<span class="number">0</span>)&#123;</span><br><span class="line">                    shurutemp[<span class="number">0</span>] = shuru[count+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            SortBygrade(shurutemp);<span class="comment">//按优先级排序</span></span><br><span class="line">            <span class="keyword">if</span>(count&lt;n)&#123;</span><br><span class="line">                <span class="keyword">if</span>(shurutemp[<span class="number">0</span>].arrve.hour*<span class="number">60</span>+shurutemp[<span class="number">0</span>].arrve.mintes &lt;= shuruans[count].end.hour*<span class="number">60</span>+shuruans[count].end.mintes) &#123;</span><br><span class="line">                    calculate(shurutemp[<span class="number">0</span>], shuruans[count].end.hour, shuruans[count].end.mintes);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    calculate(shurutemp[<span class="number">0</span>],shurutemp[<span class="number">0</span>].arrve.hour,shurutemp[<span class="number">0</span>].arrve.mintes);</span><br><span class="line">                &#125;</span><br><span class="line">                count+=<span class="number">1</span>;</span><br><span class="line">                shuruans[count] = shurutemp[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">            show(shuru[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;------------------------------------------------\n&quot;</span>);</span><br><span class="line">        <span class="comment">//计算带权平均与输出</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            show(shuruans[i]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;系统平均周转时间\t\t\t\t\t%10.2f（分钟）\n&quot;</span>,(<span class="keyword">float</span>)sumzz/n);</span><br><span class="line">        System.out.printf(<span class="string">&quot;带权平均周转时间\t\t\t\t\t%10.2f（分钟）\n&quot;</span>,sumzzxs/n);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">(Shuru shuru,<span class="keyword">int</span> TimeHour,<span class="keyword">int</span> TimeMinte)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            shuru.start.hour = TimeHour;</span><br><span class="line">            shuru.start.mintes = TimeMinte;</span><br><span class="line">            <span class="comment">//计算结束时间</span></span><br><span class="line">            <span class="keyword">if</span> ((shuru.start.mintes + shuru.zx) &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">                shuru.end.hour = (shuru.start.hour + <span class="number">1</span>);</span><br><span class="line">                shuru.end.mintes = (shuru.zx + shuru.start.mintes - <span class="number">60</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                shuru.end.hour = shuru.start.hour;</span><br><span class="line">                shuru.end.mintes = shuru.start.mintes + shuru.zx;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//计算周转时间</span></span><br><span class="line">            <span class="keyword">if</span> (shuru.end.hour == shuru.arrve.hour) &#123;</span><br><span class="line">                shuru.zz = shuru.end.mintes - shuru.arrve.mintes;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                shuru.zz = (shuru.end.hour - shuru.arrve.hour) * <span class="number">60</span> + shuru.end.mintes - shuru.arrve.mintes;</span><br><span class="line">            &#125;</span><br><span class="line">            shuru.zzxs = (<span class="keyword">float</span>)shuru.zz / shuru.zx;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span> <span class="params">(Shuru shuru)</span></span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%d\t%s\t\t%d\t\t%d（分钟）\t%02d:%02d\t\t%02d:%02d\t\t%02d:%02d\t\t%d（分钟）\t\t%.2f\n&quot;</span>,shuru.id, shuru.name,shuru.grad,shuru.zx,shuru.arrve.hour,shuru.arrve.mintes, shuru.start.hour,shuru.start.mintes,shuru.end.hour,shuru.end.mintes,shuru.zz,shuru.zzxs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        SJF j = <span class="keyword">new</span> SJF();</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入进程数目：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = s.nextInt();</span><br><span class="line">        j.sjf(n);</span><br><span class="line">        System.out.println(<span class="string">&quot;所有进程执行完毕！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5001 p1 1 9:40 20</span></span><br><span class="line"><span class="comment">5004 p4 4 10:10 10</span></span><br><span class="line"><span class="comment">5005 p5 3 10:05 30</span></span><br><span class="line"><span class="comment">5002 p2 3 9:55 15</span></span><br><span class="line"><span class="comment">5003 p3 2 9:45 25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1001 p1 1 10:00 20</span></span><br><span class="line"><span class="comment">1002 p2 2 9:20 65</span></span><br><span class="line"><span class="comment">1003 p3 2 10:25 50</span></span><br><span class="line"><span class="comment">1004 p4 3 8:10 10</span></span><br><span class="line"><span class="comment">1005 p5 2 7:40 20</span></span><br><span class="line"><span class="comment">1006 p6 1 11:20 100</span></span><br><span class="line"><span class="comment">1007 p7 1 10:30 120</span></span><br><span class="line"><span class="comment">        */</span></span><br></pre></td></tr></table></figure><h2 id="时间片轮转算法"><a href="#时间片轮转算法" class="headerlink" title="时间片轮转算法"></a>时间片轮转算法</h2><h3 id="主要思想-2"><a href="#主要思想-2" class="headerlink" title="主要思想"></a>主要思想</h3><p>设置时间片段，每次进入CPU的进程，只允许运行时间片段长度的时间，时间片用完后，解除CPU占用，进入当前就绪队列的最后；</p><p>CPU再选入就绪队列中最前面的进程调入CPU运行；如此反复，直到所有进程都运行完毕。</p><h3 id="Java具体实现-2"><a href="#Java具体实现-2" class="headerlink" title="Java具体实现"></a>Java具体实现</h3><h4 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据结构定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hour;</span><br><span class="line">    <span class="keyword">int</span> mintes;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">timePlus</span><span class="params">(Time begin, <span class="keyword">int</span> time)</span> </span>&#123;</span><br><span class="line">        begin.hour = (begin.hour + (<span class="keyword">int</span>) (begin.mintes + time) / <span class="number">60</span>);</span><br><span class="line">        begin.mintes = ((begin.mintes + time) % <span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">timesub</span><span class="params">(Time begin,Time end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (end.hour*<span class="number">60</span>+end.mintes - begin.hour*<span class="number">60</span>+begin.mintes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Process</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    String name; <span class="comment">//进程名</span></span><br><span class="line">    <span class="keyword">int</span>  zx;<span class="comment">//执行时间</span></span><br><span class="line">    Time arrive; <span class="comment">//到达就绪时间</span></span><br><span class="line">    Time start;<span class="comment">//每轮开始开始时间</span></span><br><span class="line">    Time first;<span class="comment">//首次执行时间</span></span><br><span class="line">    <span class="keyword">int</span> have_finished;<span class="comment">//已完成时间</span></span><br><span class="line">    Time arr;<span class="comment">//每轮到达时间</span></span><br><span class="line">    Time  end;<span class="comment">//完成时间</span></span><br><span class="line">    <span class="keyword">int</span> zz;  <span class="comment">//周转时间=完成时间-到达时间</span></span><br><span class="line">    <span class="keyword">double</span> zzxs; <span class="comment">//周转系数 =周转时间/执行时间</span></span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundRobin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SortByTime</span><span class="params">(Process shuru[])</span> </span>&#123;<span class="comment">//比较到达时间</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=shuru.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; shuru.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (shuru[j].arrive.hour*<span class="number">60</span>+shuru[j].arrive.mintes &lt; shuru[i].arrive.hour*<span class="number">60</span>+shuru[i].arrive.mintes) &#123;</span><br><span class="line"></span><br><span class="line">                    Process t = shuru[i];</span><br><span class="line">                    shuru[i] = shuru[j];</span><br><span class="line">                    shuru[j] = t;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Process a[],Process b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = a.length;</span><br><span class="line">        Process temp;</span><br><span class="line">        temp = b;</span><br><span class="line">        <span class="keyword">if</span>(find(b,a)) remove(a,b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j].name == <span class="string">&quot;nothing&quot;</span> || j==n-<span class="number">1</span>)&#123;</span><br><span class="line">                a[j] = temp;<span class="comment">//新增</span></span><br><span class="line">                a[j].start.hour = <span class="number">0</span>;</span><br><span class="line">                a[j].start.mintes = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Process A[],Process a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = A.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i].id==a.id)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;len-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                    A[j] = A[j+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        if (A[len-1].id==A[len-2].id)&#123;</span></span><br><span class="line"><span class="comment">//            A[len - 1].id = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].name = &quot;nothing&quot;;</span></span><br><span class="line"><span class="comment">//            A[len - 1].zx = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].arrive.hour = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].arrive.mintes = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].start.hour = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].start.mintes = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].have_finished = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].arr.hour = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].arr.mintes = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].end.hour = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].end.mintes = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].zz = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].zzxs = 0;</span></span><br><span class="line"><span class="comment">//            A[len - 1].flag = -1;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Process input[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;input.length;i++)&#123;</span><br><span class="line">            input[i] = <span class="keyword">new</span> Process();</span><br><span class="line">            input[i].id = <span class="number">0</span>;</span><br><span class="line">            input[i].name = <span class="string">&quot;nothing&quot;</span>;</span><br><span class="line">            input[i].zx = <span class="number">0</span>;</span><br><span class="line">            input[i].arrive = <span class="keyword">new</span> Time();</span><br><span class="line">            input[i].arrive.hour = <span class="number">0</span>;</span><br><span class="line">            input[i].arrive.mintes = <span class="number">0</span>;</span><br><span class="line">            input[i].start = <span class="keyword">new</span> Time();</span><br><span class="line">            input[i].start.hour = <span class="number">0</span>;</span><br><span class="line">            input[i].start.mintes = <span class="number">0</span>;</span><br><span class="line">            input[i].first  = <span class="keyword">new</span> Time();</span><br><span class="line"></span><br><span class="line">            input[i].have_finished = <span class="number">0</span>;</span><br><span class="line">            input[i].arr = <span class="keyword">new</span> Time();</span><br><span class="line">            input[i].arr.hour = <span class="number">0</span>;</span><br><span class="line">            input[i].arr.mintes = <span class="number">0</span>;</span><br><span class="line">            input[i].end = <span class="keyword">new</span> Time();</span><br><span class="line">            input[i].end.hour = <span class="number">0</span>;</span><br><span class="line">            input[i].end.mintes = <span class="number">0</span>;</span><br><span class="line">            input[i].zz = <span class="number">0</span>;</span><br><span class="line">            input[i].zzxs = <span class="number">0</span>;</span><br><span class="line">            input[i].flag = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span> <span class="params">(Process process[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sumzz=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> sumzzxs=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = process.length;</span><br><span class="line">        System.out.println(<span class="string">&quot;进程id\t进程名\t到达时间\t执行时间\t\t首次开始时间\t结束时间\t\t周转时间\t\t带权周转系数&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            process[i].zz = ((process[i].end.hour*<span class="number">60</span>+process[i].end.mintes)-(process[i].arrive.hour*<span class="number">60</span>+process[i].arrive.mintes));</span><br><span class="line">            process[i].zzxs = (<span class="keyword">float</span>)process[i].zz/process[i].zx;</span><br><span class="line">            sumzz += process[i].zz;</span><br><span class="line">            sumzzxs += process[i].zzxs;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t%s\t\t%02d:%02d\t%d(分钟)\t\t%02d:%02d\t\t%02d:%02d\t\t%d（分钟）\t\t%.2f\n&quot;</span>,</span><br><span class="line">                    process[i].id, process[i].name,</span><br><span class="line">                    process[i].arrive.hour, process[i].arrive.mintes, process[i].zx,</span><br><span class="line">                    process[i].first.hour, process[i].first.mintes,</span><br><span class="line">                    process[i].end.hour, process[i].end.mintes,</span><br><span class="line">                    process[i].zz, process[i].zzxs);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;系统平均周转时间\t\t\t\t\t%10.2f（分钟）\n&quot;</span>,(<span class="keyword">float</span>)sumzz/n);</span><br><span class="line">        System.out.printf(<span class="string">&quot;带权平均周转时间\t\t\t\t\t%10.2f（分钟）\n&quot;</span>,sumzzxs/n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showRun</span><span class="params">(Process process[], <span class="keyword">int</span> n, Time now)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第&quot;</span>+n+<span class="string">&quot;执行和就绪队列&quot;</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;当前时间: %02d :%02d\n&quot;</span>,now.hour,now.mintes);</span><br><span class="line">        System.out.println(<span class="string">&quot;ID号\t名字\t到达时间\t总执行时间(分钟)\t当前开始时间\t已完成时间\t剩余时间(分钟)&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;process.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (process[i].id!=<span class="number">0</span> &amp;&amp; process[i].name!=<span class="string">&quot;nothing&quot;</span>) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t%s\t%02d:%02d\t%d（分钟）\t\t\t%02d:%02d\t%d(分钟)\t\t%d（分钟）\n&quot;</span>,</span><br><span class="line">                        process[i].id, process[i].name,</span><br><span class="line">                        process[i].arrive.hour, process[i].arrive.mintes, process[i].zx,</span><br><span class="line">                        process[i].start.hour, process[i].start.mintes, process[i].have_finished,</span><br><span class="line">                        (process[i].zx - process[i].have_finished));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sure</span><span class="params">(Process input[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=input.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (input[j].flag!=<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(Process process,Process A[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (process.id==A[i].id)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">(Process A[],Time now,<span class="keyword">int</span> time,Process B[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (time&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> less;</span><br><span class="line">            A[<span class="number">0</span>].start.hour = now.hour;</span><br><span class="line">            A[<span class="number">0</span>].start.mintes = now.mintes;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        不可直接A.start = now,这只是建立索引，start与now会一同变化</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">            less = A[<span class="number">0</span>].zx - A[<span class="number">0</span>].have_finished;</span><br><span class="line">            <span class="comment">//第一次执行进程</span></span><br><span class="line">            <span class="keyword">if</span> (A[<span class="number">0</span>].have_finished == <span class="number">0</span>) &#123;</span><br><span class="line">                A[<span class="number">0</span>].first.hour = now.hour;</span><br><span class="line">                A[<span class="number">0</span>].first.mintes = now.mintes;</span><br><span class="line">                <span class="keyword">if</span> (less &gt; time) &#123;  <span class="comment">//剩余未做完&gt;大于时间片</span></span><br><span class="line">                    A[<span class="number">0</span>].start.hour = now.hour;</span><br><span class="line">                    A[<span class="number">0</span>].start.mintes = now.mintes;</span><br><span class="line">                    A[<span class="number">0</span>].have_finished += time;</span><br><span class="line">                    Time.timePlus(now, time);</span><br><span class="line">                    time = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    A[<span class="number">0</span>].have_finished = A[<span class="number">0</span>].zx;</span><br><span class="line">                    A[<span class="number">0</span>].flag = <span class="number">1</span>; <span class="comment">//表示做完了</span></span><br><span class="line">                    A[<span class="number">0</span>].end.hour = (now.hour + (<span class="keyword">int</span>) (now.mintes + less) / <span class="number">60</span>);</span><br><span class="line">                    A[<span class="number">0</span>].end.mintes = ((now.mintes + less) % <span class="number">60</span>);</span><br><span class="line">                    Time.timePlus(now, (time - less));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (less &gt; time) &#123;</span><br><span class="line">                    A[<span class="number">0</span>].start.hour = now.hour;</span><br><span class="line">                    A[<span class="number">0</span>].start.mintes = now.mintes;</span><br><span class="line">                    A[<span class="number">0</span>].have_finished += time;</span><br><span class="line">                    Time.timePlus(now, time);</span><br><span class="line">                    time = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    A[<span class="number">0</span>].have_finished = A[<span class="number">0</span>].zx;</span><br><span class="line">                    A[<span class="number">0</span>].flag = <span class="number">1</span>; <span class="comment">//表示做完了</span></span><br><span class="line">                    A[<span class="number">0</span>].end.hour = (now.hour + (<span class="keyword">int</span>) (now.mintes + less) / <span class="number">60</span>);</span><br><span class="line">                    A[<span class="number">0</span>].end.mintes = ((now.mintes + less) % <span class="number">60</span>);</span><br><span class="line">                    Time.timePlus(now, (time - less));</span><br><span class="line"><span class="comment">//                    calculate(A, now, time,B);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rr</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> Timeslice)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Process input[] = <span class="keyword">new</span> Process[n];</span><br><span class="line">        Process temp[] = <span class="keyword">new</span> Process[n];</span><br><span class="line">        Process ans[] = <span class="keyword">new</span> Process[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        init(input);</span><br><span class="line">        init(ans);</span><br><span class="line">        init(temp);</span><br><span class="line">        <span class="comment">//输入进程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;进程&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;信息输入：&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;进程id\t进程名\t优先级\t进程到达时间:\t进程执行时间&quot;</span>);</span><br><span class="line">            String s = scan.nextLine();</span><br><span class="line">            String[] sa = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            input[i].id = Integer.parseInt(sa[<span class="number">0</span>]);</span><br><span class="line">            input[i].name = sa[<span class="number">1</span>];</span><br><span class="line">            String[] time = sa[<span class="number">2</span>].split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            input[i].arrive.hour = Integer.parseInt(time[<span class="number">0</span>]);</span><br><span class="line">            input[i].arrive.mintes = Integer.parseInt(time[<span class="number">1</span>]);</span><br><span class="line">            input[i].zx = Integer.parseInt(sa[<span class="number">3</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        SortByTime(input);</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>,count_num=<span class="number">0</span>,timeset;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        count用于计算已经完成了多少个进程</span></span><br><span class="line"><span class="comment">        count_num 第几轮执行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Time now = <span class="keyword">new</span> Time();</span><br><span class="line">        now.hour = input[<span class="number">0</span>].arrive.hour;</span><br><span class="line">        now.mintes = input[<span class="number">0</span>].arrive.mintes;</span><br><span class="line">        insert(temp,input[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">while</span>(sure(ans))&#123;</span><br><span class="line"><span class="comment">//        while(count_num&lt;20)&#123;</span></span><br><span class="line">            count_num++;</span><br><span class="line">            calculate(temp, now, Timeslice,ans);</span><br><span class="line">            showRun(temp, count_num, now);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (temp[j].flag==<span class="number">1</span> &amp;&amp; count&lt;<span class="number">5</span> &amp;&amp; !find(temp[j],ans))&#123;</span><br><span class="line">                        ans[count++] = temp[j];</span><br><span class="line">                        remove(temp,temp[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;<span class="comment">//查找已经到达的程序</span></span><br><span class="line">                <span class="keyword">if</span> (now.hour * <span class="number">60</span> + now.mintes &gt; input[i].arrive.hour * <span class="number">60</span> + input[i].arrive.mintes) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!find(input[i], temp) &amp;&amp; !find(input[i],ans)) &#123;</span><br><span class="line">                        insert(temp, input[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            insert(temp, temp[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        show(ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        RoundRobin j = <span class="keyword">new</span> RoundRobin();</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入进程数目：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = s.nextInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入时间片时间：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> TimeSlice = s.nextInt();</span><br><span class="line">        j.rr(n, TimeSlice);</span><br><span class="line">        System.out.println(<span class="string">&quot;所有进程执行完毕！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5001 p1 9:40 20</span></span><br><span class="line"><span class="comment">5004 p4 10:10 10</span></span><br><span class="line"><span class="comment">5005 p5 10:05 30</span></span><br><span class="line"><span class="comment">5002 p2 9:55 15</span></span><br><span class="line"><span class="comment">5003 p3 9:45 25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2021/5/9 21:00</p><p>今天就写到这，下次补充</p><hr><h2 id="HRRF"><a href="#HRRF" class="headerlink" title="HRRF"></a>HRRF</h2><h3 id="主要思想-3"><a href="#主要思想-3" class="headerlink" title="主要思想"></a>主要思想</h3><p>主要思想就不写了，太麻烦了。。。这次是为了补充。。。具体自己可查吧</p><h3 id="具体实现-2"><a href="#具体实现-2" class="headerlink" title="具体实现"></a>具体实现</h3><h4 id="数据结构-3"><a href="#数据结构-3" class="headerlink" title="数据结构"></a>数据结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line">mport java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minute;</span><br><span class="line">    <span class="keyword">int</span> hour;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHour</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hour;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHour</span><span class="params">(<span class="keyword">int</span> hour)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hour = hour;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMinute</span><span class="params">(<span class="keyword">int</span> minute)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.minute = minute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Time <span class="title">timePlus</span><span class="params">(Time begin, <span class="keyword">int</span> time)</span> </span>&#123;</span><br><span class="line">        Time ans = <span class="keyword">new</span> Time();</span><br><span class="line">        ans.hour = (begin.hour + (<span class="keyword">int</span>) (begin.minute + time) / <span class="number">60</span>);</span><br><span class="line">        ans.minute = ((begin.minute + time) % <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">timesub</span><span class="params">(Time begin,Time end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((end.hour*<span class="number">60</span>+end.minute) - (begin.hour*<span class="number">60</span>+begin.minute));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">timecompare</span><span class="params">(Time a, Time b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((a.hour*<span class="number">60</span>+a.minute-b.hour*<span class="number">60</span>+b.minute)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Process</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Process</span>&gt;</span>&#123;</span><br><span class="line">    String name;<span class="comment">//名字</span></span><br><span class="line">    Time arrive;<span class="comment">//入井时间</span></span><br><span class="line">    <span class="keyword">int</span> zx;<span class="comment">//执行时间</span></span><br><span class="line">    Time jobTime;<span class="comment">//作业调度时间</span></span><br><span class="line">    <span class="keyword">int</span> jobWait;<span class="comment">//作业调度等待时间</span></span><br><span class="line">    Time processTime ;<span class="comment">//进程调度时间</span></span><br><span class="line">    <span class="keyword">int</span> processWait;<span class="comment">//进程调度等待时间</span></span><br><span class="line">    Time finish;<span class="comment">//完成时间</span></span><br><span class="line">    <span class="keyword">int</span> zz;<span class="comment">//周转时间</span></span><br><span class="line">    <span class="keyword">float</span> zzxs;<span class="comment">//带权周转系数</span></span><br><span class="line">    <span class="keyword">int</span> finished;<span class="comment">//标记作业完成</span></span><br><span class="line">    <span class="keyword">float</span> response;<span class="comment">//响应比</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getArrive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = String.format(<span class="string">&quot;%02d&quot;</span>, arrive.hour) + <span class="string">&quot;:&quot;</span>+String.format(<span class="string">&quot;%02d&quot;</span>, arrive.minute);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArrive</span><span class="params">(Time arrive)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arrive = arrive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getZx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> zx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZx</span><span class="params">(<span class="keyword">int</span> zx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.zx = zx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJobTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = String.format(<span class="string">&quot;%02d&quot;</span>, jobTime.hour) + <span class="string">&quot;:&quot;</span>+String.format(<span class="string">&quot;%02d&quot;</span>, jobTime.minute);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJobTime</span><span class="params">(Time jobTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jobTime = jobTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJobWait</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = String.format(<span class="string">&quot;%02d（分钟）&quot;</span>, jobWait);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJobWait</span><span class="params">(<span class="keyword">int</span> jobWait)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jobWait = jobWait;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProcessTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = String.format(<span class="string">&quot;%02d&quot;</span>, processTime.hour) + <span class="string">&quot;:&quot;</span>+String.format(<span class="string">&quot;%02d&quot;</span>, processTime.minute);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProcessTime</span><span class="params">(Time processTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.processTime = processTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProcessWait</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = String.format(<span class="string">&quot;%02d（分钟）&quot;</span>, processWait);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProcessWait</span><span class="params">(<span class="keyword">int</span> processWait)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.processWait = processWait;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFinish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = String.format(<span class="string">&quot;%02d&quot;</span>, finish.hour) + <span class="string">&quot;:&quot;</span>+String.format(<span class="string">&quot;%02d&quot;</span>, finish.minute);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFinish</span><span class="params">(Time finish)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.finish = finish;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getZz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> zz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZz</span><span class="params">(<span class="keyword">int</span> zz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.zz = zz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getZzxs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = String.format(<span class="string">&quot;%.4f&quot;</span>,zzxs);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZzxs</span><span class="params">(<span class="keyword">float</span> zzxs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.zzxs = zzxs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> finished;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFinished</span><span class="params">(<span class="keyword">int</span> finished)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.finished = finished;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getResponse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResponse</span><span class="params">(<span class="keyword">float</span> response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.response = response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Process a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.arrive.getHour()*<span class="number">60</span>+<span class="keyword">this</span>.arrive.getMinute())-(a.arrive.getHour()*<span class="number">60</span>+a.arrive.getMinute());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HRRF</span> </span>&#123;</span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> processNums;<span class="comment">//作业数</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Process&gt; ProcessList,Finished;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ProcessList = <span class="keyword">new</span> LinkedList&lt;Process&gt;();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入你要创建的作业数：&quot;</span>);</span><br><span class="line">        processNums = scan.nextInt();</span><br><span class="line">        scan.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请依次输入&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;作业名\t入井时间\t运行时间&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;processNums;i++)&#123;</span><br><span class="line">            Process p = <span class="keyword">new</span> Process();</span><br><span class="line">            String input = scan.nextLine();</span><br><span class="line">            String[] inputlist = input.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">            p.setName(inputlist[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">            Time time = <span class="keyword">new</span> Time();</span><br><span class="line">            String[] timelist = inputlist[<span class="number">1</span>].split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            time.setHour(Integer.parseInt(timelist[<span class="number">0</span>]));</span><br><span class="line">            time.setMinute(Integer.parseInt(timelist[<span class="number">1</span>]));</span><br><span class="line">            p.setArrive(time);</span><br><span class="line"></span><br><span class="line">            p.setZx(Integer.parseInt(inputlist[<span class="number">2</span>]));</span><br><span class="line"></span><br><span class="line">            Time sx = <span class="keyword">new</span> Time();</span><br><span class="line">            p.setJobTime(sx);</span><br><span class="line">            p.setProcessTime(sx);</span><br><span class="line">            p.setFinish(sx);</span><br><span class="line"></span><br><span class="line">            ProcessList.add(p);</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(ProcessList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showProcess</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> zzsum=<span class="number">0</span>,zzxssum=<span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;名字\t\t入井时间\t运行时间\t作业调度时间\t作业调度等待时间\t进程调度时间\t进程调度等待时间\t完成时间\t周转时间\t带权周转时间&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Finished.size();i++)&#123;</span><br><span class="line">            Process show = <span class="keyword">new</span> Process();</span><br><span class="line">            show = Finished.get(i);</span><br><span class="line">            System.out.println(show.getName()+<span class="string">&quot;\t&quot;</span>+show.getArrive()+<span class="string">&quot;\t&quot;</span>+show.getZx()+<span class="string">&quot;\t\t&quot;</span>+</span><br><span class="line">                    show.getJobTime()+<span class="string">&quot;\t\t\t&quot;</span>+show.getJobWait()+<span class="string">&quot;\t&quot;</span>+show.getProcessTime()+<span class="string">&quot;\t\t&quot;</span>+show.getProcessWait()+<span class="string">&quot;\t\t&quot;</span>+</span><br><span class="line">                    show.getFinish()+<span class="string">&quot;\t\t&quot;</span>+show.getZz()+<span class="string">&quot;\t\t&quot;</span>+show.getZzxs());</span><br><span class="line">            zzsum += show.getZz();</span><br><span class="line">            zzxssum += show.zzxs;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;系统平均周转时间为：\t\t\t\t\t\t\t\t\t&quot;</span>+String.format(<span class="string">&quot;%.4f&quot;</span>,zzsum/processNums));</span><br><span class="line">        System.out.println(<span class="string">&quot;系统带权平均周转时间为：\t\t\t\t\t\t\t\t&quot;</span>+String.format(<span class="string">&quot;%.4f&quot;</span>,zzxssum/processNums));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Process <span class="title">find</span><span class="params">(Time now)</span></span>&#123;</span><br><span class="line">        LinkedList&lt;Process&gt; FindList;</span><br><span class="line">        FindList = <span class="keyword">new</span> LinkedList&lt;Process&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ProcessList.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((ProcessList.get(i).getFinished()!=<span class="number">1</span>) &amp;&amp; Time.timecompare(ProcessList.get(i).arrive,now))&#123;</span><br><span class="line">                FindList.add(ProcessList.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;FindList.size();i++)&#123;</span><br><span class="line">            FindList.get(i).setResponse((<span class="number">1</span>+Time.timesub(FindList.get(i).arrive,now)/FindList.get(i).getZx()));</span><br><span class="line">        &#125;</span><br><span class="line">        Process max = <span class="keyword">new</span> Process();</span><br><span class="line">        <span class="keyword">float</span> maxX= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;FindList.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(maxX &lt; FindList.get(i).getResponse())&#123;</span><br><span class="line">                maxX = FindList.get(i).getResponse();</span><br><span class="line">                max = FindList.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Finished = <span class="keyword">new</span> LinkedList&lt;Process&gt;();</span><br><span class="line">        Time now = <span class="keyword">new</span> Time();</span><br><span class="line">        now.setHour(ProcessList.get(<span class="number">0</span>).arrive.getHour());</span><br><span class="line">        now.setMinute(ProcessList.get(<span class="number">0</span>).arrive.getMinute());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ProcessList.size();i++)&#123;</span><br><span class="line">            Process need = find(now);</span><br><span class="line">            need.setJobTime(now);</span><br><span class="line">            need.setJobWait(Time.timesub(need.arrive,now));</span><br><span class="line">            need.setProcessTime(need.jobTime);</span><br><span class="line">            need.setProcessWait(Time.timesub(need.jobTime,need.processTime));</span><br><span class="line">            now = Time.timePlus(now,need.getZx());</span><br><span class="line">            need.setFinish(now);</span><br><span class="line">            need.setZz(Time.timesub(need.arrive,need.finish));</span><br><span class="line">            need.setZzxs((<span class="keyword">float</span>)need.getZz()/need.getZx());</span><br><span class="line">            Finished.add(need);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ProcessList.size();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ProcessList.get(j).getName().equals(need.getName()))&#123;</span><br><span class="line">                    ProcessList.get(j).setFinished(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hrrf</span><span class="params">()</span></span>&#123;</span><br><span class="line">        init();</span><br><span class="line">        calculate();</span><br><span class="line">        showProcess();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HRRF h = <span class="keyword">new</span> HRRF();</span><br><span class="line">        h.hrrf();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2021/5/13 9:23</p><p>补充,银行家算法</p><h1 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h1><p>这个算法好像是不强制要求完成的，故此算法存在大问题的可能性较大（我不记得了o(<em>￣▽￣</em>)o）</p><h2 id="主要思想-4"><a href="#主要思想-4" class="headerlink" title="主要思想"></a>主要思想</h2><p>我们可以把<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a>看作是银行家，操作系统管理的资源相当于银行家管理的资金，进程向操作系统请求分配资源相当于用户向银行家贷款。</p><p>为保证资金的安全，银行家规定：</p><p>(1) 当一个顾客对资金的最大需求量不超过银行家现有的资金时就可接纳该顾客；</p><p>(2) 顾客可以分期贷款，但贷款的总数不能超过最大需求量；</p><p>(3) 当银行家现有的资金不能满足顾客尚需的贷款数额时，对顾客的贷款可推迟支付，但总能使顾客在有限的时间里得到贷款；</p><p>(4) 当顾客得到所需的全部资金后，一定能在有限的时间里归还所有的资金.</p><h2 id="Java具体实现-3"><a href="#Java具体实现-3" class="headerlink" title="Java具体实现"></a>Java具体实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.management.resource.internal.inst.FileOutputStreamRMHooks;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.NestingKind;</span><br><span class="line"><span class="keyword">import</span> javax.print.attribute.standard.Finishings;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banker</span></span>&#123;<span class="comment">//BankerOfAlgorithm  银行家算法</span></span><br><span class="line">    <span class="keyword">int</span> Max[][];</span><br><span class="line">    <span class="keyword">int</span> Allocation[][];</span><br><span class="line">    <span class="keyword">int</span> Need[][];</span><br><span class="line">    <span class="keyword">int</span> Available[];</span><br><span class="line">    <span class="keyword">int</span> Work[];</span><br><span class="line">    String name[];</span><br><span class="line">    <span class="keyword">int</span> temp[];</span><br><span class="line">    <span class="keyword">int</span> S = <span class="number">100</span>, P = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> safequeue[];</span><br><span class="line">    <span class="keyword">int</span> Flag[];</span><br><span class="line">    <span class="keyword">int</span> Request[];</span><br><span class="line">    Scanner sc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Banker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxsize = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> Max[][] = <span class="keyword">new</span> <span class="keyword">int</span>[maxsize][maxsize];</span><br><span class="line">        <span class="keyword">int</span> Allocation[][] = <span class="keyword">new</span> <span class="keyword">int</span>[maxsize][maxsize];</span><br><span class="line">        <span class="keyword">int</span> Need[][] = <span class="keyword">new</span> <span class="keyword">int</span>[maxsize][maxsize];</span><br><span class="line">        <span class="keyword">int</span> Available[] = <span class="keyword">new</span> <span class="keyword">int</span>[maxsize];</span><br><span class="line">        <span class="keyword">int</span> Work[] = <span class="keyword">new</span> <span class="keyword">int</span>[maxsize];</span><br><span class="line">        String name[] = <span class="keyword">new</span> String[maxsize];</span><br><span class="line">        <span class="keyword">int</span> temp[] = <span class="keyword">new</span> <span class="keyword">int</span>[maxsize];</span><br><span class="line">        <span class="keyword">int</span> S = <span class="number">100</span>, P = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> Flag[] = <span class="keyword">new</span> <span class="keyword">int</span>[maxsize];</span><br><span class="line">        <span class="keyword">int</span> safequeue[] = <span class="keyword">new</span> <span class="keyword">int</span>[maxsize];</span><br><span class="line">        <span class="keyword">int</span> Request[] = <span class="keyword">new</span> <span class="keyword">int</span>[maxsize];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">iffinish</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;P;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;S;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (Need[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Showdata</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i, j, k, l,temp=<span class="number">0</span>;;</span><br><span class="line">        System.out.println(<span class="string">&quot;进程名\t\t最大需求量\t尚需求量\t\t已分配量\t\t执行是否结束&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;\t\t\t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; S; i++) &#123;</span><br><span class="line">                System.out.print(name[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; P; i++) &#123;</span><br><span class="line">            temp = <span class="number">0</span>;</span><br><span class="line">            System.out.print(<span class="string">&quot;进程P[&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;]&quot;</span> + <span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; S; j++) &#123;</span><br><span class="line">                System.out.print(Max[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (l = <span class="number">0</span>; l &lt; S; l++) &#123;</span><br><span class="line">                System.out.print(Need[i][l] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                temp += Need[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; S; k++) &#123;</span><br><span class="line">                System.out.print(Allocation[i][k] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(Flag[i]==<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;finish\n&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;working\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n当前可用资源：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; S; i++) &#123;</span><br><span class="line">            System.out.print(Available[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Judgesafe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] tempwork = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">int</span> i, x, k = <span class="number">0</span>, m, apply;</span><br><span class="line">        <span class="keyword">int</span>[] Finish = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        Work = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; S; i++) &#123;</span><br><span class="line">            Work[i] = Available[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; P; i++) &#123;</span><br><span class="line">            apply = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; S; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Finish[i] == <span class="number">0</span> &amp;&amp; Need[i][j] &lt;= Work[j]) &#123;</span><br><span class="line">                    apply++;</span><br><span class="line">                    <span class="keyword">if</span> (apply == S) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (m = <span class="number">0</span>; m &lt; S; m++) &#123;</span><br><span class="line">                            tempwork[i][m] = Work[m];</span><br><span class="line">                            Work[m] = Work[m] + Allocation[i][m];</span><br><span class="line">                        &#125;</span><br><span class="line">                        Finish[i] = <span class="number">1</span>;</span><br><span class="line">                        temp[k] = i;</span><br><span class="line">                        i = -<span class="number">1</span>;</span><br><span class="line">                        k++;</span><br><span class="line">                        flag++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; P; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Finish[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;申请不成功&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;申请成功&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;分配的序列:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; P; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;P[&quot;</span>+(temp[i]+<span class="number">1</span>)+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; P - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;--&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Changedata</span><span class="params">(<span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S; i++) &#123;</span><br><span class="line">            Available[i] = Available[i] - Request[i];</span><br><span class="line">            Allocation[flag][i] = Allocation[flag][i] + Request[i];</span><br><span class="line">            Need[flag][i] = Need[flag][i] - Request[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Share</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> i, flag;</span><br><span class="line">        <span class="keyword">char</span> ch = <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入请求资源的进程：&quot;</span>);</span><br><span class="line">        flag = sc.nextInt()-<span class="number">1</span>;</span><br><span class="line">        Request = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">if</span> (flag &gt;= P) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;此进程不存在!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入此进程对各个资源的请求数量：&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; S; i++) &#123;</span><br><span class="line">                Request[i] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; S; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Request[i] &gt; Need[flag][i]) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;进程P[&quot;</span> + (flag+<span class="number">1</span>)+<span class="string">&quot;]&quot;</span> + <span class="string">&quot;申请的资源大于可用资源需要的资源!&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;分配不合理不予分配!&quot;</span>);</span><br><span class="line">                    ch = <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Request[i] &gt; Available[i]) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;进程&quot;</span> + (flag +<span class="number">1</span>)+ <span class="string">&quot;申请的资源大于可利用的资源。&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;分配不合理，不予分配!&quot;</span>);</span><br><span class="line">                    ch = <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (Judgesafe() == -<span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;进程&quot;</span> + flag + <span class="string">&quot;申请资源后，系统进入死锁状态，分配失败!&quot;</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; S; j++) &#123;</span><br><span class="line">                        Available[j] = Available[j] + Request[j];</span><br><span class="line">                        Allocation[flag][j] = Allocation[flag][j] - Request[j];</span><br><span class="line">                        Need[flag][j] = Need[flag][j] + Request[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                Changedata(flag);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(iffinish())&#123;</span><br><span class="line">                Flag[i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Banker mytext = <span class="keyword">new</span> Banker();</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> i, j, M, N, number;</span><br><span class="line">        String choice, tempstring;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入资源种类：&quot;</span>);</span><br><span class="line">        N = sc.nextInt();</span><br><span class="line">        mytext.S = N;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入进程的数量：&quot;</span>);</span><br><span class="line">        M = sc.nextInt();</span><br><span class="line">        mytext.P = M;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入资源的名称和数量：&quot;</span>);</span><br><span class="line">        mytext.name = <span class="keyword">new</span> String[<span class="number">100</span>];</span><br><span class="line">        mytext.Available = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            mytext.name[i] = sc.next();</span><br><span class="line">            mytext.Available[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;输入各进程资源最大需求量：&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;进程名\t\t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; mytext.S; i++) &#123;</span><br><span class="line">            System.out.print(mytext.name[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        sc.nextLine();</span><br><span class="line">        mytext.Max = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line">        mytext.Flag = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">            mytext.Flag[i] = <span class="number">0</span>;</span><br><span class="line">            String ss = sc.nextLine();</span><br><span class="line">            String[] sslist = ss.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">                mytext.Max[i][j] = Integer.parseInt(sslist[j+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;输入各进程资源已分配量：&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;进程名\t\t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; mytext.S; i++) &#123;</span><br><span class="line">            System.out.print(mytext.name[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        mytext.Allocation = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line">        mytext.Need = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">            String as = sc.nextLine();</span><br><span class="line">            String[] aslist = as.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">                mytext.Allocation[i][j] = Integer.parseInt(aslist[j+<span class="number">1</span>]);</span><br><span class="line">                mytext.Available[j] = mytext.Available[j] - mytext.Allocation[i][j];</span><br><span class="line">                mytext.Need[i][j] = mytext.Max[i][j] - mytext.Allocation[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            mytext.Judgesafe();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mytext.Showdata();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是否分配资源? Y/N：&quot;</span>);</span><br><span class="line">            choice = sc.next();</span><br><span class="line">            <span class="keyword">char</span> choice_char = choice.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">switch</span> (choice_char) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;N&#x27;</span>:</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    mytext.Share();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mytext.Showdata();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A 10</span></span><br><span class="line"><span class="comment">B 5</span></span><br><span class="line"><span class="comment">C 7</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">进程P[1] 7 5 3</span></span><br><span class="line"><span class="comment">进程P[2] 3 2 2</span></span><br><span class="line"><span class="comment">进程P[3] 9 0 2</span></span><br><span class="line"><span class="comment">进程P[4] 2 2 2</span></span><br><span class="line"><span class="comment">进程P[5] 4 3 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">进程P[1] 0 1 1</span></span><br><span class="line"><span class="comment">进程P[2] 2 0 0</span></span><br><span class="line"><span class="comment">进程P[3] 3 0 2</span></span><br><span class="line"><span class="comment">进程P[4] 2 1 1</span></span><br><span class="line"><span class="comment">进程P[5] 0 0 2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>以下是储存管理算法</p><h1 id="储存管算法"><a href="#储存管算法" class="headerlink" title="储存管算法"></a>储存管算法</h1><h2 id="固定分区储存管理"><a href="#固定分区储存管理" class="headerlink" title="固定分区储存管理"></a>固定分区储存管理</h2><h3 id="主要思想-5"><a href="#主要思想-5" class="headerlink" title="主要思想"></a>主要思想</h3><p>固定式分区是在处理作业之前<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E5%99%A8">存储器</a>就已经被划分成若干个分区，每个分区的大小可以相同，也可以不同。但是，一旦划分好分区后，<a href="https://baike.baidu.com/item/%E4%B8%BB%E5%AD%98%E5%82%A8%E5%99%A8">主存储器</a>中的分区的个数就固定了，且每个分区的大小固定不变。</p><h3 id="Java具体实现-4"><a href="#Java具体实现-4" class="headerlink" title="Java具体实现"></a>Java具体实现</h3><h4 id="数据结构-4"><a href="#数据结构-4" class="headerlink" title="数据结构"></a>数据结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">implements</span>  <span class="title">Comparable</span>&lt;<span class="title">Node</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; <span class="comment">//id号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size; <span class="comment">//分区长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> address; <span class="comment">//分区地址</span></span><br><span class="line">    String s; <span class="comment">//分区状态</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(<span class="keyword">int</span> address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setS</span><span class="params">(String ss)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = ss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node[ id=&quot;</span> + id + <span class="string">&quot;size=&quot;</span> + size + <span class="string">&quot;address=&quot;</span> + address + <span class="string">&quot;s=&quot;</span> + s + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getSize()-node.getSize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法实现-2"><a href="#算法实现-2" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FPSM</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nums;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Node&gt; NodeList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;*************打印区块信息**************&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;分区号\t大小(KB)\t起始(KB)\t状态&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++) &#123;</span><br><span class="line">            Node node = NodeList.get(i);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t\t%d\t\t%d\t\t%s\n&quot;</span>,node.getId(),node.getSize(),node.getAddress(),node.getS());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (NodeList.get(i).getS() != <span class="string">&quot;0&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">allocate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collections.sort(NodeList);  <span class="comment">//按分区大小排序</span></span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        show();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入作业数:&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入这&quot;</span> + (n) + <span class="string">&quot;作业的信息:&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span>[] list = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入作业&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;的大小:&quot;</span>);</span><br><span class="line">            list[i] = scan.nextInt();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (NodeList.get(j).getSize() &gt; list[i]) &#123;</span><br><span class="line">                    String ss = Integer.toString((i + <span class="number">1</span>));</span><br><span class="line">                    String s = <span class="string">&quot;JOB&quot;</span> + ss;</span><br><span class="line">                    NodeList.get(j).setS(s);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j==(nums-<span class="number">1</span>))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;JOB&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;大小超过最大分区大小，分配失败&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;各作业信息:&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;作业名\t\t作业大小&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;JOB&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;\t\t&quot;</span> + list[i] + <span class="string">&quot;KB&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">free</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要回收的作业名:&quot;</span>);</span><br><span class="line">        String name = scan.next();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (NodeList.get(i).getS().equalsIgnoreCase(name)) &#123; <span class="comment">//字符串比较需要调用函数，不然会出错</span></span><br><span class="line">                NodeList.get(i).setS(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;回收成功&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i==nums-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;回收失败，分配区中未找到该作业，请从新输入！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入系统的分区块数：&quot;</span>);</span><br><span class="line">        nums = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请依次输入：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;分区号\t大小\t起始&quot;</span>);</span><br><span class="line">        NodeList = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++) &#123;</span><br><span class="line">            NodeList.add(<span class="keyword">new</span> Node());</span><br><span class="line">        &#125;</span><br><span class="line">        scan.nextLine();</span><br><span class="line">        Node[] node = <span class="keyword">new</span> Node[nums];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++) &#123;</span><br><span class="line">            String s = scan.nextLine();</span><br><span class="line">            String[] slist = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            NodeList.get(i).setId(Integer.parseInt(slist[<span class="number">0</span>]));</span><br><span class="line">            NodeList.get(i).setSize(Integer.parseInt(slist[<span class="number">1</span>]));</span><br><span class="line">            NodeList.get(i).setAddress(Integer.parseInt(slist[<span class="number">2</span>]));</span><br><span class="line">            NodeList.get(i).setS(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fpsm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        init();</span><br><span class="line">        allocate();</span><br><span class="line">        show();</span><br><span class="line">        <span class="keyword">while</span> (find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是否还需要回收(y/n):&quot;</span>);</span><br><span class="line">            <span class="keyword">char</span> c = scan.next().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;Y&#x27;</span> || c == <span class="string">&#x27;y&#x27;</span>) &#123;</span><br><span class="line">                free();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FPSM f = <span class="keyword">new</span> FPSM();</span><br><span class="line">        f.fpsm();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 12 20</span></span><br><span class="line"><span class="comment">2 32 32</span></span><br><span class="line"><span class="comment">3 64 64</span></span><br><span class="line"><span class="comment">4 128 128</span></span><br><span class="line"><span class="comment">5 100 256</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="可变分区储存管理"><a href="#可变分区储存管理" class="headerlink" title="可变分区储存管理"></a>可变分区储存管理</h2><h3 id="主要思想-6"><a href="#主要思想-6" class="headerlink" title="主要思想"></a>主要思想</h3><p>在作业要求装入内存时，若当时内存中有足够的存储空间满足该作业的需求，那就划分出一个与作业相对地址空间同样大小的分区分配给它使用。 </p><p>前后相邻接分区的四种关系</p><ul><li>释放分区的前、后邻接分区都是已分配区，没有合并的问题存在。</li><li>释放分区的前邻接分区是空闲区，后邻接分区是已分配区。释放区应该和前邻接的空闲区合并成一个新的空闲区。</li><li>释放区的前邻接分区是已分配区，后邻接分区是空闲区。因此，释放分区应该和后邻接的空闲区合并成一个新的空闲区。</li><li>释放区的前、后邻接分区都是空闲区。因此，释放区应该和前、后两个邻接的空闲区合并成一个新的空闲区。</li></ul><p>空闲分区合并的时机</p><ul><li>一是调度到某作业时，若系统的每个空闲区尺寸都小于它的需要，但空闲区总存储量大于它的存储请求，于是进行空闲区合并，得到一个大的空闲区，满足该作业的需要。</li><li>一是只要有作业运行完归还所占用的存储区，系统就进行空闲区的合并。</li></ul><h3 id="Java具体实现-5"><a href="#Java具体实现-5" class="headerlink" title="Java具体实现"></a>Java具体实现</h3><h4 id="数据结构-5"><a href="#数据结构-5" class="headerlink" title="数据结构"></a>数据结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">implements</span>  <span class="title">Comparable</span>&lt;<span class="title">Node</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size; <span class="comment">//分区长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> address; <span class="comment">//分区地址</span></span><br><span class="line">    String flag; <span class="comment">//分区状态</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(<span class="keyword">int</span> address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(String ss)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = ss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getSize()-node.getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="算法实现-3"><a href="#算法实现-3" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VPSM</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalsize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> startaddress;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Node&gt; NodeList;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Node&gt; FreeList;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;**********可变分区管理**********&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [1] 内存分配          *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [2] 内存去配          *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [0] 退出管理          *&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;***********分配算法************&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [1] 最先分配算法       *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [2] 最优分配算法       *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [0] 最坏分配算法       *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*************主存分配情况**************&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;已分配：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;分区号\t大小(KB)\t起始(KB)\t状态&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;NodeList.size();i++)&#123;</span><br><span class="line">            Node node = NodeList.get(i);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t\t%d\t\t%d\t\t%s\n&quot;</span>,(i+<span class="number">1</span>),node.getSize(),node.getAddress(),node.getFlag());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;未分配：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;分区号\t大小(KB)\t起始(KB)\t状态&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt; FreeList.size();j++)&#123;</span><br><span class="line">            Node node = FreeList.get(j);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t\t%d\t\t%d\t\t%s\n&quot;</span>,(j+<span class="number">1</span>),node.getSize(),node.getAddress(),node.getFlag());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//分配</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FirstAllotment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入请求分配作业信息：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;作业名\t分配主存大小&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node();</span><br><span class="line">            String s = scan.nextLine();</span><br><span class="line">            String[] slist = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            size = Integer.parseInt(slist[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt; FreeList.size();j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (size &lt; FreeList.get(j).getSize()) &#123;</span><br><span class="line">                    node.setFlag(slist[<span class="number">0</span>]);</span><br><span class="line">                    node.setSize(size);</span><br><span class="line">                    node.setAddress(FreeList.get(j).getAddress());</span><br><span class="line">                    FreeList.get(j).setAddress(FreeList.get(j).getAddress() + size);</span><br><span class="line">                    FreeList.get(j).setSize(FreeList.get(j).getSize() - size);</span><br><span class="line">                    NodeList.add(node);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j == FreeList.size()-<span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;剩余储存空间不足，分配失败！&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(NodeList, <span class="keyword">new</span> Comparator&lt;Node&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Node o1, Node o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getAddress()-o2.getAddress();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;分配成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BestAllotment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入请求分配作业信息：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;作业名\t分配主存大小大小&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;length;i++) &#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node();</span><br><span class="line">            String s = scan.nextLine();</span><br><span class="line">            String[] slist = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            size = Integer.parseInt(slist[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt; FreeList.size();j++) &#123;  <span class="comment">//从空闲分区中查找</span></span><br><span class="line">                <span class="keyword">if</span> (size &lt; FreeList.get(j).getSize()) &#123;</span><br><span class="line">                    node.setFlag(slist[<span class="number">0</span>]);</span><br><span class="line">                    node.setSize(size);</span><br><span class="line">                    node.setAddress(FreeList.get(j).getAddress());</span><br><span class="line">                    FreeList.get(j).setAddress(FreeList.get(j).getAddress() + size);</span><br><span class="line">                    FreeList.get(j).setSize(FreeList.get(j).getSize() - size);</span><br><span class="line">                    NodeList.add(node);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j == FreeList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;剩余储存空间不足，分配失败！&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Collections.sort(NodeList, <span class="keyword">new</span> Comparator&lt;Node&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Node o1, Node o2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.getAddress() - o2.getAddress();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            Collections.sort(FreeList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WorstAllotment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入请求分配作业信息：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;作业名\t分配主存大小大小&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;length;i++) &#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node();</span><br><span class="line">            String s = scan.nextLine();</span><br><span class="line">            String[] slist = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            size = Integer.parseInt(slist[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=FreeList.size()-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--) &#123;  <span class="comment">//从空闲分区中查找</span></span><br><span class="line">                <span class="keyword">if</span> (size &lt; FreeList.get(j).getSize()) &#123;</span><br><span class="line">                    node.setFlag(slist[<span class="number">0</span>]);</span><br><span class="line">                    node.setSize(size);</span><br><span class="line">                    node.setAddress(FreeList.get(j).getAddress());</span><br><span class="line">                    FreeList.get(j).setAddress(FreeList.get(j).getAddress() + size);</span><br><span class="line">                    FreeList.get(j).setSize(FreeList.get(j).getSize() - size);</span><br><span class="line">                    NodeList.add(node);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j == FreeList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;剩余储存空间不足，分配失败！&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Collections.sort(NodeList, <span class="keyword">new</span> Comparator&lt;Node&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Node o1, Node o2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.getAddress() - o2.getAddress();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            Collections.sort(FreeList);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">free</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你要删除的作业名：&quot;</span>);</span><br><span class="line">        String s = scan.next();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        Node recycle = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="keyword">int</span> neighborup = -<span class="number">1</span>;<span class="comment">//记录上面相邻接块的位置，-1代表不邻接</span></span><br><span class="line">        <span class="keyword">int</span> neighbordown = -<span class="number">1</span>;<span class="comment">//记录上面相邻接块的位置，-1代表不邻接</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;NodeList.size();i++)&#123;</span><br><span class="line">            Node node = NodeList.get(i);</span><br><span class="line">            String flag = node.getFlag();</span><br><span class="line">            <span class="keyword">if</span>(flag.equalsIgnoreCase(s))&#123;</span><br><span class="line">                recycle.setSize(node.getSize());</span><br><span class="line">                recycle.setAddress(node.getAddress());</span><br><span class="line">                recycle.setFlag(node.getFlag());</span><br><span class="line">                <span class="comment">//先找到要回收的内存,保留信息</span></span><br><span class="line">                NodeList.remove(node); <span class="comment">//移除作业</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            else if(!(flag.equalsIgnoreCase(s)) &amp;&amp; (i==(NodeList.size()-1)))&#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;未找到该作业!分配失败!&quot;);</span></span><br><span class="line"><span class="comment">//                return ;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;FreeList.size(); i++) &#123;</span><br><span class="line">            Node free = FreeList.get(i);</span><br><span class="line">            <span class="comment">//上邻</span></span><br><span class="line">            <span class="keyword">if</span>(recycle.getAddress()==(free.getAddress()+free.getSize()))&#123;</span><br><span class="line">                neighborup = FreeList.indexOf(free);</span><br><span class="line">                free.setSize(free.getSize()+recycle.getSize());<span class="comment">//更新区间长度</span></span><br><span class="line">                FreeList.set(neighborup,free);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//下邻</span></span><br><span class="line">            <span class="keyword">if</span>((recycle.getAddress()+recycle.getSize())==free.getAddress())&#123;</span><br><span class="line">                neighbordown = FreeList.indexOf(free);<span class="comment">//更新两块合并后的长度</span></span><br><span class="line">                free.setAddress(recycle.getAddress());<span class="comment">//更新该空闲区间首地址</span></span><br><span class="line">                free.setSize(free.getSize()+recycle.getSize());<span class="comment">//更新该空闲区间长度</span></span><br><span class="line">                FreeList.set(neighbordown,free);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//上下邻</span></span><br><span class="line">            <span class="keyword">if</span> (neighbordown!=-<span class="number">1</span> &amp;&amp; neighborup!=-<span class="number">1</span>)&#123;</span><br><span class="line">                Node up = FreeList.get(neighborup);</span><br><span class="line">                Node down = FreeList.get(neighbordown);</span><br><span class="line"></span><br><span class="line">                up.setSize(down.getSize()-up.getSize());</span><br><span class="line">                FreeList.set(neighbordown,up);<span class="comment">//修改链表中三块合一后的最终空闲块</span></span><br><span class="line">                FreeList.remove(down);<span class="comment">//下面这块已经被上面那块合并</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (neighbordown==-<span class="number">1</span> &amp;&amp; neighborup==-<span class="number">1</span>)&#123;</span><br><span class="line">            Node addFree = <span class="keyword">new</span> Node();</span><br><span class="line">            addFree.setSize(recycle.getSize());</span><br><span class="line">            addFree.setAddress(recycle.getAddress());</span><br><span class="line">            addFree.setFlag(<span class="string">&quot;空闲&quot;</span>);</span><br><span class="line">            FreeList.addLast(addFree);</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(FreeList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入内存大小：&quot;</span>);</span><br><span class="line">        totalsize = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入起始地址大小：&quot;</span>);</span><br><span class="line">        startaddress = scan.nextInt();</span><br><span class="line">        <span class="comment">//初始空闲化分区</span></span><br><span class="line">        NodeList = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line">        FreeList = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line">        Node start = <span class="keyword">new</span> Node();</span><br><span class="line">        start.setSize(totalsize);</span><br><span class="line">        start.setAddress(startaddress);</span><br><span class="line">        start.setFlag(<span class="string">&quot;空闲&quot;</span>);</span><br><span class="line">        FreeList.add(start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">vpsm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        init();</span><br><span class="line">        show();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入要进行的管理选项：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> FuncChoic = scan.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (FuncChoic == <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入分配方式选项：&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> AllocWay = scan.nextInt();</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入你要分配的个数：&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> nums = scan.nextInt();</span><br><span class="line">                length = nums;</span><br><span class="line">                <span class="keyword">switch</span> (AllocWay) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        FirstAllotment();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        BestAllotment();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        WorstAllotment();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        System.out.println(<span class="string">&quot;选择的分配方式有误&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FuncChoic == <span class="number">2</span>) &#123;</span><br><span class="line">                free();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FuncChoic == <span class="number">0</span>) &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入有误！！请从新输入&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VPSM f = <span class="keyword">new</span> VPSM();</span><br><span class="line">        f.vpsm();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">256</span></span><br><span class="line"><span class="comment">40</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">JOB_A 15</span></span><br><span class="line"><span class="comment">JOB_B 50</span></span><br><span class="line"><span class="comment">JOB_C 10</span></span><br><span class="line"><span class="comment">JOB_D 25</span></span><br><span class="line"><span class="comment">JOB_E 14</span></span><br><span class="line"><span class="comment">JOB_F 32</span></span><br><span class="line"><span class="comment">done</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>实验老师要求是页式、段式、段页式储存管理选一个，我选了短时储存管理，故只有一个啦</p><h2 id="段式储存管理"><a href="#段式储存管理" class="headerlink" title="段式储存管理"></a>段式储存管理</h2><h3 id="主要思想-7"><a href="#主要思想-7" class="headerlink" title="主要思想"></a>主要思想</h3><p>了进行段式管理，每道程序在系统中都有一个段（映象）表来存放该道程序各段装入主存的状况信息。段表中的每一项（对应表中的每一行）描述该道程序一个段的基本状况，由若干个字段提供。段名字段用于存放段的名称，段名一般是有其逻辑意义的，也可以转换成用段号指明。由于段号从0开始顺序编号，正好与段表中的<a href="https://baike.baidu.com/item/%E8%A1%8C%E5%8F%B7">行号</a>对应，如2段必是段表中的第3行，这样，段表中就可不设段号（名）字段。装入位字段用来指示该段是否已经调入主存，“1”表示已装入，“0”表示未装入。在程序的执行过程中，各段的装入位随该段是否活跃而动态变化。当装入位为“1”时，地址字段用于表示该段装入主存中起始（绝对）地址，当装入位为“0”时，则无效（有时机器用它表示该段在<a href="https://baike.baidu.com/item/%E8%BE%85%E5%AD%98">辅存</a>中的起始地址）。段长字段指明该段的大小，一般以字数或字节数为单位，取决于所用的<a href="https://baike.baidu.com/item/%E7%BC%96%E5%9D%80">编址</a>方式。段长字段是用来判断所访问的地址是否越出段界的界限保护检查用的。访问方式字段用来标记该段允许的访问方式，如只读、可写、只能执行等，以提供段的访问方式保护。除此之外，段表中还可以根据需要设置其它的字段。段表本身也是一个段，一般常驻在主存中，也可以存在辅存中，需要时再调入主存。假设系统在主存中最多可同时有N道程序，可设N个段表<a href="https://baike.baidu.com/item/%E5%9F%BA%E5%9D%80%E5%AF%84%E5%AD%98%E5%99%A8/2164353">基址寄存器</a>。对应于每道程序，由基号（程序号）指明使用哪个段表<a href="https://baike.baidu.com/item/%E5%9F%BA%E5%9D%80%E5%AF%84%E5%AD%98%E5%99%A8/2164353">基址寄存器</a>。段表基址寄存器中的段表基址字段指向该道程序的段表在主存中的起始地址。段表长度字段指明该道程序所用段表的行数，即程序的段数。</p><h3 id="Java具体实现-6"><a href="#Java具体实现-6" class="headerlink" title="Java具体实现"></a>Java具体实现</h3><h4 id="数据结构-6"><a href="#数据结构-6" class="headerlink" title="数据结构"></a>数据结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">implements</span>  <span class="title">Comparable</span>&lt;<span class="title">Node</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size; <span class="comment">//分区长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> address; <span class="comment">//分区地址</span></span><br><span class="line">    String flag; <span class="comment">//分区状态</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(<span class="keyword">int</span> address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(String ss)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = ss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getSize()-node.getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法实现-4"><a href="#算法实现-4" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SSM</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalsize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> startaddress;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Node&gt; NodeList;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Node&gt; FreeList;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;**********段式储存管理**********&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [1] 内存分配          *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [2] 内存去配          *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [0] 退出管理          *&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;***********分配算法************&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [1] 最先分配算法       *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [2] 最优分配算法       *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*       [0] 最坏分配算法       *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*************主存分配情况**************&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;已分配：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;分区号\t大小(KB)\t起始(KB)\t状态&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;NodeList.size();i++)&#123;</span><br><span class="line">            Node node = NodeList.get(i);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t\t%d\t\t%d\t\t%s\n&quot;</span>,(i+<span class="number">1</span>),node.getSize(),node.getAddress(),node.getFlag());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;未分配：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;分区号\t大小(KB)\t起始(KB)\t状态&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt; FreeList.size();j++)&#123;</span><br><span class="line">            Node node = FreeList.get(j);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t\t%d\t\t%d\t\t%s\n&quot;</span>,(j+<span class="number">1</span>),node.getSize(),node.getAddress(),node.getFlag());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowSegmentTable</span><span class="params">(String n)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;******打印&quot;</span>+n+<span class="string">&quot;段表*****&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;段号\t段长（KB）\t基址（KB）&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;NodeList.size();i++)&#123;</span><br><span class="line">            Node node = NodeList.get(i);</span><br><span class="line">            String line = node.getFlag();</span><br><span class="line">            String ns = line.substring(<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">            String ID = line.substring(<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(ns.equals(n))&#123;</span><br><span class="line">                System.out.println(ID+<span class="string">&quot;\t&quot;</span>+node.getSize()+<span class="string">&quot;\t\t\t&quot;</span>+node.getAddress());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//分配</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FirstAllotment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入作业名：&quot;</span>);</span><br><span class="line">        String name = scan.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入&quot;</span>+name+<span class="string">&quot;请求分配的内存大小（单位：KB）：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> allSize = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入分成几段：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> nums = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums;i++)&#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node();</span><br><span class="line">            System.out.println(<span class="string">&quot;剩余&quot;</span>+allSize+<span class="string">&quot;K的内存,请输入第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;段内存大小（单位：KB）：&quot;</span>);</span><br><span class="line">            size = scan.nextInt();</span><br><span class="line">            String flag = name+<span class="string">&quot;(&quot;</span>+Integer.toString(i)+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt; FreeList.size();j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (size &lt; FreeList.get(j).getSize()) &#123;</span><br><span class="line">                    node.setFlag(flag);</span><br><span class="line">                    node.setSize(size);</span><br><span class="line">                    node.setAddress(FreeList.get(j).getAddress());</span><br><span class="line">                    FreeList.get(j).setAddress(FreeList.get(j).getAddress() + size);</span><br><span class="line">                    FreeList.get(j).setSize(FreeList.get(j).getSize() - size);</span><br><span class="line">                    NodeList.add(node);</span><br><span class="line">                    allSize -= size;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j == FreeList.size()-<span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;剩余储存空间不足，分配失败！&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            show();</span><br><span class="line">            Collections.sort(NodeList, <span class="keyword">new</span> Comparator&lt;Node&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Node o1, Node o2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.getAddress()-o2.getAddress();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;分配成功&quot;</span>);</span><br><span class="line">        ShowSegmentTable(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BestAllotment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入作业名：&quot;</span>);</span><br><span class="line">        String name = scan.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入&quot;</span>+name+<span class="string">&quot;请求分配的内存大小（单位：KB）：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> allSize = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入分成几段：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> nums = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums;i++) &#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node();</span><br><span class="line">            System.out.println(<span class="string">&quot;剩余&quot;</span>+allSize+<span class="string">&quot;K的内存,请输入第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;段内存大小（单位：KB）：&quot;</span>);</span><br><span class="line">            size = scan.nextInt();</span><br><span class="line">            String flag = name+<span class="string">&quot;(&quot;</span>+Integer.toString(i)+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt; FreeList.size();j++) &#123;  <span class="comment">//从空闲分区中查找</span></span><br><span class="line">                <span class="keyword">if</span> (size &lt; FreeList.get(j).getSize()) &#123;</span><br><span class="line">                    node.setFlag(flag);</span><br><span class="line">                    node.setSize(size);</span><br><span class="line">                    node.setAddress(FreeList.get(j).getAddress());</span><br><span class="line">                    FreeList.get(j).setAddress(FreeList.get(j).getAddress() + size);</span><br><span class="line">                    FreeList.get(j).setSize(FreeList.get(j).getSize() - size);</span><br><span class="line">                    NodeList.add(node);</span><br><span class="line">                    allSize -= size;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j == FreeList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;剩余储存空间不足，分配失败！&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            show();</span><br><span class="line">            Collections.sort(NodeList, <span class="keyword">new</span> Comparator&lt;Node&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Node o1, Node o2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.getAddress() - o2.getAddress();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            Collections.sort(FreeList);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;分配成功&quot;</span>);</span><br><span class="line">        ShowSegmentTable(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WorstAllotment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入作业名：&quot;</span>);</span><br><span class="line">        String name = scan.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入&quot;</span>+name+<span class="string">&quot;请求分配的内存大小（单位：KB）：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> allSize = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入分成几段：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> nums = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums;i++) &#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node();</span><br><span class="line">            System.out.println(<span class="string">&quot;剩余&quot;</span>+allSize+<span class="string">&quot;K的内存,请输入第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;段内存大小（单位：KB）：&quot;</span>);</span><br><span class="line">            size = scan.nextInt();</span><br><span class="line">            String flag = name+<span class="string">&quot;(&quot;</span>+Integer.toString(i)+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=FreeList.size()-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--) &#123;  <span class="comment">//从空闲分区中查找</span></span><br><span class="line">                <span class="keyword">if</span> (size &lt; FreeList.get(j).getSize()) &#123;</span><br><span class="line">                    node.setFlag(flag);</span><br><span class="line">                    node.setSize(size);</span><br><span class="line">                    node.setAddress(FreeList.get(j).getAddress());</span><br><span class="line">                    FreeList.get(j).setAddress(FreeList.get(j).getAddress() + size);</span><br><span class="line">                    FreeList.get(j).setSize(FreeList.get(j).getSize() - size);</span><br><span class="line">                    NodeList.add(node);</span><br><span class="line">                    allSize -= size;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j == FreeList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;剩余储存空间不足，分配失败！&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            show();</span><br><span class="line">            Collections.sort(NodeList, <span class="keyword">new</span> Comparator&lt;Node&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Node o1, Node o2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.getAddress() - o2.getAddress();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            Collections.sort(FreeList);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;分配成功&quot;</span>);</span><br><span class="line">        ShowSegmentTable(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//去配</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sure</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; NodeList.size();i++)&#123;</span><br><span class="line">            Node node = NodeList.get(i);</span><br><span class="line">            String line = node.getFlag();</span><br><span class="line">            String ns = line.substring(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">            <span class="keyword">if</span> (ns.equals(name))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">free</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你要删除的作业名：&quot;</span>);</span><br><span class="line">        String name = scan.next();</span><br><span class="line">        Node recycle = <span class="keyword">new</span> Node();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(sure(name)) &#123;</span><br><span class="line">            <span class="comment">//每次free前要初始化邻接状态</span></span><br><span class="line">            <span class="keyword">int</span> neighborup = -<span class="number">1</span>;<span class="comment">//记录上面相邻接块的位置，-1代表不邻接</span></span><br><span class="line">            <span class="keyword">int</span> neighbordown = -<span class="number">1</span>;<span class="comment">//记录上面相邻接块的位置，-1代表不邻接</span></span><br><span class="line">            <span class="comment">//查找要释放的作业</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NodeList.size(); i++) &#123;</span><br><span class="line">                Node node = NodeList.get(i);</span><br><span class="line">                String line = node.getFlag();</span><br><span class="line">                String ns = line.substring(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">                <span class="keyword">if</span> (ns.equals(name)) &#123;</span><br><span class="line">                    recycle.setSize(node.getSize());</span><br><span class="line">                    recycle.setAddress(node.getAddress());</span><br><span class="line">                    recycle.setFlag(node.getFlag());</span><br><span class="line">                    <span class="comment">//先找到要回收的内存,保留信息</span></span><br><span class="line">                    NodeList.remove(node); <span class="comment">//移除作业</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(ns.equals(name)) &amp;&amp; (i == (NodeList.size() - <span class="number">1</span>))) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;未找到该作业!去配失败!&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//去配作业</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; FreeList.size(); i++) &#123;</span><br><span class="line">                Node free = FreeList.get(i);</span><br><span class="line">                <span class="comment">//上邻</span></span><br><span class="line">                <span class="keyword">if</span> (recycle.getAddress() == (free.getAddress() + free.getSize())) &#123;</span><br><span class="line">                    neighborup = FreeList.indexOf(free);</span><br><span class="line">                    free.setSize(free.getSize() + recycle.getSize());<span class="comment">//更新区间长度</span></span><br><span class="line">                    FreeList.set(neighborup, free);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//下邻</span></span><br><span class="line">                <span class="keyword">if</span> ((recycle.getAddress() + recycle.getSize()) == free.getAddress()) &#123;</span><br><span class="line">                    neighbordown = FreeList.indexOf(free);<span class="comment">//更新两块合并后的长度</span></span><br><span class="line">                    free.setAddress(recycle.getAddress());<span class="comment">//更新该空闲区间首地址</span></span><br><span class="line">                    free.setSize(free.getSize() + recycle.getSize());<span class="comment">//更新该空闲区间长度</span></span><br><span class="line">                    FreeList.set(neighbordown, free);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//上下邻</span></span><br><span class="line">                <span class="keyword">if</span> (neighbordown != -<span class="number">1</span> &amp;&amp; neighborup != -<span class="number">1</span>) &#123;</span><br><span class="line">                    Node up = FreeList.get(neighborup);</span><br><span class="line">                    Node down = FreeList.get(neighbordown);</span><br><span class="line"></span><br><span class="line">                    up.setSize(down.getSize() + up.getSize()-recycle.getSize());</span><br><span class="line">                    FreeList.set(neighborup, up);<span class="comment">//修改链表中三块合一后的最终空闲块</span></span><br><span class="line">                    FreeList.remove(down);<span class="comment">//下面这块已经被上面那块合并</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (neighbordown == -<span class="number">1</span> &amp;&amp; neighborup == -<span class="number">1</span>) &#123;</span><br><span class="line">                Node addFree = <span class="keyword">new</span> Node();</span><br><span class="line">                addFree.setSize(recycle.getSize());</span><br><span class="line">                addFree.setAddress(recycle.getAddress());</span><br><span class="line">                addFree.setFlag(<span class="string">&quot;空闲&quot;</span>);</span><br><span class="line">                FreeList.addLast(addFree);</span><br><span class="line">            &#125;</span><br><span class="line">            Collections.sort(FreeList);</span><br><span class="line">            System.out.println(<span class="string">&quot;回收&quot;</span>+name+<span class="string">&quot;的段&quot;</span>+recycle.getFlag()+<span class="string">&quot;成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入初始内存大小：&quot;</span>);</span><br><span class="line">        totalsize = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入起始地址大小：&quot;</span>);</span><br><span class="line">        startaddress = scan.nextInt();</span><br><span class="line">        <span class="comment">//初始空闲化分区</span></span><br><span class="line">        NodeList = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line">        FreeList = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line">        Node start = <span class="keyword">new</span> Node();</span><br><span class="line">        start.setSize(totalsize);</span><br><span class="line">        start.setAddress(startaddress);</span><br><span class="line">        start.setFlag(<span class="string">&quot;空闲&quot;</span>);</span><br><span class="line">        FreeList.add(start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ssm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        init();</span><br><span class="line">        show();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入要进行的管理选项：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> FuncChoic = scan.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (FuncChoic == <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入分配方式选项：&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> AllocWay = scan.nextInt();</span><br><span class="line">                <span class="keyword">switch</span> (AllocWay) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        FirstAllotment();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        BestAllotment();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        WorstAllotment();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        System.out.println(<span class="string">&quot;选择的分配方式有误&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FuncChoic == <span class="number">2</span>) &#123;</span><br><span class="line">                free();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FuncChoic == <span class="number">0</span>) &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入有误！！请从新输入&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SSM f = <span class="keyword">new</span> SSM();</span><br><span class="line">        f.ssm();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">256</span></span><br><span class="line"><span class="comment">40</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">JOB_A</span></span><br><span class="line"><span class="comment">50</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">30</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">JOB_C</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">30</span></span><br><span class="line"><span class="comment">35</span></span><br><span class="line"><span class="comment">35</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h2><h3 id="主要思想-8"><a href="#主要思想-8" class="headerlink" title="主要思想"></a>主要思想</h3><p>这个较难，一两句话讲不清</p><p>参考链接</p><p><a href="https://www.jianshu.com/p/18285ecffbfb">https://www.jianshu.com/p/18285ecffbfb</a></p><h3 id="Java具体实现-7"><a href="#Java具体实现-7" class="headerlink" title="Java具体实现"></a>Java具体实现</h3><h4 id="算法实现-5"><a href="#算法实现-5" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PRA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;<span class="comment">//物理块数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> F;<span class="comment">//未能找到的次数 缺页率=F/length</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//作业名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length; <span class="comment">//作业长度</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt;list = <span class="keyword">null</span>; <span class="comment">//作业页面顺序</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer,Integer&gt;map = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] showlist;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowProcess</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;作业名：&quot;</span>+name);</span><br><span class="line">        System.out.println(<span class="string">&quot;作业调度过程&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;   \t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            System.out.print((i+<span class="number">1</span>)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;   \t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            System.out.print(list.get(i)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;块%d\t&quot;</span>,(j+<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(showlist[j][i]==-<span class="number">1</span>)&#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot; &quot;</span>+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.print(showlist[j][i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;**********请求分页式储存管理**********&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*         [1] FIFO分配            *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*         [2] LRU(LFU)分配        *&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;*         [3] OPT分配        *&quot;);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;*         [0] 退出                *&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FIFO</span><span class="params">()</span></span>&#123;</span><br><span class="line">        map.clear();</span><br><span class="line">        F = <span class="number">0</span>;</span><br><span class="line">        Queue&lt;Integer&gt; q=<span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> k=list.get(i);<span class="comment">//待处理元素</span></span><br><span class="line">            <span class="keyword">if</span> (!map.containsValue(k))&#123;</span><br><span class="line">                F++;<span class="comment">//不能直接找到次数加1</span></span><br><span class="line">                <span class="keyword">if</span> (map.size()&lt;n)&#123;<span class="comment">//如果没有装满</span></span><br><span class="line">                    <span class="keyword">int</span> temp=map.size();</span><br><span class="line">                    map.put(temp, k);</span><br><span class="line">                    q.offer(temp);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp=q.poll();<span class="comment">//排除的元素位置</span></span><br><span class="line">                    map.remove(temp);</span><br><span class="line">                    map.put(temp,k);</span><br><span class="line">                    q.offer(temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>; s&lt;n;s++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(map.get(s)!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                    showlist[s][i] = map.get(s);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    showlist[s][i] = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ShowProcess();</span><br><span class="line">        System.out.printf(<span class="string">&quot;缺页中断率为:%02.2f\n&quot;</span>,(F*<span class="number">1.0</span>/length)*<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LRU</span><span class="params">()</span></span>&#123;</span><br><span class="line">        map.clear();</span><br><span class="line">        F = <span class="number">0</span>;</span><br><span class="line">        List&lt;Integer&gt; linkedlist = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> k=list.get(i);<span class="comment">//待处理元素</span></span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(k))&#123;</span><br><span class="line">                F++;<span class="comment">//不能直接找到次数加1</span></span><br><span class="line">                <span class="keyword">if</span> (map.size()&lt;n)&#123;<span class="comment">//如果没有装满</span></span><br><span class="line">                    <span class="keyword">int</span> temp=map.size();</span><br><span class="line">                    map.put(k,temp);</span><br><span class="line">                    linkedlist.add(k);<span class="comment">//添加位置</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp=linkedlist.get(<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">int</span> c=map.get(temp);<span class="comment">//位置</span></span><br><span class="line">                    map.remove(temp);</span><br><span class="line">                    map.put(k,c);</span><br><span class="line">                    linkedlist.remove(<span class="number">0</span>);</span><br><span class="line">                    linkedlist.add(k);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span><span class="comment">//如果包含这个值，把这个值拿走并在后面压入</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> d=linkedlist.indexOf(k);<span class="comment">//查找存在位置</span></span><br><span class="line">                linkedlist.remove(d);</span><br><span class="line">                linkedlist.add(k);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>; s&lt;n;s++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(map.get(s)!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                    showlist[s][i] = map.get(s);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    showlist[s][i] = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ShowProcess();</span><br><span class="line">        System.out.printf(<span class="string">&quot;缺页中断率为:%02.2f\n&quot;</span>,(F*<span class="number">1.0</span>/length)*<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OPT</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> k=list.get(i);<span class="comment">//待处理元素</span></span><br><span class="line">            <span class="keyword">if</span> (!map.containsValue(k))&#123;</span><br><span class="line">                F++;<span class="comment">//不能直接找到次数加1</span></span><br><span class="line">                <span class="keyword">if</span> (map.size()&lt;n)&#123;<span class="comment">//如果没有装满</span></span><br><span class="line">                    <span class="keyword">int</span> temp=map.size();</span><br><span class="line">                    map.put(temp, k);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">//如果装满了</span></span><br><span class="line">                    <span class="keyword">int</span> index=<span class="number">0</span>;<span class="comment">//把哪个位置的淘汰出去</span></span><br><span class="line">                    <span class="keyword">int</span> min=<span class="number">0</span>;<span class="comment">//初始最长长度</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;n;t++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span> (j=i+<span class="number">1</span>;j&lt;length;j++)&#123;<span class="comment">//看后面哪一个出现的最晚</span></span><br><span class="line">                            <span class="keyword">if</span> (list.get(j)==map.get(t))&#123;<span class="comment">//第一次找到</span></span><br><span class="line">                                <span class="keyword">if</span> (j-i&gt;min)&#123;</span><br><span class="line">                                    index=t;<span class="comment">//更新值</span></span><br><span class="line">                                    min=j-i;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (j==length)&#123;<span class="comment">//如果到最后</span></span><br><span class="line">                            index=t;</span><br><span class="line">                            min=j-i;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    map.remove(index);</span><br><span class="line">                    map.put(index,k);<span class="comment">//修改表内元素</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>; s&lt;n;s++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(map.get(s)!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                    showlist[s][i] = map.get(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ShowProcess();</span><br><span class="line">        System.out.printf(<span class="string">&quot;缺页中断率为:%02.2f\n&quot;</span>,(F*<span class="number">1.0</span>/length)*<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pra</span><span class="params">()</span></span>&#123;</span><br><span class="line">        map=<span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();<span class="comment">//存储每一个内储页框所存的内容</span></span><br><span class="line">        map.clear();</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入物理块数：&quot;</span>);</span><br><span class="line">            n = scan.nextInt();</span><br><span class="line">            menu();</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入选项：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> choice = scan.nextInt();</span><br><span class="line">            scan.nextLine();<span class="comment">//读走回车</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入作业名：&quot;</span>);</span><br><span class="line">            name = scan.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入作业的页面长度&quot;</span>);</span><br><span class="line">            length = scan.nextInt();</span><br><span class="line">            scan.nextLine();<span class="comment">//读走回车</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入作业的页面顺序&quot;</span>);</span><br><span class="line">            String str = scan.nextLine();</span><br><span class="line">            String[] sList = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">                list.add(Integer.parseInt(sList[i]));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//showlist初始化</span></span><br><span class="line">            showlist = <span class="keyword">new</span> <span class="keyword">int</span>[n][length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                    showlist[j][i] = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    FIFO();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    LRU();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//                case 3:</span></span><br><span class="line"><span class="comment">//                    OPT();</span></span><br><span class="line"><span class="comment">//                    break;</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入的选项有误请从新输入&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PRA pra = <span class="keyword">new</span> PRA();</span><br><span class="line">        pra.pra();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JOB_1</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">7 0 1 2 0 3 0 4 2 3 0 3 2 1 2 0 1 7 0 1</span></span><br><span class="line"><span class="comment">JOB_2</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">7 0 1 2 0 3 0 4 2 3 0 3 2 1 2 0 1 7 0 1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>这个算法中，showProcess函数存在错误，并非正确显示，可以忽略，如需输出，可自行再修改</p><h1 id="磁盘臂调度算法"><a href="#磁盘臂调度算法" class="headerlink" title="磁盘臂调度算法"></a>磁盘臂调度算法</h1><h3 id="主要思想-9"><a href="#主要思想-9" class="headerlink" title="主要思想"></a>主要思想</h3><p>思想太长了，我好懒不想写；参见别人的说法，连接如下 <a href="https://blog.csdn.net/Zhxin606a/article/details/89577836">https://blog.csdn.net/Zhxin606a/article/details/89577836</a></p><h2 id="Java具体实现-8"><a href="#Java具体实现-8" class="headerlink" title="Java具体实现"></a>Java具体实现</h2><h3 id="数据结构-没有特殊的数据结构，用数组即可"><a href="#数据结构-没有特殊的数据结构，用数组即可" class="headerlink" title="数据结构 没有特殊的数据结构，用数组即可"></a>数据结构 没有特殊的数据结构，用数组即可</h3><h3 id="算法实现-6"><a href="#算法实现-6" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.geom.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DSASA</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length; <span class="comment">//访问序列长度</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; acessSque = <span class="keyword">null</span>; <span class="comment">//访问顺序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> now; <span class="comment">//正在访问页面</span></span><br><span class="line">    <span class="comment">/** 调用画图函数 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawGraphics</span><span class="params">(<span class="keyword">int</span>[] x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] y = <span class="keyword">new</span> <span class="keyword">int</span>[x.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.length; i++) &#123;</span><br><span class="line">            y[i] = (i + <span class="number">1</span>) * <span class="number">60</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Draw d = <span class="keyword">new</span> Draw();</span><br><span class="line">        d.setX(x);</span><br><span class="line">        d.setY(y);</span><br><span class="line">        d.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入访问序列长度：&quot;</span>);</span><br><span class="line">        length = scan.nextInt();</span><br><span class="line">        scan.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入访问柱面顺序：&quot;</span>);</span><br><span class="line">        acessSque = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();;</span><br><span class="line">        acessSque.clear();</span><br><span class="line">        String s = scan.nextLine();</span><br><span class="line">        String[] slist = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length;i++)&#123;</span><br><span class="line">            acessSque.add(Integer.parseInt(slist[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入正在访问的页面：&quot;</span>);</span><br><span class="line">        now = scan.nextInt();</span><br><span class="line">        scan.nextLine();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FCFS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***********FCFS磁盘臂调度过程***********&quot;</span>);</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span>[] moveSque = <span class="keyword">new</span> <span class="keyword">int</span>[length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> movesum = <span class="number">0</span>;</span><br><span class="line">        moveSque[<span class="number">0</span>] = now;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>) &#123;</span><br><span class="line">                movesum += Math.abs(acessSque.get(i) - now);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                movesum += Math.abs(acessSque.get(i)-acessSque.get(i-<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            moveSque[i+<span class="number">1</span>] = acessSque.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;移动顺序为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; moveSque.length;i++)&#123;</span><br><span class="line">            System.out.print(moveSque[i]+ <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n移动柱面为：&quot;</span>+movesum);</span><br><span class="line">        drawGraphics(moveSque);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SSTF</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***********SSTF磁盘臂调度过程***********&quot;</span>);</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span>[] moveSque = <span class="keyword">new</span> <span class="keyword">int</span>[length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> movesum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> min;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        moveSque[<span class="number">0</span>] = now;</span><br><span class="line">        Collections.sort(acessSque);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length;i++)&#123;</span><br><span class="line">            min = Math.abs((acessSque.get(<span class="number">0</span>)-moveSque[i]));</span><br><span class="line">            x = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt; acessSque.size();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Math.abs((acessSque.get(j)-moveSque[i]))&lt;= min)&#123;</span><br><span class="line">                    min = Math.abs(acessSque.get(j)-moveSque[i]);</span><br><span class="line">                    x = acessSque.get(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            moveSque[i+<span class="number">1</span>] = x;</span><br><span class="line">            acessSque.remove(acessSque.indexOf(x));</span><br><span class="line">            movesum += Math.abs(moveSque[i]-moveSque[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;最短优先的顺序为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; moveSque.length;i++)&#123;</span><br><span class="line">            System.out.print(moveSque[i]+ <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n移动柱面为：&quot;</span>+movesum);</span><br><span class="line">        drawGraphics(moveSque);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SCAN</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***********电梯调度***********&quot;</span>);</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span>[] moveSque_out_to_in = <span class="keyword">new</span> <span class="keyword">int</span>[length+<span class="number">1</span>];  <span class="comment">//由外向里</span></span><br><span class="line">        <span class="keyword">int</span>[] moveSque_in_to_out = <span class="keyword">new</span> <span class="keyword">int</span>[length+<span class="number">1</span>];  <span class="comment">//由里向外</span></span><br><span class="line">        <span class="keyword">int</span> movesum_out = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> movesum_in = <span class="number">0</span>;</span><br><span class="line">        moveSque_out_to_in[<span class="number">0</span>] = now;</span><br><span class="line">        moveSque_in_to_out[<span class="number">0</span>] = now;</span><br><span class="line">        Collections.sort(acessSque);</span><br><span class="line">        <span class="keyword">int</span> locats=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(acessSque.get(i)&lt;=now &amp;&amp; acessSque.get(i+<span class="number">1</span>)&gt;now)&#123;</span><br><span class="line">                locats = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(locats!=<span class="number">0</span>) &#123;  <span class="comment">//开始位置在中间</span></span><br><span class="line"></span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = locats; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">                moveSque_in_to_out[count++] = acessSque.get(k);</span><br><span class="line">                movesum_in += Math.abs(moveSque_in_to_out[count-<span class="number">1</span>]-moveSque_in_to_out[count-<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = locats+<span class="number">1</span>; k &lt; length; k++) &#123;</span><br><span class="line">                moveSque_in_to_out[count++] = acessSque.get(k);</span><br><span class="line">                movesum_in += Math.abs(moveSque_in_to_out[count-<span class="number">1</span>]-moveSque_in_to_out[count-<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=locats+<span class="number">1</span>;k&lt;length;k++)&#123;</span><br><span class="line">                moveSque_out_to_in[count++] = acessSque.get(k);</span><br><span class="line">                movesum_out += Math.abs(moveSque_out_to_in[count-<span class="number">1</span>]-moveSque_out_to_in[count-<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=locats;k &gt;= <span class="number">0</span>; k--)&#123;</span><br><span class="line">                moveSque_out_to_in[count++] = acessSque.get(k);</span><br><span class="line">                movesum_out += Math.abs(moveSque_out_to_in[count-<span class="number">1</span>]-moveSque_out_to_in[count-<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (acessSque.get(length-<span class="number">1</span>) &lt;= now)&#123;</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">                    moveSque_out_to_in[count++] = acessSque.get(i);</span><br><span class="line">                    movesum_out += Math.abs(moveSque_out_to_in[count-<span class="number">1</span>]-moveSque_out_to_in[count-<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                    moveSque_in_to_out[count++] = acessSque.get(i);</span><br><span class="line">                    movesum_out += Math.abs(moveSque_out_to_in[count-<span class="number">1</span>]-moveSque_out_to_in[count-<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;由里向外移动顺序为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; moveSque_in_to_out.length;i++)&#123;</span><br><span class="line">            System.out.print(moveSque_in_to_out[i]+ <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n移动柱面为：&quot;</span>+movesum_in);</span><br><span class="line">        drawGraphics(moveSque_in_to_out);</span><br><span class="line">        System.out.println(<span class="string">&quot;由外向里移动顺序为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; moveSque_out_to_in.length;i++)&#123;</span><br><span class="line">            System.out.print(moveSque_out_to_in[i]+ <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n移动柱面为：&quot;</span>+movesum_out);</span><br><span class="line">        drawGraphics(moveSque_out_to_in);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dsasa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FCFS();SSTF();SCAN();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DSASA dsasa = <span class="keyword">new</span> DSASA();</span><br><span class="line">        dsasa.dsasa();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Draw</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getx() &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span>[] x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] gety() &#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">int</span>[] y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setSize(<span class="number">1000</span>,<span class="number">800</span>);</span><br><span class="line">        setDefaultCloseOperation(DISPOSE_ON_CLOSE);</span><br><span class="line">        setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">        Graphics2D g2 = (Graphics2D)g;  <span class="comment">//g是Graphics对象</span></span><br><span class="line">        g2.setStroke(<span class="keyword">new</span> BasicStroke(<span class="number">3.0f</span>));</span><br><span class="line">        g2.setColor(Color.blue);</span><br><span class="line">        g2.drawLine(<span class="number">50</span>, y[<span class="number">0</span>], <span class="number">950</span>, y[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="comment">//            g.setColor(Color.RED);</span></span><br><span class="line">            g2.drawString(<span class="string">&quot;&quot;</span> + x[i], x[i]*<span class="number">5</span>, y[i]);</span><br><span class="line"><span class="comment">//            g.setColor(Color.BLUE);</span></span><br><span class="line">            g2.drawLine(x[i]*<span class="number">5</span>, y[i], x[i+<span class="number">1</span>]*<span class="number">5</span>, y[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        g.setColor(Color.RED);</span></span><br><span class="line">        g.drawString(<span class="string">&quot;&quot;</span> + x[x.length-<span class="number">1</span>], x[x.length-<span class="number">1</span>]*<span class="number">5</span>, y[y.length-<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">98 183 37 122 14 124 65 67</span></span><br><span class="line"><span class="comment">53</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="磁盘空间管理-位视图法"><a href="#磁盘空间管理-位视图法" class="headerlink" title="磁盘空间管理 位视图法"></a>磁盘空间管理 位视图法</h1><h2 id="主要思想-10"><a href="#主要思想-10" class="headerlink" title="主要思想"></a>主要思想</h2><h2 id="Java具体实现-9"><a href="#Java具体实现-9" class="headerlink" title="Java具体实现"></a>Java具体实现</h2><h3 id="数据结构-7"><a href="#数据结构-7" class="headerlink" title="数据结构"></a>数据结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: whk</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@time</span>: 2021/5/22 17:35</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> size;<span class="comment">//需要分配空间的大小</span></span><br><span class="line">    <span class="keyword">int</span>[] a; <span class="comment">//块号</span></span><br><span class="line"><span class="comment">//    int[] zihao;//字号</span></span><br><span class="line"><span class="comment">//    int[] weihao;//位号</span></span><br><span class="line">    <span class="keyword">int</span>[] Cylinder; <span class="comment">//柱面号</span></span><br><span class="line">    <span class="keyword">int</span>[] headers;<span class="comment">//磁头号</span></span><br><span class="line">    <span class="keyword">int</span>[] Sector;<span class="comment">//扇区号</span></span><br><span class="line">    String name;<span class="comment">//作业名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> newSize)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size=newSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getA</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setA</span><span class="params">(<span class="keyword">int</span> newA,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a[i] = newA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public int getZihao(int i)&#123;</span></span><br><span class="line"><span class="comment">//        return zihao[i];</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    public void setZihao(int newZihao,int i)&#123;</span></span><br><span class="line"><span class="comment">//        this.zihao[i] = newZihao;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    public int getWeihao(int i)&#123;</span></span><br><span class="line"><span class="comment">//        return weihao[i];</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    public void setWeihao(int newWeihao,int i)&#123;</span></span><br><span class="line"><span class="comment">//        this.weihao[i] = newWeihao;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCylinder</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Cylinder[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCylinder</span><span class="params">(<span class="keyword">int</span> newCylinder,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Cylinder[i] = newCylinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeaders</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> headers[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeaders</span><span class="params">(<span class="keyword">int</span> newheaders,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.headers[i] = newheaders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSector</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Sector[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSector</span><span class="params">(<span class="keyword">int</span> newSector,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Sector[i] = newSector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String newName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = newName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法实现-7"><a href="#算法实现-7" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DSMA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> fucun;<span class="comment">//辅存空间大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> zichang;<span class="comment">//字长</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> kuaichang;<span class="comment">//块长</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> Headnums;<span class="comment">//磁道数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> SectorsNums; <span class="comment">//扇区数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] fucunspace;<span class="comment">//辅存空间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//辅助变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Node&gt; Nodelist;</span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Nodelist = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入辅存空间大小（单位：K）和字长（32 or 64）和块长（单位：K）：&quot;</span>);</span><br><span class="line">        String s = scan.nextLine();</span><br><span class="line">        String[] slist = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        fucun = Integer.parseInt(slist[<span class="number">0</span>]);</span><br><span class="line">        zichang = Integer.parseInt(slist[<span class="number">1</span>]);</span><br><span class="line">        kuaichang = Integer.parseInt(slist[<span class="number">2</span>]);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入该辅存硬盘的的磁道数（磁头数）、每磁道扇区数: &quot;</span>);</span><br><span class="line">        String s2 = scan.nextLine();</span><br><span class="line">        String[] s2list = s2.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        Headnums = Integer.parseInt(s2list[<span class="number">0</span>]);</span><br><span class="line">        SectorsNums = Integer.parseInt(s2list[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化辅存空间表,随机初始化</span></span><br><span class="line">        x= (<span class="keyword">int</span>) Math.ceil(fucun/zichang);</span><br><span class="line">        fucunspace = <span class="keyword">new</span> <span class="keyword">int</span>[x+<span class="number">1</span>][zichang];</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=x;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;zichang;j++)&#123;</span><br><span class="line">                fucunspace[i][j] = r.nextInt(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowMemorySpace</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span>: whk</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@time</span>: 2021/5/22 17:35</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;********************************************打印内存空间分配情况*****************************************&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;zichang;i++)&#123;</span><br><span class="line">            System.out.print((i+<span class="number">1</span>) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        x= (<span class="keyword">int</span>) Math.ceil(fucun/zichang);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=x;i++)&#123;</span><br><span class="line">            System.out.print((i+<span class="number">1</span>)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;zichang;j++)&#123;</span><br><span class="line">                System.out.print(fucunspace[i][j]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(fucunspace[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;系统剩余空块数：&quot;</span>+(fucun-count));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowMemoryInfo</span><span class="params">(String names)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> names</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span>: whk</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@time</span>: 2021/5/22 17:33</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Node temp = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; Nodelist.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Nodelist.get(i).getName().equals(names))&#123;</span><br><span class="line">                temp = Nodelist.get(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!Nodelist.get(i).getName().equals(names) &amp;&amp; (i+<span class="number">1</span>)== Nodelist.size())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;该作业无储存信息&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;**********打印&quot;</span>+temp.getName()+<span class="string">&quot;作业在辅助中的信息************&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;记录\t\t块号\t\t柱面号\t磁头号\t扇区号&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp.getSize();i++)&#123;</span><br><span class="line">            System.out.println((i+<span class="number">1</span>)+<span class="string">&quot;\t\t&quot;</span>+temp.getA(i)+<span class="string">&quot;\t\t&quot;</span>+temp.getCylinder(i)+<span class="string">&quot;\t\t&quot;</span>+temp.getHeaders(i)+<span class="string">&quot;\t\t&quot;</span>+temp.getSector(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span>: whk</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@time</span>: 2021/5/22 17:34</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;***********辅存空间管理************&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*         [1] 空间分配           *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*         [2] 空间去配           *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*         [0] 退出管理           *&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] find() &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span>: int[]</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span>: whk</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@time</span>: 2021/5/22 17:34</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span>[] loac = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; zichang; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fucunspace[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">                    fucunspace[i][j] = <span class="number">1</span>;</span><br><span class="line">                    loac[<span class="number">0</span>] = i;</span><br><span class="line">                    loac[<span class="number">1</span>] = j;</span><br><span class="line">                    <span class="keyword">return</span> loac;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Allocat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span>: whk</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@time</span>: 2021/5/22 17:34</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入申请空间的作业名字和需要分配的辅存空间的大小：&quot;</span>);</span><br><span class="line">        String s3 = scan.nextLine();</span><br><span class="line">        String[] s3list = s3.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(Integer.parseInt(s3list[<span class="number">1</span>])&lt;fucun &amp;&amp; Integer.parseInt(s3list[<span class="number">1</span>])&lt;count) &#123;</span><br><span class="line">            <span class="comment">//保证不会越界</span></span><br><span class="line">            Node node = <span class="keyword">new</span> Node();</span><br><span class="line">            node.setName(s3list[<span class="number">0</span>]);</span><br><span class="line">            node.setSize(Integer.parseInt(s3list[<span class="number">1</span>]));</span><br><span class="line">            node.a = <span class="keyword">new</span> <span class="keyword">int</span>[node.getSize()];</span><br><span class="line"><span class="comment">//            node.zihao = new int[node.getSize()];</span></span><br><span class="line">            node.Cylinder = <span class="keyword">new</span> <span class="keyword">int</span>[node.getSize()];</span><br><span class="line">            node.headers = <span class="keyword">new</span> <span class="keyword">int</span>[node.getSize()];</span><br><span class="line">            node.Sector = <span class="keyword">new</span> <span class="keyword">int</span>[node.getSize()];</span><br><span class="line">            x = (<span class="keyword">int</span>) Math.ceil(fucun / zichang);</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; node.getSize(); k++) &#123;</span><br><span class="line">                <span class="keyword">int</span>[] list = find();</span><br><span class="line"><span class="comment">//                System.out.println(list[0]+&quot; &quot;+list[1]);</span></span><br><span class="line">                <span class="keyword">if</span> (list[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                    temp = list[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (list[<span class="number">0</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    temp = list[<span class="number">0</span>] * zichang + list[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> d = SectorsNums*Headnums;</span><br><span class="line">                node.setA(temp, k);</span><br><span class="line">                node.setCylinder(temp/d, k);</span><br><span class="line">                node.setHeaders((temp%d)/SectorsNums, k);</span><br><span class="line">                node.setSector(temp % d % SectorsNums, k);</span><br><span class="line">            &#125;</span><br><span class="line">            Nodelist.add(node);</span><br><span class="line">            System.out.println(<span class="string">&quot;内存分配成功！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> node.getName();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;申请内存空间大于当前可用内存空间&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Free</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span>: whk</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@time</span>: 2021/5/22 17:34</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.print(<span class="string">&quot;当前分配的作业：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Node node : Nodelist) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Nodelist.indexOf(node)==Nodelist.size()-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(node.getName());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(node.getName() + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你要回收的作业名：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String names = scan.nextLine();</span><br><span class="line">        Node freenode = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Nodelist.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (Nodelist.get(i).getName().equals(names))&#123;</span><br><span class="line"><span class="comment">//                System.out.println(&quot;查找成功。。。。。&quot;);</span></span><br><span class="line">                freenode = Nodelist.get(i);</span><br><span class="line">                Nodelist.remove(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt; freenode.getSize();k++) &#123;</span><br><span class="line">            <span class="keyword">int</span> s = freenode.getA(k);</span><br><span class="line">            <span class="keyword">int</span> i,j;</span><br><span class="line">            <span class="keyword">if</span> (s &lt;zichang)&#123;</span><br><span class="line">                i = <span class="number">0</span>;</span><br><span class="line">                j = s;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                i = s/zichang;</span><br><span class="line">                j = s- i*zichang;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            System.out.println(i+&quot; &quot;+j);</span></span><br><span class="line">            fucunspace[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;回收成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> freenode.getName();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dsma</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span>: whk</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@time</span>: 2021/5/22 17:34</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        init();</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化储存空间.....&quot;</span>);</span><br><span class="line">        ShowMemorySpace();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            menu();</span><br><span class="line">            ShowMemorySpace();</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入选项&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> choice = scan.nextInt();</span><br><span class="line">            scan.nextLine();</span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    String name = Allocat();</span><br><span class="line">                    ShowMemorySpace();</span><br><span class="line">                    ShowMemoryInfo(name);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    ShowMemoryInfo(Free());</span><br><span class="line">                    ShowMemorySpace();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    System.exit(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入的选项有误,请重新输入&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DSMA d = <span class="keyword">new</span> DSMA();</span><br><span class="line">        d.dsma();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1000 64 1</span></span><br><span class="line"><span class="comment">8 96</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">JOB_1 50</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">JOB_5 30</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><hr><p>这个算法应该是最后一个算法了，不知道后面的操作系统会不会有算法了，按照实验指南来说的话，前面是还有几个算法直接跳过了，如果还有的话我就再补充吧</p><p>2021年5月22日17:46</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此文写的是操作系统的算法（java版）&lt;/p&gt;
&lt;h1 id=&quot;读前须知&quot;&gt;&lt;a href=&quot;#读前须知&quot; class=&quot;headerlink&quot; title=&quot;读前须知&quot;&gt;&lt;/a&gt;读前须知&lt;/h1&gt;&lt;p&gt;1、文中算法，都是为了完成作业而写的，存在较多BUG, 算法最后带一个</summary>
      
    
    
    
    <category term="OS" scheme="https://www.whkblog.work/categories/OS/"/>
    
    
    <category term="操作系统算法" scheme="https://www.whkblog.work/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
